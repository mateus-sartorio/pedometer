<?xml version="1.0" encoding="UTF-8"?>
<model:MDescriptors xmlns:model="http://www.silabs.com/ss/Studio.ecore">
  <descriptors label="SLSENSORPUCK_sensor_puck" description="Create the SLSENSORPUCK_sensor_puck example for the Environmental and Biometric Sensor Puck from the EFM32 SDK (v4.2.0) version 2.0.10">
    <properties key="template.category" value="Environmental and Biometric Sensor Puck"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLSENSORPUCK_EFM32G/examples/sensor_puck/SimplicityStudio/SLSENSORPUCK_sensor_puck.slsproj"/>
    <properties key="core.boardCompatibility" value="slsensorpuck.efm32g"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g210f128"/>
    <properties key="template.initiallyOpenedResource" value="src/si114x_sys_out_puck.c"/>
  </descriptors>
  <descriptors label="DKXXX_accelG890" description="&lt;h1&gt;&lt;b&gt;Accelerometer example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS including DVK BSP (board &#xD;&#xA;support package) and demonstrates  the use of the ADC/DMA in order &#xD;&#xA;to access the accelerometer. Tilt DVK board left/right to move LEDs&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32-Gxxx-DK Development Kit&#xD;&#xA;Device: EFM32G290F128 and EFM32G890F128&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko Development Kit (G890)"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32_Gxxx_DK/examples/accel/SimplicityStudio/DKXXX_accelG290.slsproj,../hardware/kit/EFM32_Gxxx_DK/examples/accel/SimplicityStudio/DKXXX_accelG890.slsproj,../hardware/kit/EFM32_Gxxx_DK/examples/accel/arm/accelG290.uvprojx,../hardware/kit/EFM32_Gxxx_DK/examples/accel/arm/accelG890.uvprojx,../hardware/kit/EFM32_Gxxx_DK/examples/accel/iar/accel.eww"/>
    <properties key="core.boardCompatibility" value="brd3300a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="src/accel.c"/>
  </descriptors>
  <descriptors label="DKXXX_accelG290" description="&lt;h1&gt;&lt;b&gt;Accelerometer example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS including DVK BSP (board &#xD;&#xA;support package) and demonstrates  the use of the ADC/DMA in order &#xD;&#xA;to access the accelerometer. Tilt DVK board left/right to move LEDs&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32-Gxxx-DK Development Kit&#xD;&#xA;Device: EFM32G290F128 and EFM32G890F128&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko Development Kit (G290)"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32_Gxxx_DK/examples/accel/SimplicityStudio/DKXXX_accelG290.slsproj,../hardware/kit/EFM32_Gxxx_DK/examples/accel/SimplicityStudio/DKXXX_accelG890.slsproj,../hardware/kit/EFM32_Gxxx_DK/examples/accel/arm/accelG290.uvprojx,../hardware/kit/EFM32_Gxxx_DK/examples/accel/arm/accelG890.uvprojx,../hardware/kit/EFM32_Gxxx_DK/examples/accel/iar/accel.eww"/>
    <properties key="core.boardCompatibility" value="brd3300b"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g290f128"/>
    <properties key="template.initiallyOpenedResource" value="src/accel.c"/>
  </descriptors>
  <descriptors label="DKXXX_blinkG890" description="&lt;h1&gt;&lt;b&gt;Blink example, template for new projects.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS including DVK BSP (board &#xD;&#xA;support package) and demonstrates  the use of Systick in interrupt &#xD;&#xA;driven mode.&#xD;&#xA;&#xD;&#xA;It sets up access to DVK registers, for use with &#xD;&#xA;MCU-Module's with and without LCD.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32-Gxxx-DK Development Kit&#xD;&#xA;Device: EFM32G290F128 and EFM32G890F128&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko Development Kit (G890)"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32_Gxxx_DK/examples/blink/SimplicityStudio/DKXXX_blinkG290.slsproj,../hardware/kit/EFM32_Gxxx_DK/examples/blink/SimplicityStudio/DKXXX_blinkG890.slsproj,../hardware/kit/EFM32_Gxxx_DK/examples/blink/arm/blinkG290.uvprojx,../hardware/kit/EFM32_Gxxx_DK/examples/blink/arm/blinkG890.uvprojx,../hardware/kit/EFM32_Gxxx_DK/examples/blink/iar/blink.eww"/>
    <properties key="core.boardCompatibility" value="brd3300a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="src/blink.c"/>
  </descriptors>
  <descriptors label="DKXXX_blinkG290" description="&lt;h1&gt;&lt;b&gt;Blink example, template for new projects.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS including DVK BSP (board &#xD;&#xA;support package) and demonstrates  the use of Systick in interrupt &#xD;&#xA;driven mode.&#xD;&#xA;&#xD;&#xA;It sets up access to DVK registers, for use with &#xD;&#xA;MCU-Module's with and without LCD.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32-Gxxx-DK Development Kit&#xD;&#xA;Device: EFM32G290F128 and EFM32G890F128&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko Development Kit (G290)"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32_Gxxx_DK/examples/blink/SimplicityStudio/DKXXX_blinkG290.slsproj,../hardware/kit/EFM32_Gxxx_DK/examples/blink/SimplicityStudio/DKXXX_blinkG890.slsproj,../hardware/kit/EFM32_Gxxx_DK/examples/blink/arm/blinkG290.uvprojx,../hardware/kit/EFM32_Gxxx_DK/examples/blink/arm/blinkG890.uvprojx,../hardware/kit/EFM32_Gxxx_DK/examples/blink/iar/blink.eww"/>
    <properties key="core.boardCompatibility" value="brd3300b"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g290f128"/>
    <properties key="template.initiallyOpenedResource" value="src/blink.c"/>
  </descriptors>
  <descriptors label="DKXXX_clocksG890" description="&lt;h1&gt;&lt;b&gt;Core clock example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS and emlib including DVK BSP&#xD;&#xA;(board support package) and demonstrates the use of various clock&#xD;&#xA;sources for driving the CORE. It also includes configuration using EM0-2&#xD;&#xA;modes when in idle.&#xD;&#xA;&#xD;&#xA;The following configuration through use of joystick is possible:&#xD;&#xA;&#xD;&#xA;- Joystick up and down, toggles core clock source.&#xD;&#xA;- Joystick left and right, changes core clock divison factor.&#xD;&#xA;  (Divisor shown with ring.)&#xD;&#xA;- Joystick push toggles energy mode.&#xD;&#xA;  (Energy mode shown with EM symbol.)&#xD;&#xA;&#xD;&#xA;Notice that the application does not allow core clock frequency below&#xD;&#xA;appr 8kHz, in order to not become too unresponsive. Thus, changing from a&#xD;&#xA;higher frequency to a lower frequency oscillator/band, may cause divisor&#xD;&#xA;to auto-adjust.&#xD;&#xA;&#xD;&#xA;If the Gecko symbol is lit, it indicates that debug mode is active, and&#xD;&#xA;that energy modes will not behave as normal. Reset and run without the&#xD;&#xA;debugger when trying different energy modes.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32-G8xx-DK Development Kit&#xD;&#xA;Device: EFM32G890F128 w/LCD only&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko Development Kit (G890)"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32_Gxxx_DK/examples/clocks/SimplicityStudio/DKXXX_clocksG890.slsproj,../hardware/kit/EFM32_Gxxx_DK/examples/clocks/arm/clocksG890.uvprojx,../hardware/kit/EFM32_Gxxx_DK/examples/clocks/iar/clocks.eww"/>
    <properties key="core.boardCompatibility" value="brd3300a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="src/clocks.c"/>
  </descriptors>
  <descriptors label="DKXXX_eepromG890" description="&lt;h1&gt;&lt;b&gt;I2C Access to EEPROM example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS and emlib including DVK BSP&#xD;&#xA;(board support package) and demonstrates the use of the I2C bus accessing&#xD;&#xA;the EEPROM on the DVK.&#xD;&#xA;&#xD;&#xA;The first 3 bytes of the EEPROM is displayed on the LCD screen (This will&#xD;&#xA;normally be FFFFFF first time.) Since stored in EEPROM, the data survives&#xD;&#xA;resets and power cycles.&#xD;&#xA;&#xD;&#xA;The following usage is possible:&#xD;&#xA;&#xD;&#xA;- Joystick up/down will increment/decrement the first byte (Byte0) in the&#xD;&#xA;  EEPROM. Byte1 is then set to Byte0+1, and Byte2 is set to Byte1+1.&#xD;&#xA;- Press SW4 button to reset 3 first bytes to 0xFF.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32-G8xx-DK Development Kit&#xD;&#xA;Device: EFM32G890F128 w/LCD only&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko Development Kit (G890)"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32_Gxxx_DK/examples/eeprom/SimplicityStudio/DKXXX_eepromG890.slsproj,../hardware/kit/EFM32_Gxxx_DK/examples/eeprom/arm/eepromG890.uvprojx,../hardware/kit/EFM32_Gxxx_DK/examples/eeprom/iar/eeprom.eww"/>
    <properties key="core.boardCompatibility" value="brd3300a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="src/eepromtest.c"/>
  </descriptors>
  <descriptors label="DKXXX_emlcdG890" description="&lt;h1&gt;&lt;b&gt;Energy Modes with LCD updates.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS and demonstrates  the use of&#xD;&#xA;the LCD controller, RTC (real time counter), GPIO and various Energy &#xD;&#xA;Modes (EM).&#xD;&#xA;&#xD;&#xA;EM2 is used for delays in between refreshing the LCD display, and a lot&#xD;&#xA;of &quot;eye candy&quot; are present to show off the MCU module's LCD display.&#xD;&#xA;&#xD;&#xA;The LCD controller drives the display down to EM2. In the demo, EM2 is&#xD;&#xA;used for &quot;most&quot; delays to show off this feature. The user can press &#xD;&#xA;joystick up or down to activate EM3 and EM4. EM4 requires a system reset,&#xD;&#xA;while pushing joystick again will wake up the system from Energy Mode 3.&#xD;&#xA;Note that the upper right corner of the kit must show &quot;Keys: EFM&quot; for the&#xD;&#xA;joystick presses to work. Pressing joystick up and down will not go into&#xD;&#xA;EM3 or EM4 immediately, but after going through EM0-EM2 first.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32-Gxxx-DK Development Kit&#xD;&#xA;Device: EFM32G890F128 with LCD _ONLY_&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko Development Kit (G890)"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32_Gxxx_DK/examples/emlcd/SimplicityStudio/DKXXX_emlcdG890.slsproj,../hardware/kit/EFM32_Gxxx_DK/examples/emlcd/arm/emlcdG890.uvprojx,../hardware/kit/EFM32_Gxxx_DK/examples/emlcd/iar/emlcd.eww"/>
    <properties key="core.boardCompatibility" value="brd3300a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="EMLCD/emlcd.c"/>
  </descriptors>
  <descriptors label="DKXXX_emodes" description="&lt;h1&gt;&lt;b&gt;Energy Mode example #2.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS and demonstrates  the use of&#xD;&#xA;the LCD controller, RTC (real time counter), GPIO and various Energy&#xD;&#xA;Modes (EM).&#xD;&#xA;&#xD;&#xA;A counter ticks down from 4 seconds, and the user can press the joystick&#xD;&#xA;up and down to select the various energy modes, EM0 (busy loop from&#xD;&#xA;flash), EM1, EM2, EM3, EM4, EM2+RTC and EM2+RTC+LCD. Remember to press&#xD;&#xA;the AEM key to give the EFM32 access to the joystick.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32-Gxxx-DK Development Kit&#xD;&#xA;Device: EFM32G890F128 with LCD _ONLY_&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko Development Kit (G890)"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32_Gxxx_DK/examples/emode/SimplicityStudio/DKXXX_emodes.slsproj,../hardware/kit/EFM32_Gxxx_DK/examples/emode/arm/emodes.uvprojx,../hardware/kit/EFM32_Gxxx_DK/examples/emode/iar/emodes.eww"/>
    <properties key="core.boardCompatibility" value="brd3300a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="Main/emode.c"/>
  </descriptors>
  <descriptors label="DKXXX_freertos_blink" description="&lt;h1&gt;&lt;b&gt;FreeRTOS - Blink example&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the FreeRTOS, and gives a basic demonstration of using two tasks to blink the LEDs on the board. &#xD;&#xA;It also shows how to use idle mode with different energy saving modes ( from EM1 to EM2 - configured in FreeRTOSConfig.h file).&#xD;&#xA;This example is intended as a skeleton for new projects using FreeRTOS.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32-Gxxx-DK Development Kit&#xD;&#xA;Device: EFM32G290F128 and EFM32G890F128&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko Development Kit (G890)"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32_Gxxx_DK/examples/freertos_blink/SimplicityStudio/DKXXX_freertos_blink.slsproj,../hardware/kit/EFM32_Gxxx_DK/examples/freertos_blink/arm/freertos_blink.uvprojx,../hardware/kit/EFM32_Gxxx_DK/examples/freertos_blink/iar/freertos_blink.eww"/>
    <properties key="core.boardCompatibility" value="brd3300a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="DKXXX_freertos_tickless" description="&lt;h1&gt;&lt;b&gt;FreeRTOS - Tickless example&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the FreeRTOS, and gives a basic demonstration of using two tasks,&#xD;&#xA;one sender generating number and one receiver that displays the number on the LCD. The FreeRTOS is &#xD;&#xA;configured in tickless mode, going into EM2 when no tasks are active.&#xD;&#xA;&#xD;&#xA;EM3 mode cannot be used in this example because the LCD driver and timer are not available in EM3.&#xD;&#xA;For more details, see the configuraiton in FreeRTOSConfig.h file.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32-Gxxx-DK Development Kit&#xD;&#xA;Device: EFM32G290F128 and EFM32G890F128&lt;/pre&gt;">
    <properties key="template.category" value="Gecko Development Kit (G890)"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32_Gxxx_DK/examples/freertos_tickless/SimplicityStudio/DKXXX_freertos_tickless.slsproj,../hardware/kit/EFM32_Gxxx_DK/examples/freertos_tickless/arm/freertos_tickless.uvprojx,../hardware/kit/EFM32_Gxxx_DK/examples/freertos_tickless/iar/freertos_tickless.eww"/>
    <properties key="core.boardCompatibility" value="brd3300a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="DKXXX_iec60335G290" description="&lt;h1&gt;&lt;b&gt;IEC60335 Class B selftest library example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project shows how to use the IEC60335 Class B selftest library.&#xD;&#xA;Use a debugger and step through the code in main() to study the behaviour&#xD;&#xA;of the selftest library.&#xD;&#xA;Refer to the documentation within the library (in the &quot;reptile&quot; folder) for&#xD;&#xA;a more detailed description of the functionality provided by the selftest library.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32-Gxxx-DK Development Kit&#xD;&#xA;Device: EFM32G290F128 and EFM32G890F128&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko Development Kit (G290)"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32_Gxxx_DK/examples/iec60335/arm/iec60335G290.uvprojx,../hardware/kit/EFM32_Gxxx_DK/examples/iec60335/arm/iec60335G890.uvprojx,../hardware/kit/EFM32_Gxxx_DK/examples/iec60335/iar/iec60335.eww"/>
    <properties key="core.boardCompatibility" value="brd3300b"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g290f128"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="DKXXX_iec60335G890" description="&lt;h1&gt;&lt;b&gt;IEC60335 Class B selftest library example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project shows how to use the IEC60335 Class B selftest library.&#xD;&#xA;Use a debugger and step through the code in main() to study the behaviour&#xD;&#xA;of the selftest library.&#xD;&#xA;Refer to the documentation within the library (in the &quot;reptile&quot; folder) for&#xD;&#xA;a more detailed description of the functionality provided by the selftest library.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32-Gxxx-DK Development Kit&#xD;&#xA;Device: EFM32G290F128 and EFM32G890F128&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko Development Kit (G890)"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32_Gxxx_DK/examples/iec60335/arm/iec60335G290.uvprojx,../hardware/kit/EFM32_Gxxx_DK/examples/iec60335/arm/iec60335G890.uvprojx,../hardware/kit/EFM32_Gxxx_DK/examples/iec60335/iar/iec60335.eww"/>
    <properties key="core.boardCompatibility" value="brd3300a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="DKXXX_inttempG890" description="&lt;h1&gt;&lt;b&gt;Internal temperature sensor example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS and emlib including DVK BSP&#xD;&#xA;(board support package) and demonstrates the use of the internal&#xD;&#xA;temperature sensor and ADC on the EFM32.&#xD;&#xA;&#xD;&#xA;Note: EFM32 devices with production ID lower than 18 may measure inaccurate&#xD;&#xA;temperatures due to a sensor calibration bug.&#xD;&#xA;&#xD;&#xA;The following configuration is possible:&#xD;&#xA;&#xD;&#xA;- Joystick push toggles between Fahrenheit and Celsius display mode.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32-G8xx-DK Development Kit&#xD;&#xA;Device: EFM32G890F128 w/LCD only&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko Development Kit (G890)"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32_Gxxx_DK/examples/inttemp/SimplicityStudio/DKXXX_inttempG890.slsproj,../hardware/kit/EFM32_Gxxx_DK/examples/inttemp/arm/inttempG890.uvprojx,../hardware/kit/EFM32_Gxxx_DK/examples/inttemp/iar/inttemp.eww"/>
    <properties key="core.boardCompatibility" value="brd3300a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="src/inttemp.c"/>
  </descriptors>
  <descriptors label="DKXXX_JoystickG890" description="&lt;h1&gt;&lt;b&gt;Joystick control example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS including DVK BSP (board&#xD;&#xA;support package) and demonstrates the use of the BSP for accessing&#xD;&#xA;joystick movement.&#xD;&#xA;&#xD;&#xA;It sets up access to DVK registers, enables an interrupt to register&#xD;&#xA;joystick movement which are indicated on the user leds.&#xD;&#xA;&#xD;&#xA;Note! To enable the EFM32 to read the joystick and push buttons, the&#xD;&#xA;AEM button on the kit must be pressed to indicate &quot;Keys: EFM32&quot; in the&#xD;&#xA;upper right corner of the TFT-LCD.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32-Gxxx-DK Development Kit&#xD;&#xA;Device: EFM32G290F128 and EFM32G890F128&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko Development Kit (G890)"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32_Gxxx_DK/examples/joystick/SimplicityStudio/DKXXX_JoystickG290.slsproj,../hardware/kit/EFM32_Gxxx_DK/examples/joystick/SimplicityStudio/DKXXX_JoystickG890.slsproj,../hardware/kit/EFM32_Gxxx_DK/examples/joystick/arm/JoystickG290.uvprojx,../hardware/kit/EFM32_Gxxx_DK/examples/joystick/arm/JoystickG890.uvprojx,../hardware/kit/EFM32_Gxxx_DK/examples/joystick/iar/joystick.eww"/>
    <properties key="core.boardCompatibility" value="brd3300a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="src/joystick.c"/>
  </descriptors>
  <descriptors label="DKXXX_JoystickG290" description="&lt;h1&gt;&lt;b&gt;Joystick control example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS including DVK BSP (board&#xD;&#xA;support package) and demonstrates the use of the BSP for accessing&#xD;&#xA;joystick movement.&#xD;&#xA;&#xD;&#xA;It sets up access to DVK registers, enables an interrupt to register&#xD;&#xA;joystick movement which are indicated on the user leds.&#xD;&#xA;&#xD;&#xA;Note! To enable the EFM32 to read the joystick and push buttons, the&#xD;&#xA;AEM button on the kit must be pressed to indicate &quot;Keys: EFM32&quot; in the&#xD;&#xA;upper right corner of the TFT-LCD.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32-Gxxx-DK Development Kit&#xD;&#xA;Device: EFM32G290F128 and EFM32G890F128&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko Development Kit (G290)"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32_Gxxx_DK/examples/joystick/SimplicityStudio/DKXXX_JoystickG290.slsproj,../hardware/kit/EFM32_Gxxx_DK/examples/joystick/SimplicityStudio/DKXXX_JoystickG890.slsproj,../hardware/kit/EFM32_Gxxx_DK/examples/joystick/arm/JoystickG290.uvprojx,../hardware/kit/EFM32_Gxxx_DK/examples/joystick/arm/JoystickG890.uvprojx,../hardware/kit/EFM32_Gxxx_DK/examples/joystick/iar/joystick.eww"/>
    <properties key="core.boardCompatibility" value="brd3300b"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g290f128"/>
    <properties key="template.initiallyOpenedResource" value="src/joystick.c"/>
  </descriptors>
  <descriptors label="DKXXX_LcdG890" description="&lt;h1&gt;&lt;b&gt;Segment-LCD example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS and demonstrates the use of the&#xD;&#xA;LCD controller. &#xD;&#xA;&#xD;&#xA;Systick is used for delays, and the device stays in Energy Mode 0 for the&#xD;&#xA;whole application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32-Gxxx-DK Development Kit&#xD;&#xA;Device: EFM32G890F128 with LCD _ONLY_&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko Development Kit (G890)"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32_Gxxx_DK/examples/lcd/SimplicityStudio/DKXXX_LcdG890.slsproj,../hardware/kit/EFM32_Gxxx_DK/examples/lcd/arm/LcdG890.uvprojx,../hardware/kit/EFM32_Gxxx_DK/examples/lcd/iar/lcd.eww"/>
    <properties key="core.boardCompatibility" value="brd3300a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="emlib/lcd.c"/>
  </descriptors>
  <descriptors label="DKXXX_lightsensorG890" description="&lt;h1&gt;&lt;b&gt;Lightsensor example, using ADC.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS including DVK BSP (board&#xD;&#xA;support package) and demonstrates the use of the ADC/light sensor in&#xD;&#xA;polled mode.&#xD;&#xA;&#xD;&#xA;LEDs indicate amount of light sensed.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32-Gxxx-DK Development Kit&#xD;&#xA;Device: EFM32G290F128 and EFM32G890F128&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko Development Kit (G890)"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32_Gxxx_DK/examples/lightsensor/SimplicityStudio/DKXXX_lightsensorG290.slsproj,../hardware/kit/EFM32_Gxxx_DK/examples/lightsensor/SimplicityStudio/DKXXX_lightsensorG890.slsproj,../hardware/kit/EFM32_Gxxx_DK/examples/lightsensor/arm/lightsensorG290.uvprojx,../hardware/kit/EFM32_Gxxx_DK/examples/lightsensor/arm/lightsensorG890.uvprojx,../hardware/kit/EFM32_Gxxx_DK/examples/lightsensor/iar/lightsensor.eww"/>
    <properties key="core.boardCompatibility" value="brd3300a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="src/lightsensor.c"/>
  </descriptors>
  <descriptors label="DKXXX_lightsensorG290" description="&lt;h1&gt;&lt;b&gt;Lightsensor example, using ADC.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS including DVK BSP (board&#xD;&#xA;support package) and demonstrates the use of the ADC/light sensor in&#xD;&#xA;polled mode.&#xD;&#xA;&#xD;&#xA;LEDs indicate amount of light sensed.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32-Gxxx-DK Development Kit&#xD;&#xA;Device: EFM32G290F128 and EFM32G890F128&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko Development Kit (G290)"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32_Gxxx_DK/examples/lightsensor/SimplicityStudio/DKXXX_lightsensorG290.slsproj,../hardware/kit/EFM32_Gxxx_DK/examples/lightsensor/SimplicityStudio/DKXXX_lightsensorG890.slsproj,../hardware/kit/EFM32_Gxxx_DK/examples/lightsensor/arm/lightsensorG290.uvprojx,../hardware/kit/EFM32_Gxxx_DK/examples/lightsensor/arm/lightsensorG890.uvprojx,../hardware/kit/EFM32_Gxxx_DK/examples/lightsensor/iar/lightsensor.eww"/>
    <properties key="core.boardCompatibility" value="brd3300b"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g290f128"/>
    <properties key="template.initiallyOpenedResource" value="src/lightsensor.c"/>
  </descriptors>
  <descriptors label="DKXXX_mandelG290" description="&lt;h1&gt;&lt;b&gt;Mandelbrot image example, using TFT.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example demonstrate driving the EFM32-Gxxx-DK kit's TFT-display&#xD;&#xA;from the EFM32 Gecko.&#xD;&#xA;&#xD;&#xA;WARNING:&#xD;&#xA;SD2119 driver and GLIB graphics library are not intended for production&#xD;&#xA;purposes, and are included here to illustrate TFT display driving only.&#xD;&#xA;These components are subject to changes in API/usage and there will be&#xD;&#xA;no effort to keep compatibility, or to support this software in any way.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32-Gxxx-DK Development Kit&#xD;&#xA;Device: EFM32G290F128 and EFM32G890F128&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko Development Kit (G290)"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32_Gxxx_DK/examples/mandel/SimplicityStudio/DKXXX_mandelG290.slsproj,../hardware/kit/EFM32_Gxxx_DK/examples/mandel/SimplicityStudio/DKXXX_mandelG890.slsproj,../hardware/kit/EFM32_Gxxx_DK/examples/mandel/arm/mandelG290.uvprojx,../hardware/kit/EFM32_Gxxx_DK/examples/mandel/arm/mandelG890.uvprojx,../hardware/kit/EFM32_Gxxx_DK/examples/mandel/iar/mandel.eww"/>
    <properties key="core.boardCompatibility" value="brd3300b"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g290f128"/>
    <properties key="template.initiallyOpenedResource" value="src/mandel.c"/>
  </descriptors>
  <descriptors label="DKXXX_mandelG890" description="&lt;h1&gt;&lt;b&gt;Mandelbrot image example, using TFT.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example demonstrate driving the EFM32-Gxxx-DK kit's TFT-display&#xD;&#xA;from the EFM32 Gecko.&#xD;&#xA;&#xD;&#xA;WARNING:&#xD;&#xA;SD2119 driver and GLIB graphics library are not intended for production&#xD;&#xA;purposes, and are included here to illustrate TFT display driving only.&#xD;&#xA;These components are subject to changes in API/usage and there will be&#xD;&#xA;no effort to keep compatibility, or to support this software in any way.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32-Gxxx-DK Development Kit&#xD;&#xA;Device: EFM32G290F128 and EFM32G890F128&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko Development Kit (G890)"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32_Gxxx_DK/examples/mandel/SimplicityStudio/DKXXX_mandelG290.slsproj,../hardware/kit/EFM32_Gxxx_DK/examples/mandel/SimplicityStudio/DKXXX_mandelG890.slsproj,../hardware/kit/EFM32_Gxxx_DK/examples/mandel/arm/mandelG290.uvprojx,../hardware/kit/EFM32_Gxxx_DK/examples/mandel/arm/mandelG890.uvprojx,../hardware/kit/EFM32_Gxxx_DK/examples/mandel/iar/mandel.eww"/>
    <properties key="core.boardCompatibility" value="brd3300a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="src/mandel.c"/>
  </descriptors>
  <descriptors label="DKXXX_mpuG890" description="&lt;h1&gt;&lt;b&gt;Cortex-M3 Memory Protection Unit example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS including DVK BSP (board&#xD;&#xA;support package).&#xD;&#xA;&#xD;&#xA;It sets up the MPU to demonstrate usage of MPU to catch memory access &#xD;&#xA;violations. Serial port b (LEUART1) is used to create and report on &#xD;&#xA;access violations.&#xD;&#xA;&#xD;&#xA;Connect a terminal emulator on serial port b with configuration&#xD;&#xA;9600-8-N-1 to run the example.&#xD;&#xA;&#xD;&#xA;The example also use Energy Mode 2 (EM2).&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32-Gxxx-DK Development Kit&#xD;&#xA;Device: EFM32G290F128 and EFM32G890F128&#xD;&#xA;&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko Development Kit (G890)"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32_Gxxx_DK/examples/mpu/SimplicityStudio/DKXXX_mpuG290.slsproj,../hardware/kit/EFM32_Gxxx_DK/examples/mpu/SimplicityStudio/DKXXX_mpuG890.slsproj,../hardware/kit/EFM32_Gxxx_DK/examples/mpu/arm/mpuG290.uvprojx,../hardware/kit/EFM32_Gxxx_DK/examples/mpu/arm/mpuG890.uvprojx,../hardware/kit/EFM32_Gxxx_DK/examples/mpu/iar/mpu.eww"/>
    <properties key="core.boardCompatibility" value="brd3300a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="src/mpu.c"/>
  </descriptors>
  <descriptors label="DKXXX_mpuG290" description="&lt;h1&gt;&lt;b&gt;Cortex-M3 Memory Protection Unit example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS including DVK BSP (board&#xD;&#xA;support package).&#xD;&#xA;&#xD;&#xA;It sets up the MPU to demonstrate usage of MPU to catch memory access &#xD;&#xA;violations. Serial port b (LEUART1) is used to create and report on &#xD;&#xA;access violations.&#xD;&#xA;&#xD;&#xA;Connect a terminal emulator on serial port b with configuration&#xD;&#xA;9600-8-N-1 to run the example.&#xD;&#xA;&#xD;&#xA;The example also use Energy Mode 2 (EM2).&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32-Gxxx-DK Development Kit&#xD;&#xA;Device: EFM32G290F128 and EFM32G890F128&#xD;&#xA;&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko Development Kit (G290)"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32_Gxxx_DK/examples/mpu/SimplicityStudio/DKXXX_mpuG290.slsproj,../hardware/kit/EFM32_Gxxx_DK/examples/mpu/SimplicityStudio/DKXXX_mpuG890.slsproj,../hardware/kit/EFM32_Gxxx_DK/examples/mpu/arm/mpuG290.uvprojx,../hardware/kit/EFM32_Gxxx_DK/examples/mpu/arm/mpuG890.uvprojx,../hardware/kit/EFM32_Gxxx_DK/examples/mpu/iar/mpu.eww"/>
    <properties key="core.boardCompatibility" value="brd3300b"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g290f128"/>
    <properties key="template.initiallyOpenedResource" value="src/mpu.c"/>
  </descriptors>
  <descriptors label="DKXXX_periphG890" description="&lt;h1&gt;&lt;b&gt;DVK peripheral switch control.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS including DVK BSP (board&#xD;&#xA;support package).&#xD;&#xA;&#xD;&#xA;It sets up access to DVK registers, and toggles access/switches to &#xD;&#xA;various peripheral devices on the DVK. Each enabled DVK will have a &#xD;&#xA;corresponding orange LED lit up.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32-Gxxx-DK Development Kit&#xD;&#xA;Device: EFM32G290F128 and EFM32G890F128&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko Development Kit (G890)"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32_Gxxx_DK/examples/peripherals/SimplicityStudio/DKXXX_periphG290.slsproj,../hardware/kit/EFM32_Gxxx_DK/examples/peripherals/SimplicityStudio/DKXXX_periphG890.slsproj,../hardware/kit/EFM32_Gxxx_DK/examples/peripherals/arm/periphG290.uvprojx,../hardware/kit/EFM32_Gxxx_DK/examples/peripherals/arm/periphG890.uvprojx,../hardware/kit/EFM32_Gxxx_DK/examples/peripherals/iar/periph.eww"/>
    <properties key="core.boardCompatibility" value="brd3300a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="src/periph.c"/>
  </descriptors>
  <descriptors label="DKXXX_periphG290" description="&lt;h1&gt;&lt;b&gt;DVK peripheral switch control.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS including DVK BSP (board&#xD;&#xA;support package).&#xD;&#xA;&#xD;&#xA;It sets up access to DVK registers, and toggles access/switches to &#xD;&#xA;various peripheral devices on the DVK. Each enabled DVK will have a &#xD;&#xA;corresponding orange LED lit up.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32-Gxxx-DK Development Kit&#xD;&#xA;Device: EFM32G290F128 and EFM32G890F128&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko Development Kit (G290)"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32_Gxxx_DK/examples/peripherals/SimplicityStudio/DKXXX_periphG290.slsproj,../hardware/kit/EFM32_Gxxx_DK/examples/peripherals/SimplicityStudio/DKXXX_periphG890.slsproj,../hardware/kit/EFM32_Gxxx_DK/examples/peripherals/arm/periphG290.uvprojx,../hardware/kit/EFM32_Gxxx_DK/examples/peripherals/arm/periphG890.uvprojx,../hardware/kit/EFM32_Gxxx_DK/examples/peripherals/iar/periph.eww"/>
    <properties key="core.boardCompatibility" value="brd3300b"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g290f128"/>
    <properties key="template.initiallyOpenedResource" value="src/periph.c"/>
  </descriptors>
  <descriptors label="DKXXX_potentiometerG890" description="&lt;h1&gt;&lt;b&gt;Potentiometer control example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS including DVK BSP (board&#xD;&#xA;support package) and demonstrates the use of the ADC/potentiometer in &#xD;&#xA;polled mode.&#xD;&#xA;&#xD;&#xA;The user LEDs are used to indicate the setting of the potentiometer.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32-Gxxx-DK Development Kit&#xD;&#xA;Device: EFM32G290F128 and EFM32G890F128&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko Development Kit (G890)"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32_Gxxx_DK/examples/potentiometer/SimplicityStudio/DKXXX_potentiometerG290.slsproj,../hardware/kit/EFM32_Gxxx_DK/examples/potentiometer/SimplicityStudio/DKXXX_potentiometerG890.slsproj,../hardware/kit/EFM32_Gxxx_DK/examples/potentiometer/arm/potentiometerG290.uvprojx,../hardware/kit/EFM32_Gxxx_DK/examples/potentiometer/arm/potentiometerG890.uvprojx,../hardware/kit/EFM32_Gxxx_DK/examples/potentiometer/iar/potentiometer.eww"/>
    <properties key="core.boardCompatibility" value="brd3300a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="src/potentiometer.c"/>
  </descriptors>
  <descriptors label="DKXXX_potentiometerG290" description="&lt;h1&gt;&lt;b&gt;Potentiometer control example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS including DVK BSP (board&#xD;&#xA;support package) and demonstrates the use of the ADC/potentiometer in &#xD;&#xA;polled mode.&#xD;&#xA;&#xD;&#xA;The user LEDs are used to indicate the setting of the potentiometer.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32-Gxxx-DK Development Kit&#xD;&#xA;Device: EFM32G290F128 and EFM32G890F128&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko Development Kit (G290)"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32_Gxxx_DK/examples/potentiometer/SimplicityStudio/DKXXX_potentiometerG290.slsproj,../hardware/kit/EFM32_Gxxx_DK/examples/potentiometer/SimplicityStudio/DKXXX_potentiometerG890.slsproj,../hardware/kit/EFM32_Gxxx_DK/examples/potentiometer/arm/potentiometerG290.uvprojx,../hardware/kit/EFM32_Gxxx_DK/examples/potentiometer/arm/potentiometerG890.uvprojx,../hardware/kit/EFM32_Gxxx_DK/examples/potentiometer/iar/potentiometer.eww"/>
    <properties key="core.boardCompatibility" value="brd3300b"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g290f128"/>
    <properties key="template.initiallyOpenedResource" value="src/potentiometer.c"/>
  </descriptors>
  <descriptors label="DKXXX_powertestG890" description="&lt;h1&gt;&lt;b&gt;Power test example, running demonstration of energy modes.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use EFM32 CMSIS and the emlib peripheral library&#xD;&#xA;to demonstrate the use of the various Energy Modes available on the&#xD;&#xA;EFM32 Gecko devices. When running this example, the EnergyAware Profiler tool&#xD;&#xA;in Simplicity Studio can be used to show the power consumption of each &#xD;&#xA;energy mode.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32_Gxxx_DK Development Kit&#xD;&#xA;Device: EFM32G890F128 or EFM32G290F128&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko Development Kit (G890)"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32_Gxxx_DK/examples/powertest/SimplicityStudio/DKXXX_powertestG290.slsproj,../hardware/kit/EFM32_Gxxx_DK/examples/powertest/SimplicityStudio/DKXXX_powertestG890.slsproj,../hardware/kit/EFM32_Gxxx_DK/examples/powertest/arm/powertestG290.uvprojx,../hardware/kit/EFM32_Gxxx_DK/examples/powertest/arm/powertestG890.uvprojx,../hardware/kit/EFM32_Gxxx_DK/examples/powertest/iar/powertest.eww"/>
    <properties key="core.boardCompatibility" value="brd3300a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="DKXXX_powertestG290" description="&lt;h1&gt;&lt;b&gt;Power test example, running demonstration of energy modes.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use EFM32 CMSIS and the emlib peripheral library&#xD;&#xA;to demonstrate the use of the various Energy Modes available on the&#xD;&#xA;EFM32 Gecko devices. When running this example, the EnergyAware Profiler tool&#xD;&#xA;in Simplicity Studio can be used to show the power consumption of each &#xD;&#xA;energy mode.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32_Gxxx_DK Development Kit&#xD;&#xA;Device: EFM32G890F128 or EFM32G290F128&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko Development Kit (G290)"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32_Gxxx_DK/examples/powertest/SimplicityStudio/DKXXX_powertestG290.slsproj,../hardware/kit/EFM32_Gxxx_DK/examples/powertest/SimplicityStudio/DKXXX_powertestG890.slsproj,../hardware/kit/EFM32_Gxxx_DK/examples/powertest/arm/powertestG290.uvprojx,../hardware/kit/EFM32_Gxxx_DK/examples/powertest/arm/powertestG890.uvprojx,../hardware/kit/EFM32_Gxxx_DK/examples/powertest/iar/powertest.eww"/>
    <properties key="core.boardCompatibility" value="brd3300b"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g290f128"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="DKXXX_preampG890" description="&lt;h1&gt;&lt;b&gt;Pre-Amplifier example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS including DVK BSP (board&#xD;&#xA;support package) and demonstrates the use of the ADC/DAC/DMA/PRS/TIMER&#xD;&#xA;in order to implement a very simple pre-amplifier.&#xD;&#xA;&#xD;&#xA;- Connect an audio source to the audio in connector&#xD;&#xA;  on the DVK, for instance an MP3 player.&#xD;&#xA;- Connect an active loudspeaker with built-in amplifier&#xD;&#xA;  to the audio out connector on the DVK.&#xD;&#xA;&#xD;&#xA;WARNING:&#xD;&#xA;--------&#xD;&#xA;Do not attach or use headphones with this example. Use small loadspeakers&#xD;&#xA;with built in amplification, ensuring volume is at an acceptable level. &#xD;&#xA;Exposure to loud noises from any source for extended periods of time may&#xD;&#xA;temporarily or permanently affect your hearing. The louder the volume &#xD;&#xA;sound level, the less time is required before your hearing could be &#xD;&#xA;affected. Hearing damage from loud noise is sometimes undetectable at &#xD;&#xA;first and can have a cumulative effect.&#xD;&#xA;&#xD;&#xA;The input signal is converted to digital and level&#xD;&#xA;adjusted by the EFM32 core before being converted back&#xD;&#xA;to analog.&#xD;&#xA;&#xD;&#xA;The volume level is adjusted with the potentiometer, which&#xD;&#xA;is also read using the ADC. The volume level is indicated&#xD;&#xA;by the 14 rightmost user LEDs.&#xD;&#xA;&#xD;&#xA;The example will clip the output signal if exceeding predefined&#xD;&#xA;level. This may occur due to too high input signal and/or to high&#xD;&#xA;volume setting. Clipping is indicated by the leftmost user LED.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32-Gxxx-DK Development Kit&#xD;&#xA;Device: EFM32G290F128 and EFM32G890F128&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko Development Kit (G890)"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32_Gxxx_DK/examples/preamp/SimplicityStudio/DKXXX_preampG290.slsproj,../hardware/kit/EFM32_Gxxx_DK/examples/preamp/SimplicityStudio/DKXXX_preampG890.slsproj,../hardware/kit/EFM32_Gxxx_DK/examples/preamp/arm/preampG290.uvprojx,../hardware/kit/EFM32_Gxxx_DK/examples/preamp/arm/preampG890.uvprojx,../hardware/kit/EFM32_Gxxx_DK/examples/preamp/iar/preamp.eww"/>
    <properties key="core.boardCompatibility" value="brd3300a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="src/preamp.c"/>
  </descriptors>
  <descriptors label="DKXXX_preampG290" description="&lt;h1&gt;&lt;b&gt;Pre-Amplifier example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS including DVK BSP (board&#xD;&#xA;support package) and demonstrates the use of the ADC/DAC/DMA/PRS/TIMER&#xD;&#xA;in order to implement a very simple pre-amplifier.&#xD;&#xA;&#xD;&#xA;- Connect an audio source to the audio in connector&#xD;&#xA;  on the DVK, for instance an MP3 player.&#xD;&#xA;- Connect an active loudspeaker with built-in amplifier&#xD;&#xA;  to the audio out connector on the DVK.&#xD;&#xA;&#xD;&#xA;WARNING:&#xD;&#xA;--------&#xD;&#xA;Do not attach or use headphones with this example. Use small loadspeakers&#xD;&#xA;with built in amplification, ensuring volume is at an acceptable level. &#xD;&#xA;Exposure to loud noises from any source for extended periods of time may&#xD;&#xA;temporarily or permanently affect your hearing. The louder the volume &#xD;&#xA;sound level, the less time is required before your hearing could be &#xD;&#xA;affected. Hearing damage from loud noise is sometimes undetectable at &#xD;&#xA;first and can have a cumulative effect.&#xD;&#xA;&#xD;&#xA;The input signal is converted to digital and level&#xD;&#xA;adjusted by the EFM32 core before being converted back&#xD;&#xA;to analog.&#xD;&#xA;&#xD;&#xA;The volume level is adjusted with the potentiometer, which&#xD;&#xA;is also read using the ADC. The volume level is indicated&#xD;&#xA;by the 14 rightmost user LEDs.&#xD;&#xA;&#xD;&#xA;The example will clip the output signal if exceeding predefined&#xD;&#xA;level. This may occur due to too high input signal and/or to high&#xD;&#xA;volume setting. Clipping is indicated by the leftmost user LED.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32-Gxxx-DK Development Kit&#xD;&#xA;Device: EFM32G290F128 and EFM32G890F128&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko Development Kit (G290)"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32_Gxxx_DK/examples/preamp/SimplicityStudio/DKXXX_preampG290.slsproj,../hardware/kit/EFM32_Gxxx_DK/examples/preamp/SimplicityStudio/DKXXX_preampG890.slsproj,../hardware/kit/EFM32_Gxxx_DK/examples/preamp/arm/preampG290.uvprojx,../hardware/kit/EFM32_Gxxx_DK/examples/preamp/arm/preampG890.uvprojx,../hardware/kit/EFM32_Gxxx_DK/examples/preamp/iar/preamp.eww"/>
    <properties key="core.boardCompatibility" value="brd3300b"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g290f128"/>
    <properties key="template.initiallyOpenedResource" value="src/preamp.c"/>
  </descriptors>
  <descriptors label="DKXXX_rs232bG890" description="&lt;h1&gt;&lt;b&gt;LEUART output on RS232 port B.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS including DVK BSP (board&#xD;&#xA;support package).&#xD;&#xA;&#xD;&#xA;It sets up access to DVK registers, and toggles access to serial &#xD;&#xA;port b. &#xD;&#xA;&#xD;&#xA;Connecting a terminal emulator on serial port b, with configuration &#xD;&#xA;9600-8-N-1 will show a printf output and provide a &quot;local echo&quot; on typed &#xD;&#xA;characters.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32-Gxxx-DK Development Kit&#xD;&#xA;Device: EFM32G290F128 and EFM32G890F128&#xD;&#xA;&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko Development Kit (G890)"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32_Gxxx_DK/examples/rs232b/SimplicityStudio/DKXXX_rs232bG290.slsproj,../hardware/kit/EFM32_Gxxx_DK/examples/rs232b/SimplicityStudio/DKXXX_rs232bG890.slsproj,../hardware/kit/EFM32_Gxxx_DK/examples/rs232b/arm/rs232bG290.uvprojx,../hardware/kit/EFM32_Gxxx_DK/examples/rs232b/arm/rs232bG890.uvprojx,../hardware/kit/EFM32_Gxxx_DK/examples/rs232b/iar/rs232b.eww"/>
    <properties key="core.boardCompatibility" value="brd3300a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="src/rs232b.c"/>
  </descriptors>
  <descriptors label="DKXXX_rs232bG290" description="&lt;h1&gt;&lt;b&gt;LEUART output on RS232 port B.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS including DVK BSP (board&#xD;&#xA;support package).&#xD;&#xA;&#xD;&#xA;It sets up access to DVK registers, and toggles access to serial &#xD;&#xA;port b. &#xD;&#xA;&#xD;&#xA;Connecting a terminal emulator on serial port b, with configuration &#xD;&#xA;9600-8-N-1 will show a printf output and provide a &quot;local echo&quot; on typed &#xD;&#xA;characters.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32-Gxxx-DK Development Kit&#xD;&#xA;Device: EFM32G290F128 and EFM32G890F128&#xD;&#xA;&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko Development Kit (G290)"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32_Gxxx_DK/examples/rs232b/SimplicityStudio/DKXXX_rs232bG290.slsproj,../hardware/kit/EFM32_Gxxx_DK/examples/rs232b/SimplicityStudio/DKXXX_rs232bG890.slsproj,../hardware/kit/EFM32_Gxxx_DK/examples/rs232b/arm/rs232bG290.uvprojx,../hardware/kit/EFM32_Gxxx_DK/examples/rs232b/arm/rs232bG890.uvprojx,../hardware/kit/EFM32_Gxxx_DK/examples/rs232b/iar/rs232b.eww"/>
    <properties key="core.boardCompatibility" value="brd3300b"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g290f128"/>
    <properties key="template.initiallyOpenedResource" value="src/rs232b.c"/>
  </descriptors>
  <descriptors label="DKXXX_rs232aG890" description="&lt;h1&gt;&lt;b&gt;UART output on RS232 port A.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS and emlib including&#xD;&#xA;the DVK BSP (board support package) and demonstrates the use of&#xD;&#xA;USART communication on the EFM32 GK Development Kit, serial port A.&#xD;&#xA;&#xD;&#xA;USART1 is used, GPIO port C pins 0 and 1, baudrate 115200-8-N-1.&#xD;&#xA;&#xD;&#xA;It sets up access to DVK registers, for use with MCU-Module's&#xD;&#xA;with and without LCD.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32-Gxxx-DK Development Kit&#xD;&#xA;Device: EFM32G290F128 and EFM32G890F128&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko Development Kit (G890)"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32_Gxxx_DK/examples/rs232a/SimplicityStudio/DKXXX_rs232aG290.slsproj,../hardware/kit/EFM32_Gxxx_DK/examples/rs232a/SimplicityStudio/DKXXX_rs232aG890.slsproj,../hardware/kit/EFM32_Gxxx_DK/examples/rs232a/arm/rs232aG290.uvprojx,../hardware/kit/EFM32_Gxxx_DK/examples/rs232a/arm/rs232aG890.uvprojx,../hardware/kit/EFM32_Gxxx_DK/examples/rs232a/iar/rs232a.eww"/>
    <properties key="core.boardCompatibility" value="brd3300a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="src/rs232a.c"/>
  </descriptors>
  <descriptors label="DKXXX_rs232aG290" description="&lt;h1&gt;&lt;b&gt;UART output on RS232 port A.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS and emlib including&#xD;&#xA;the DVK BSP (board support package) and demonstrates the use of&#xD;&#xA;USART communication on the EFM32 GK Development Kit, serial port A.&#xD;&#xA;&#xD;&#xA;USART1 is used, GPIO port C pins 0 and 1, baudrate 115200-8-N-1.&#xD;&#xA;&#xD;&#xA;It sets up access to DVK registers, for use with MCU-Module's&#xD;&#xA;with and without LCD.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32-Gxxx-DK Development Kit&#xD;&#xA;Device: EFM32G290F128 and EFM32G890F128&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko Development Kit (G290)"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32_Gxxx_DK/examples/rs232a/SimplicityStudio/DKXXX_rs232aG290.slsproj,../hardware/kit/EFM32_Gxxx_DK/examples/rs232a/SimplicityStudio/DKXXX_rs232aG890.slsproj,../hardware/kit/EFM32_Gxxx_DK/examples/rs232a/arm/rs232aG290.uvprojx,../hardware/kit/EFM32_Gxxx_DK/examples/rs232a/arm/rs232aG890.uvprojx,../hardware/kit/EFM32_Gxxx_DK/examples/rs232a/iar/rs232a.eww"/>
    <properties key="core.boardCompatibility" value="brd3300b"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g290f128"/>
    <properties key="template.initiallyOpenedResource" value="src/rs232a.c"/>
  </descriptors>
  <descriptors label="DKXXX_slideshowG290" description="&lt;h1&gt;&lt;b&gt;Slideshow of BMP images from microSD card.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example uses the FatFS library for accssing a filesystem on a&#xD;&#xA;microSD card. It will loop through the files present on the card. &#xD;&#xA;BMP files with a resolution less than the resolution of the screen&#xD;&#xA;(320x240) will be displayed on the TFT. &#xD;&#xA;&#xD;&#xA;The demo has two modes of operation. If a file called &quot;files.txt&quot; is &#xD;&#xA;present on the root of the microSD card, this file will be read. The&#xD;&#xA;BMP files will then be displayed in the order they are listed in the &#xD;&#xA;file.&#xD;&#xA;&#xD;&#xA;If this file is not present, all files on the root of tile SD card is&#xD;&#xA;looped through and displayed. If the BMP decoder cannot display a &#xD;&#xA;certain file, an error message is displayed.&#xD;&#xA;&#xD;&#xA;WARNING:&#xD;&#xA;&#xD;&#xA;SD2119 driver and GLIB graphics library are not intended for production&#xD;&#xA;purposes, and are included here to illustrate TFT display driving only.&#xD;&#xA;These components are subject to changes in API/usage and there will be &#xD;&#xA;no effort to keep compatibility, or to support this software in any way.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32-G2xx-DK Development Kit&#xD;&#xA;Device: EFM32G290F128&#xD;&#xA;Board:  Silicon Labs EFM32-G8xx-DK Development Kit&#xD;&#xA;Device: EFM32G890F128&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko Development Kit (G290)"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32_Gxxx_DK/examples/slideshow/SimplicityStudio/DKXXX_slideshowG290.slsproj,../hardware/kit/EFM32_Gxxx_DK/examples/slideshow/SimplicityStudio/DKXXX_slideshowG890.slsproj,../hardware/kit/EFM32_Gxxx_DK/examples/slideshow/arm/slideshowG290.uvprojx,../hardware/kit/EFM32_Gxxx_DK/examples/slideshow/arm/slideshowG890.uvprojx,../hardware/kit/EFM32_Gxxx_DK/examples/slideshow/iar/slideshow.eww"/>
    <properties key="core.boardCompatibility" value="brd3300b"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g290f128"/>
    <properties key="template.initiallyOpenedResource" value="src/slideshow.c"/>
  </descriptors>
  <descriptors label="DKXXX_slideshowG890" description="&lt;h1&gt;&lt;b&gt;Slideshow of BMP images from microSD card.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example uses the FatFS library for accssing a filesystem on a&#xD;&#xA;microSD card. It will loop through the files present on the card. &#xD;&#xA;BMP files with a resolution less than the resolution of the screen&#xD;&#xA;(320x240) will be displayed on the TFT. &#xD;&#xA;&#xD;&#xA;The demo has two modes of operation. If a file called &quot;files.txt&quot; is &#xD;&#xA;present on the root of the microSD card, this file will be read. The&#xD;&#xA;BMP files will then be displayed in the order they are listed in the &#xD;&#xA;file.&#xD;&#xA;&#xD;&#xA;If this file is not present, all files on the root of tile SD card is&#xD;&#xA;looped through and displayed. If the BMP decoder cannot display a &#xD;&#xA;certain file, an error message is displayed.&#xD;&#xA;&#xD;&#xA;WARNING:&#xD;&#xA;&#xD;&#xA;SD2119 driver and GLIB graphics library are not intended for production&#xD;&#xA;purposes, and are included here to illustrate TFT display driving only.&#xD;&#xA;These components are subject to changes in API/usage and there will be &#xD;&#xA;no effort to keep compatibility, or to support this software in any way.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32-G2xx-DK Development Kit&#xD;&#xA;Device: EFM32G290F128&#xD;&#xA;Board:  Silicon Labs EFM32-G8xx-DK Development Kit&#xD;&#xA;Device: EFM32G890F128&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko Development Kit (G890)"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32_Gxxx_DK/examples/slideshow/SimplicityStudio/DKXXX_slideshowG290.slsproj,../hardware/kit/EFM32_Gxxx_DK/examples/slideshow/SimplicityStudio/DKXXX_slideshowG890.slsproj,../hardware/kit/EFM32_Gxxx_DK/examples/slideshow/arm/slideshowG290.uvprojx,../hardware/kit/EFM32_Gxxx_DK/examples/slideshow/arm/slideshowG890.uvprojx,../hardware/kit/EFM32_Gxxx_DK/examples/slideshow/iar/slideshow.eww"/>
    <properties key="core.boardCompatibility" value="brd3300a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="src/slideshow.c"/>
  </descriptors>
  <descriptors label="DKXXX_temperatureG890" description="&lt;h1&gt;&lt;b&gt;I2C temperature sensor example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS and emlib including DVK BSP&#xD;&#xA;(board support package) and demonstrates the use of the I2C bus accessing&#xD;&#xA;the temperature sensor on the DVK.&#xD;&#xA;&#xD;&#xA;The following configuration is possible:&#xD;&#xA;&#xD;&#xA;- Joystick push toggles between Fahrenheit and Celsius display mode.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32-G8xx-DK Development Kit&#xD;&#xA;Device: EFM32G890F128 w/LCD only&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko Development Kit (G890)"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32_Gxxx_DK/examples/temperature/SimplicityStudio/DKXXX_temperatureG890.slsproj,../hardware/kit/EFM32_Gxxx_DK/examples/temperature/arm/temperatureG890.uvprojx,../hardware/kit/EFM32_Gxxx_DK/examples/temperature/iar/temperature.eww"/>
    <properties key="core.boardCompatibility" value="brd3300a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="src/temperature.c"/>
  </descriptors>
  <descriptors label="DKXXX_tftG290" description="&lt;h1&gt;&lt;b&gt;TFT-LCD graphics demo.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS including the DVK BSP (board&#xD;&#xA;support package) and demonstrates driving the DVK kit TFT-display from &#xD;&#xA;the EFM32.&#xD;&#xA;&#xD;&#xA;The G290 variant of this project uses EBI to drive the display controller&#xD;&#xA;through a direct memory mapped interface.&#xD;&#xA;&#xD;&#xA;The G890 variant of this project uses USART SPI to drive the display &#xD;&#xA;controller. This greatly reduces update speed compared to the EBI &#xD;&#xA;variant.&#xD;&#xA;&#xD;&#xA;WARNING:&#xD;&#xA;&#xD;&#xA;SD2119 driver and GLIB graphics library are not intended for production &#xD;&#xA;purposes, and are included here to illustrate TFT display driving only.&#xD;&#xA;These components are subject to changes in API/usage and there will be &#xD;&#xA;no effort to keep compatibility, or to support this software in any way.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32-G2xx-DK Development Kit&#xD;&#xA;Device: EFM32G290F128&#xD;&#xA;Board:  Silicon Labs EFM32-G8xx-DK Development Kit&#xD;&#xA;Device: EFM32G890F128&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko Development Kit (G290)"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32_Gxxx_DK/examples/tft/SimplicityStudio/DKXXX_tftG290.slsproj,../hardware/kit/EFM32_Gxxx_DK/examples/tft/SimplicityStudio/DKXXX_tftG890.slsproj,../hardware/kit/EFM32_Gxxx_DK/examples/tft/arm/tftG290.uvprojx,../hardware/kit/EFM32_Gxxx_DK/examples/tft/arm/tftG890.uvprojx,../hardware/kit/EFM32_Gxxx_DK/examples/tft/iar/tft.eww"/>
    <properties key="core.boardCompatibility" value="brd3300b"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g290f128"/>
    <properties key="template.initiallyOpenedResource" value="src/tft.c"/>
  </descriptors>
  <descriptors label="DKXXX_tftG890" description="&lt;h1&gt;&lt;b&gt;TFT-LCD graphics demo.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS including the DVK BSP (board&#xD;&#xA;support package) and demonstrates driving the DVK kit TFT-display from &#xD;&#xA;the EFM32.&#xD;&#xA;&#xD;&#xA;The G290 variant of this project uses EBI to drive the display controller&#xD;&#xA;through a direct memory mapped interface.&#xD;&#xA;&#xD;&#xA;The G890 variant of this project uses USART SPI to drive the display &#xD;&#xA;controller. This greatly reduces update speed compared to the EBI &#xD;&#xA;variant.&#xD;&#xA;&#xD;&#xA;WARNING:&#xD;&#xA;&#xD;&#xA;SD2119 driver and GLIB graphics library are not intended for production &#xD;&#xA;purposes, and are included here to illustrate TFT display driving only.&#xD;&#xA;These components are subject to changes in API/usage and there will be &#xD;&#xA;no effort to keep compatibility, or to support this software in any way.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32-G2xx-DK Development Kit&#xD;&#xA;Device: EFM32G290F128&#xD;&#xA;Board:  Silicon Labs EFM32-G8xx-DK Development Kit&#xD;&#xA;Device: EFM32G890F128&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko Development Kit (G890)"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32_Gxxx_DK/examples/tft/SimplicityStudio/DKXXX_tftG290.slsproj,../hardware/kit/EFM32_Gxxx_DK/examples/tft/SimplicityStudio/DKXXX_tftG890.slsproj,../hardware/kit/EFM32_Gxxx_DK/examples/tft/arm/tftG290.uvprojx,../hardware/kit/EFM32_Gxxx_DK/examples/tft/arm/tftG890.uvprojx,../hardware/kit/EFM32_Gxxx_DK/examples/tft/iar/tft.eww"/>
    <properties key="core.boardCompatibility" value="brd3300a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="src/tft.c"/>
  </descriptors>
  <descriptors label="DKXXX_tftemodeG290" description="&lt;h1&gt;&lt;b&gt;TFT-LCD enabled energy mode demo.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS libraries and demonstrates  the &#xD;&#xA;use of the EBI controller, RTC (real time counter), GPIO and various Energy &#xD;&#xA;Modes (EM).&#xD;&#xA;&#xD;&#xA;First press the kits AEM button to give display control to the EFM32. Then&#xD;&#xA;use joystick up and down to select the wanted energy mode demo. Press PB1&#xD;&#xA;to activate the demo. Press the AEM-button to go back to the board control&#xD;&#xA;screen to view the AEM current display.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32-G2xx-DK Development Kit&#xD;&#xA;Device: EFM32G290F128 without LCD (with EBI)  _ONLY_&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko Development Kit (G290)"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32_Gxxx_DK/examples/tftemode/SimplicityStudio/DKXXX_tftemodeG290.slsproj,../hardware/kit/EFM32_Gxxx_DK/examples/tftemode/arm/tftemodeG290.uvprojx,../hardware/kit/EFM32_Gxxx_DK/examples/tftemode/iar/tftemode.eww"/>
    <properties key="core.boardCompatibility" value="brd3300b"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g290f128"/>
    <properties key="template.initiallyOpenedResource" value="src/tftemode.c"/>
  </descriptors>
  <descriptors label="DKXXX_ucos2" description="&lt;h1&gt;&lt;b&gt;uC/OS-II RTOS on EFM32 using example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This is a port of the uC/OS-II RTOS from Micrium Inc, http://www.micrium.com&#xD;&#xA;&#xD;&#xA;The port has been adapted by Silicon Labs for use with our Development&#xD;&#xA;Kit. It requires the standard EFM32 CMSIS package (including emlib).&#xD;&#xA;&#xD;&#xA;The example has three tasks:&#xD;&#xA; - Task1: LED blink task&#xD;&#xA; - Task2: Receives characters from serial port and posts message to Task3&#xD;&#xA; - Task3: Receives message from Task2 and writes it on LCD and serial port&#xD;&#xA;&#xD;&#xA;Serial port can be chosen between:&#xD;&#xA;USART1 - location 1 is used, GPIO port D pins 0 and 1, baudrate 115200-8-N-1.&#xD;&#xA;LEUART0 - location 0 is used, GPIO port D pins 4 and 5, baudrate 9600-8-N-1.&#xD;&#xA;&#xD;&#xA;uC/OS-II is provided in source form for FREE evaluation, for educational use&#xD;&#xA;or for peaceful research.&#xD;&#xA;&#xD;&#xA;If you plan on using uC/OS-II in a commercial product you need to contact&#xD;&#xA;Micrium to properly license its use in your product. We provide ALL the&#xD;&#xA;source code for your convenience and to help you experience uC/OS-II.&#xD;&#xA;The fact that the source is provided does NOT mean that you can use it without&#xD;&#xA;paying a licensing fee.&#xD;&#xA;&#xD;&#xA;For commercial use, contact Micrium, http://www.micrium.com for details.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32-Gxxx-DK Development Kit&#xD;&#xA;Device: EFM32G890F128&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko Development Kit (G890)"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32_Gxxx_DK/examples/ucos2_port/arm/ucos2.uvprojx,../hardware/kit/EFM32_Gxxx_DK/examples/ucos2_port/iar/ucos2.eww"/>
    <properties key="core.boardCompatibility" value="brd3300a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="src/app/app.c"/>
  </descriptors>
  <descriptors label="DKXXX_ucos3" description="&lt;h1&gt;&lt;b&gt;uC/OS-III RTOS on EFM32 using example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This is a port of the uC/OS-III RTOS from Micrium Inc, http://www.micrium.com&#xD;&#xA;&#xD;&#xA;The port has been adapted by Silicon Labs for use with our Development Kit..&#xD;&#xA;It requires the standard EFM32 CMSIS package (including emlib).&#xD;&#xA;&#xD;&#xA;The example has three tasks:&#xD;&#xA; - Task1: LED blink task&#xD;&#xA; - Task2: Receives characters from serial port and posts message to Task3&#xD;&#xA; - Task3: Receives message from Task2 and writes it on LCD and serial port&#xD;&#xA;&#xD;&#xA;Serial port can be chosen between:&#xD;&#xA;USART1 - location 1 is used, GPIO port D pins 0 and 1, baudrate 115200-8-N-1.&#xD;&#xA;LEUART0 - location 0 is used, GPIO port D pins 4 and 5, baudrate 9600-8-N-1.&#xD;&#xA;&#xD;&#xA;uC/OS-III is provided in source form for FREE evaluation, for educational use&#xD;&#xA;or for peaceful research.&#xD;&#xA;&#xD;&#xA;If you plan on using uC/OS-III in a commercial product you need to contact&#xD;&#xA;Micrium to properly license its use in your product. We provide ALL the&#xD;&#xA;source code for your convenience and to help you experience uC/OS-III.&#xD;&#xA;The fact that the source is provided does NOT mean that you can use it without&#xD;&#xA;paying a licensing fee.&#xD;&#xA;&#xD;&#xA;For commercial use, contact Micrium, http://www.micrium.com for details.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32-Gxxx-DK Development Kit&#xD;&#xA;Device: EFM32G890F128&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko Development Kit (G890)"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32_Gxxx_DK/examples/ucos3_port/arm/ucos3.uvprojx,../hardware/kit/EFM32_Gxxx_DK/examples/ucos3_port/iar/ucos3.eww"/>
    <properties key="core.boardCompatibility" value="brd3300a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="src/app/app.c"/>
  </descriptors>
  <descriptors label="DKXXX_wavplayer" description="&lt;h1&gt;&lt;b&gt;Audio WAV-player from microSD card.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS including DVK BSP (board support &#xD;&#xA;package) and demonstrates how to play a wav file from the SD-card.&#xD;&#xA;&#xD;&#xA;The wav file must be named &quot;sweet1.wav&quot; and must be encoded with 16-bit&#xD;&#xA;PCM audio sampling.&#xD;&#xA;&#xD;&#xA;It sets up access to DVK registers, and supports fat-filesystem&#xD;&#xA;on the sd-card.&#xD;&#xA;&#xD;&#xA;Note! On some versions of the Development Kit, you need to remove the prototype &#xD;&#xA;board for this example to work correctly.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32-Gxxx-DK Development Kit&#xD;&#xA;Device: EFM32G290F128 and EFM32G890F128&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko Development Kit (G890)"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32_Gxxx_DK/examples/wav_player/SimplicityStudio/DKXXX_wavplayer.slsproj,../hardware/kit/EFM32_Gxxx_DK/examples/wav_player/arm/wavplayer.uvprojx,../hardware/kit/EFM32_Gxxx_DK/examples/wav_player/iar/wavplayer.eww"/>
    <properties key="core.boardCompatibility" value="brd3300a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="src/wavplayer.c"/>
  </descriptors>
  <descriptors label="STKXXX_blink" description="&lt;h1&gt;&lt;b&gt;Blink example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS and demonstrates  the use of &#xD;&#xA;the LEDs on the board. This example is intended as a skeleton for new &#xD;&#xA;projects.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32-Gxxx-STK Development Kit&#xD;&#xA;Device: EFM32G890F128&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32_Gxxx_STK/examples/blink/SimplicityStudio/STKXXX_blink.slsproj,../hardware/kit/EFM32_Gxxx_STK/examples/blink/arm/blink.uvprojx,../hardware/kit/EFM32_Gxxx_STK/examples/blink/iar/blink.eww"/>
    <properties key="core.boardCompatibility" value="brd2001a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="src/blink.c"/>
  </descriptors>
  <descriptors label="STKXXX_clock" description="&lt;h1&gt;&lt;b&gt;Simple Digital Clock using the LCD and EM2.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS and demonstrates the use of&#xD;&#xA;the LCD controller, RTC (real time counter), VCMP, GPIO and various &#xD;&#xA;Energy Modes (EM).&#xD;&#xA;&#xD;&#xA;The RTC is set up to wake the EFM32 from EM2 every minute. During this &#xD;&#xA;interval, the LCD is updated to reflect the current time. The animation&#xD;&#xA;feature is used to show the seconds. This is done by using the frame&#xD;&#xA;event counter to drive the animation feature every second.&#xD;&#xA;&#xD;&#xA;The VCMP is used to measure the input voltage on every wakeup. If the &#xD;&#xA;voltage drops too low, voltage boost is enabled on the LCD. This makes the &#xD;&#xA;LCD clear and readable even when running on low batteries.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32-Gxxx-STK Development Kit&#xD;&#xA;Device: EFM32G890F128 with LCD &#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32_Gxxx_STK/examples/clock/SimplicityStudio/STKXXX_clock.slsproj,../hardware/kit/EFM32_Gxxx_STK/examples/clock/arm/clock.uvprojx,../hardware/kit/EFM32_Gxxx_STK/examples/clock/iar/clock.eww"/>
    <properties key="core.boardCompatibility" value="brd2001a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="root/clock.c"/>
  </descriptors>
  <descriptors label="STKXXX_cpt007b_demo" description="&lt;h1&gt;&lt;b&gt;CPT007B Demo&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This demo demonstrates the capacitive button function of CPT007B fixed function&#xD;&#xA;board. This demo runs on the EFM32 STK, and communicates with CPT007B through&#xD;&#xA;the GPIO pins on the EXP header. Virtual buttons on STK's LCD screen indicate&#xD;&#xA;whether the capacitive sensing buttons on CPT007B are pressed or released.&#xD;&#xA;This demo supports up to 7 capacitive buttons on CPT007B&#xD;&#xA; &#xD;&#xA;Board:  Silicon Labs EFM32-Gxxx-STK Development Kit and CPT007B Evaluation Board&#xD;&#xA;Device: EFM32G890F128&lt;/pre&gt;">
    <properties key="template.category" value="Gecko Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32_Gxxx_STK/examples/cpt007b/SimplicityStudio/STKXXX_cpt007b_demo.slsproj,../hardware/kit/EFM32_Gxxx_STK/examples/cpt007b/arm/cpt007b_demo.uvprojx,../hardware/kit/EFM32_Gxxx_STK/examples/cpt007b/iar/cpt007b_demo.eww"/>
    <properties key="core.boardCompatibility" value="brd2001a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="src/cpt007b_demo.c"/>
  </descriptors>
  <descriptors label="STKXXX_cpt112s_demo" description="&lt;h1&gt;&lt;b&gt;CPT112S Demo&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This demo demonstrates the capacitive button function of CPT112S fixed&#xD;&#xA;function board. This demo runs on the EFM32 STK,and communicates with&#xD;&#xA;CPT112S through the SMBUS pins on the EXP header. Virtual buttons on&#xD;&#xA;STK's LCD screen indicate whether the capacitive sensing buttons on CPT112S&#xD;&#xA;are pressed or released.&#xD;&#xA; &#xD;&#xA;This demo supports 11 buttons on the CPT112S device.(The CS11 button is&#xD;&#xA;disabled in the default configuration of the board to enable the buzzer)&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32-Gxxx-STK Development Kit and CPT112S Evaluation Board&#xD;&#xA;Device: EFM32G890F128&lt;/pre&gt;">
    <properties key="template.category" value="Gecko Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32_Gxxx_STK/examples/cpt112s/SimplicityStudio/STKXXX_cpt112s_demo.slsproj,../hardware/kit/EFM32_Gxxx_STK/examples/cpt112s/arm/cpt112s_demo.uvprojx,../hardware/kit/EFM32_Gxxx_STK/examples/cpt112s/iar/cpt112s_demo.eww"/>
    <properties key="core.boardCompatibility" value="brd2001a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="src/cpt112s_demo.c"/>
  </descriptors>
  <descriptors label="STKXXX_emlcd" description="&lt;h1&gt;&lt;b&gt;Energy Modes with segment LCD example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS and demonstrates the use of &#xD;&#xA;the LCD controller, RTC (real time counter), GPIO and various Energy &#xD;&#xA;Modes (EM).&#xD;&#xA;&#xD;&#xA;EM2 is used for delays in between refreshing the LCD display, and a lot&#xD;&#xA;of &quot;eye candy&quot; are present to show off the MCU module's LCD display.&#xD;&#xA;&#xD;&#xA;The LCD controller drives the display down to EM2. In the demo, EM2 is &#xD;&#xA;used for &quot;most&quot; delays to show off this feature. The user can press PB0&#xD;&#xA;or PB1 to activate EM3 and EM4. EM4 requires a system reset, while PB0 &#xD;&#xA;again will wake up the system from Energy Mode 3.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32-Gxxx-STK Development Kit&#xD;&#xA;Device: EFM32G890F128 with LCD &#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32_Gxxx_STK/examples/emlcd/SimplicityStudio/STKXXX_emlcd.slsproj,../hardware/kit/EFM32_Gxxx_STK/examples/emlcd/arm/emlcd.uvprojx,../hardware/kit/EFM32_Gxxx_STK/examples/emlcd/iar/emlcd.eww"/>
    <properties key="core.boardCompatibility" value="brd2001a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="src/emlcd.c"/>
  </descriptors>
  <descriptors label="STKXXX_emode" description="&lt;h1&gt;&lt;b&gt;Select a single energy mode, and stay there.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 emlib and demonstrates the use of &#xD;&#xA;the LCD controller, RTC (real time counter), GPIO and various Energy &#xD;&#xA;Modes (EM).&#xD;&#xA;&#xD;&#xA;The user can press the pushbuttons PB0 and PB1 to select which energy &#xD;&#xA;mode to demonstrate.&#xD;&#xA;&#xD;&#xA;This demo application has been made to give a quick demo of the &#xD;&#xA;energyAware Profiler from Silicon Labs and to reproduce the different &#xD;&#xA;energy modes seen in the EFM32 datasheet current consumption table. &#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32-Gxxx-STK Development Kit&#xD;&#xA;Device: EFM32G890F128 with LCD &#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32_Gxxx_STK/examples/emode/SimplicityStudio/STKXXX_emode.slsproj,../hardware/kit/EFM32_Gxxx_STK/examples/emode/arm/emode.uvprojx,../hardware/kit/EFM32_Gxxx_STK/examples/emode/iar/emode.eww"/>
    <properties key="core.boardCompatibility" value="brd2001a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STKXXX_energy" description="&lt;h1&gt;&lt;b&gt;Board Support Package API demo for voltage and current readout.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS and demonstrates the use of &#xD;&#xA;the STK BSP.&#xD;&#xA;&#xD;&#xA;The BSP is used to read out the current consumption and VMCU voltage level&#xD;&#xA;from the board controller. The readings are printed to the display.&#xD;&#xA;&#xD;&#xA;The BSP use a 115800-N-1 UART to communicate with the board controller,&#xD;&#xA;if you do not need the board support functions, there is no need to &#xD;&#xA;include the BSP in your project. Currently, the UART communication with &#xD;&#xA;16x oversampling is used, limiting the communication channel to high &#xD;&#xA;frequencies for the peripheral clock.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32-Gxxx-STK Development Kit&#xD;&#xA;Device: EFM32G890F128&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32_Gxxx_STK/examples/energy/SimplicityStudio/STKXXX_energy.slsproj,../hardware/kit/EFM32_Gxxx_STK/examples/energy/arm/energy.uvprojx,../hardware/kit/EFM32_Gxxx_STK/examples/energy/iar/energy.eww"/>
    <properties key="core.boardCompatibility" value="brd2001a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="src/energy.c"/>
  </descriptors>
  <descriptors label="STKXXX_freertos_blink" description="&lt;h1&gt;&lt;b&gt;FreeRTOS - Blink example&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the FreeRTOS, and gives a basic demonstration of using two tasks to blink the LEDs on the board. &#xD;&#xA;It also shows how to use idle mode with different energy saving modes ( from EM1 to EM2 - configured in FreeRTOSConfig.h file).&#xD;&#xA;This example is intended as a skeleton for new projects using FreeRTOS.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32-Gxxx-STK Development Kit&#xD;&#xA;Device: EFM32G890F128&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32_Gxxx_STK/examples/freertos_blink/SimplicityStudio/STKXXX_freertos_blink.slsproj,../hardware/kit/EFM32_Gxxx_STK/examples/freertos_blink/arm/freertos_blink.uvprojx,../hardware/kit/EFM32_Gxxx_STK/examples/freertos_blink/iar/freertos_blink.eww"/>
    <properties key="core.boardCompatibility" value="brd2001a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STKXXX_freertos_tickless" description="&lt;h1&gt;&lt;b&gt;FreeRTOS - Tickless example&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the FreeRTOS, and gives a basic demonstration of using two tasks,&#xD;&#xA;one sender generating number and one receiver that displays the number on the LCD. The FreeRTOS is &#xD;&#xA;configured in tickless mode, going into EM2 when no tasks are active.&#xD;&#xA;&#xD;&#xA;EM3 mode cannot be used in this example because the LCD driver and timer are not available in EM3.&#xD;&#xA;For more details, see the configuraiton in FreeRTOSConfig.h file.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32-Gxxx-STK Development Kit&#xD;&#xA;Device: EFM32G890F128&lt;/pre&gt;">
    <properties key="template.category" value="Gecko Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32_Gxxx_STK/examples/freertos_tickless/SimplicityStudio/STKXXX_freertos_tickless.slsproj,../hardware/kit/EFM32_Gxxx_STK/examples/freertos_tickless/arm/freertos_tickless.uvprojx,../hardware/kit/EFM32_Gxxx_STK/examples/freertos_tickless/iar/freertos_tickless.eww"/>
    <properties key="core.boardCompatibility" value="brd2001a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STKXXX_gpiointerrupt" description="&lt;h1&gt;&lt;b&gt;Gpio interrupt example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use EFM32 CMSIS and gpio interrupt dispatcher driver to show&#xD;&#xA;how to handle multiple GPIO interrupts. Buttons pressing toggles LED0 and LED1.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32_Gxxx_STK Starter Kit&#xD;&#xA;Device: &quot;EFM32G890F128&quot;&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32_Gxxx_STK/examples/gpiointerrupt/SimplicityStudio/STKXXX_gpiointerrupt.slsproj,../hardware/kit/EFM32_Gxxx_STK/examples/gpiointerrupt/arm/gpiointerrupt.uvprojx,../hardware/kit/EFM32_Gxxx_STK/examples/gpiointerrupt/iar/gpiointerrupt.eww"/>
    <properties key="core.boardCompatibility" value="brd2001a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STKXXX_inttemp" description="&lt;h1&gt;&lt;b&gt;Internal temperature sensor example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS and emlib to demonstrate&#xD;&#xA;the usage of the internal temperature sensor on rev.C EFM32 Gecko&#xD;&#xA;devices.&#xD;&#xA;&#xD;&#xA;Note: EFM32 devices with production ID lower than 18 may measure inaccurate&#xD;&#xA;temperatures due to a sensor calibration bug.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32-G8xx-STK Starter Kit&#xD;&#xA;Device: EFM32G890F128&#xD;&#xA;&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32_Gxxx_STK/examples/inttemp/SimplicityStudio/STKXXX_inttemp.slsproj,../hardware/kit/EFM32_Gxxx_STK/examples/inttemp/arm/inttemp.uvprojx,../hardware/kit/EFM32_Gxxx_STK/examples/inttemp/iar/inttemp.eww"/>
    <properties key="core.boardCompatibility" value="brd2001a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="src/inttemp.c"/>
  </descriptors>
  <descriptors label="STKXXX_leuart" description="&lt;h1&gt;&lt;b&gt;LEUART/DMA in Energy mode2 output example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project reads and sends the data back to terminal using LEUART&#xA;while staying in EM2.&#xA;&#xA;It uses the EFM32 CMSIS and emlib, to demonstrate the&#xA;use of LEUART communication using DMA under the EM2 on the &#xA;EFM32_Gxxx_STK Starter Kit.&#xA;&#xA;The LEUART is configured to be used with DMA under EM2.&#xA;The terminal configuration is 9600-8-N-1.&#xA;The DMA is configured to handle read and write data bytes from LEUART under EM2.&#xA;&#xA;Testing:&#xA;1. Use the expansion header to connect the LEUART to your PC.&#xA;2. Pin Configuration:&#xA;	2.1. Pin-12 (PD4) LEUART0_TX&#xA;	2.2. Pin-14 (PD5) LEUART0_RX&#xA;	2.3. Pin-1 Gnd&#xA;&#xA;3. Configure terminal to 9600-8-N-1.&#xA;4. Enter characters from your keyboard and see if you receive the echo on the terminal.&#xA;5. Check the average current consumption is equal to EM2 on Energy Profiler.&#xA;&#xA;Board:  Silicon Labs EFM32_Gxxx_STK Starter Kit&#xA;Device: EFM32G890F128&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32_Gxxx_STK/examples/leuart/SimplicityStudio/STKXXX_leuart.slsproj,../hardware/kit/EFM32_Gxxx_STK/examples/leuart/arm/leuart.uvprojx,../hardware/kit/EFM32_Gxxx_STK/examples/leuart/iar/leuart.eww"/>
    <properties key="core.boardCompatibility" value="brd2001a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STKXXX_mpu" description="&lt;h1&gt;&lt;b&gt;Memory Protection Unit example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS including the STK BSP (board support&#xD;&#xA;package). It sets up the MPU to demonstrate usage of the MPU to catch memory&#xD;&#xA;access violations. The STK push-buttons (PB0 and PB1) are used to generate MPU&#xD;&#xA;faults.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32-Gxxx-STK Development Kit&#xD;&#xA;Device: EFM32G890F128&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32_Gxxx_STK/examples/mpu/SimplicityStudio/STKXXX_mpu.slsproj,../hardware/kit/EFM32_Gxxx_STK/examples/mpu/arm/mpu.uvprojx,../hardware/kit/EFM32_Gxxx_STK/examples/mpu/iar/mpu.eww"/>
    <properties key="core.boardCompatibility" value="brd2001a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="emlib/mpu.c"/>
  </descriptors>
  <descriptors label="STKXXX_nvm_simple" description="&lt;h1&gt;&lt;b&gt;nvm_simple - non-volatile memory driver usage simple example&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example shows simple usage of NVM module.&#xD;&#xA;&#xD;&#xA;It stores object (32bit word in this case) into flash region declared &#xD;&#xA;as non-volatile memory area. It uses wear leveling and demonstrates &#xD;&#xA;simple use of the NVM driver. There are two types of pages: &quot;normal&quot; &#xD;&#xA;dedicated for storing multiple objects which doesn't change often &#xD;&#xA;and &quot;wear&quot; which can store single object (but this could be structure&#xD;&#xA;containing many fields) that can often change. In this example on two pages &#xD;&#xA;same object is stored but NVM could handle multiple pages with different objects.&#xD;&#xA;&#xD;&#xA;PB0 - short press recalls data from &quot;normal&quot; page&#xD;&#xA;PB0 - long press store data to &quot;normal&quot; page&#xD;&#xA;PB1 - counts up, and after releasing stores data to &quot;wear&quot; page&#xD;&#xA;&#xD;&#xA;RESET - resets CPU and if there were valid data in NVM recovers last data value.&#xD;&#xA;&#xD;&#xA;LED1 - signals writing to flash&#xD;&#xA;LED0 - signals reading from flash (invisible due to short time)&#xD;&#xA;&#xD;&#xA;In case of fatal error LED0 blinks showing place in code that caused it.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32_Gxx_STK Development Kit&#xD;&#xA;Device: EFM32G890F128&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32_Gxxx_STK/examples/nvm_simple/SimplicityStudio/STKXXX_nvm_simple.slsproj,../hardware/kit/EFM32_Gxxx_STK/examples/nvm_simple/arm/nvm_simple.uvprojx,../hardware/kit/EFM32_Gxxx_STK/examples/nvm_simple/iar/nvm_simple.eww"/>
    <properties key="core.boardCompatibility" value="brd2001a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STKXXX_powertest" description="&lt;h1&gt;&lt;b&gt;Power test example, running demonstration of energy modes.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use EFM32 CMSIS and the emlib peripheral library&#xD;&#xA;to demonstrate the use of the various Energy Modes available on the&#xD;&#xA;EFM32G890F128. When running this example, the EnergyAware Profiler tool&#xD;&#xA;in Simplicity Studio can be used to show the power consumption of each &#xD;&#xA;energy mode.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32_Gxxx_STK Starter Kit&#xD;&#xA;Device: EFM32G890F128&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32_Gxxx_STK/examples/powertest/SimplicityStudio/STKXXX_powertest.slsproj,../hardware/kit/EFM32_Gxxx_STK/examples/powertest/arm/powertest.uvprojx,../hardware/kit/EFM32_Gxxx_STK/examples/powertest/iar/powertest.eww"/>
    <properties key="core.boardCompatibility" value="brd2001a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STKXXX_rtx_blink" description="&lt;h1&gt;&lt;b&gt;Keil RTX RTOS - Blink example&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the Keil RTX RTOS, and gives a basic demonstration&#xD;&#xA;of using two tasks to blink the LEDs on the board.&#xD;&#xA;This example is intended as a skeleton for new projects using Keil RTX.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32-Gxxx-STK Development Kit&#xD;&#xA;Device: EFM32G890F128&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32_Gxxx_STK/examples/rtx_blink/SimplicityStudio/STKXXX_rtx_blink.slsproj,../hardware/kit/EFM32_Gxxx_STK/examples/rtx_blink/arm/rtx_blink.uvprojx,../hardware/kit/EFM32_Gxxx_STK/examples/rtx_blink/iar/rtx_blink.eww"/>
    <properties key="core.boardCompatibility" value="brd2001a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="src/rtx_blink.c"/>
  </descriptors>
  <descriptors label="STKXXX_rtx_tickless" description="&lt;h1&gt;&lt;b&gt;Keil RTX RTOS - tick-less example&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the Keil RTX RTOS, and gives a basic demonstration&#xD;&#xA;of using two tasks; one sender generating number and one receiver that displays&#xD;&#xA;the number on LCD. The RTX is configured in tick-less mode, going into EM2 when&#xD;&#xA;no tasks are active. This example is intended as a skeleton for new projects&#xD;&#xA;using Keil RTX for energy aware applications.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32_Gxx_STK&#xD;&#xA;Device: EFM32G890F128&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32_Gxxx_STK/examples/rtx_tickless/SimplicityStudio/STKXXX_rtx_tickless.slsproj,../hardware/kit/EFM32_Gxxx_STK/examples/rtx_tickless/arm/rtx_tickless.uvprojx,../hardware/kit/EFM32_Gxxx_STK/examples/rtx_tickless/iar/rtx_tickless.eww"/>
    <properties key="core.boardCompatibility" value="brd2001a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="src/rtx_tickless.c"/>
  </descriptors>
  <descriptors label="STKXXX_rtx_tickless_nolcd" description="&lt;h1&gt;&lt;b&gt;Keil RTX RTOS - tick-less example with LCD off&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example is modification of rtx_tickless to demonstrate ultra low power consumption &#xD;&#xA;of Gecko processors in connection with RTX RTOS. Comparing to previous example it has LCD&#xD;&#xA;turned off. Low frequency crystal oscillator was disabled and low frequency RC oscillator&#xD;&#xA;used instead to lower energy consumption even more.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;This example project uses the Keil RTX RTOS, and gives a basic demonstration&#xD;&#xA;of using two tasks; one sender generating number and one receiver.&#xD;&#xA;The RTX is configured in tick-less mode, going into EM2 when&#xD;&#xA;no tasks are active. This example is intended as a skeleton for new projects&#xD;&#xA;using Keil RTX for energy aware applications.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32_Gxx_STK&#xD;&#xA;Device: EFM32G890F128&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32_Gxxx_STK/examples/rtx_tickless_nolcd/SimplicityStudio/STKXXX_rtx_tickless_nolcd.slsproj,../hardware/kit/EFM32_Gxxx_STK/examples/rtx_tickless_nolcd/arm/rtx_tickless_nolcd.uvprojx,../hardware/kit/EFM32_Gxxx_STK/examples/rtx_tickless_nolcd/iar/rtx_tickless_nolcd.eww"/>
    <properties key="core.boardCompatibility" value="brd2001a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="src/rtx_tickless.c"/>
  </descriptors>
  <descriptors label="STKXXX_touch" description="&lt;h1&gt;&lt;b&gt;Capacitive touch example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example demonstrates the capacitive touch capability&#xD;&#xA;of the EFM32 and the STK Starter Kit.&#xD;&#xA;&#xD;&#xA;It demonstrates the use of TIMER, ACMP, VCMP, LCD, and EMU.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32-Gxxx-STK Development Kit&#xD;&#xA;Device: EFM32G890F128&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32_Gxxx_STK/examples/touch/SimplicityStudio/STKXXX_touch.slsproj,../hardware/kit/EFM32_Gxxx_STK/examples/touch/arm/touch.uvprojx,../hardware/kit/EFM32_Gxxx_STK/examples/touch/iar/touch.eww"/>
    <properties key="core.boardCompatibility" value="brd2001a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="src/touchdemo.c"/>
  </descriptors>
  <descriptors label="STKXXX_ucos2" description="&lt;h1&gt;&lt;b&gt;uC/OS-II RTOS on EFM32 using example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This is a port of the uC/OS-II RTOS from Micrium Inc, http://www.micrium.com&#xD;&#xA;&#xD;&#xA;The port has been adapted by Silicon Labs for use with our Development&#xD;&#xA;Kit. It requires the standard EFM32 CMSIS package (including emlib).&#xD;&#xA;&#xD;&#xA;The example has three tasks:&#xD;&#xA; - Task1: LED blink task&#xD;&#xA; - Task2: Receives characters from serial port and posts message to Task3&#xD;&#xA; - Task3: Receives message from Task2 and writes it on LCD and serial port&#xD;&#xA;&#xD;&#xA;Serial port can be chosen between:&#xD;&#xA;USART1 - location 1 is used, GPIO port D pins 0 and 1, baudrate 115200-8-N-1.&#xD;&#xA;LEUART0 - location 0 is used, GPIO port D pins 4 and 5, baudrate 9600-8-N-1.&#xD;&#xA;&#xD;&#xA;No thread safety has been added around the simple &quot;printf&quot; usage provided.&#xD;&#xA;For GCC based platforms, Micrium can provide uC/OS-III which supports GCC.&#xD;&#xA;&#xD;&#xA;uC/OS-II is provided in source form for FREE evaluation, for educational use&#xD;&#xA;or for peaceful research.&#xD;&#xA;&#xD;&#xA;If you plan on using uC/OS-II in a commercial product you need to contact&#xD;&#xA;Micrium to properly license its use in your product. We provide ALL the&#xD;&#xA;source code for your convenience and to help you experience uC/OS-II.&#xD;&#xA;The fact that the source is provided does NOT mean that you can use it without&#xD;&#xA;paying a licensing fee.&#xD;&#xA;&#xD;&#xA;For commercial use, contact Micrium, http://www.micrium.com for details.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32-G8xx-STK Starter Kit&#xD;&#xA;Device: EFM32G890F128&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32_Gxxx_STK/examples/ucos2_port/arm/ucos2.uvprojx,../hardware/kit/EFM32_Gxxx_STK/examples/ucos2_port/iar/ucos2.eww"/>
    <properties key="core.boardCompatibility" value="brd2001a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="src/app/app.c"/>
  </descriptors>
  <descriptors label="STKXXX_ucos3" description="&lt;h1&gt;&lt;b&gt;uC/OS-III RTOS on EFM32 using example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This is a port of the uC/OS-III RTOS from Micrium Inc, http://www.micrium.com&#xD;&#xA;&#xD;&#xA;The port has been adapted by Silicon Labs for use with our Development Kit..&#xD;&#xA;It requires the standard EFM32 CMSIS package (including emlib).&#xD;&#xA;&#xD;&#xA;The example has three tasks:&#xD;&#xA; - Task1: LED blink task&#xD;&#xA; - Task2: Receives characters from serial port and posts message to Task3&#xD;&#xA; - Task3: Receives message from Task2 and writes it on LCD and serial port&#xD;&#xA;&#xD;&#xA;Serial port can be chosen between:&#xD;&#xA;USART1 - location 1 is used, GPIO port D pins 0 and 1, baudrate 115200-8-N-1.&#xD;&#xA;LEUART0 - location 0 is used, GPIO port D pins 4 and 5, baudrate 9600-8-N-1.&#xD;&#xA;&#xD;&#xA;uC/OS-III is provided in source form for FREE evaluation, for educational use&#xD;&#xA;or for peaceful research.&#xD;&#xA;&#xD;&#xA;If you plan on using uC/OS-III in a commercial product you need to contact&#xD;&#xA;Micrium to properly license its use in your product. We provide ALL the&#xD;&#xA;source code for your convenience and to help you experience uC/OS-III.&#xD;&#xA;The fact that the source is provided does NOT mean that you can use it without&#xD;&#xA;paying a licensing fee.&#xD;&#xA;&#xD;&#xA;For commercial use, contact Micrium, http://www.micrium.com for details.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32-G8xx-STK Starter Kit&#xD;&#xA;Device: EFM32G890F128&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32_Gxxx_STK/examples/ucos3_port/arm/ucos3.uvprojx,../hardware/kit/EFM32_Gxxx_STK/examples/ucos3_port/iar/ucos3.eww"/>
    <properties key="core.boardCompatibility" value="brd2001a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="src/app/app.c"/>
  </descriptors>
  <descriptors label="STKXXX_userpage" description="&lt;h1&gt;&lt;b&gt;Progamming and use of user flash page for data.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS  and demonstrates the programming of&#xD;&#xA;the user page in flash. The page can be used for data such as keys, serial&#xD;&#xA;numbers and other information that should not be deleted by a device erase.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32-Gxxx-STK Development Kit&#xD;&#xA;Device: EFM32G890F128&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32_Gxxx_STK/examples/userpage/SimplicityStudio/STKXXX_userpage.slsproj,../hardware/kit/EFM32_Gxxx_STK/examples/userpage/arm/userpage.uvprojx,../hardware/kit/EFM32_Gxxx_STK/examples/userpage/iar/userpage.eww"/>
    <properties key="core.boardCompatibility" value="brd2001a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="src/userpage.c"/>
  </descriptors>
  <descriptors label="DK3550_blink" description="&lt;h1&gt;&lt;b&gt;Blink example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use EFM32 CMSIS and the emlib peripheral library to&#xD;&#xA;demonstrate the use of the LED on the EFM32G-DK3550 development kit. This&#xD;&#xA;example is intended as a skeleton for new projects.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32G-DK3550 Development Kit&#xD;&#xA;Device: EFM32G890F128&#xD;&#xA;&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko 3550 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32G_DK3550/examples/blink/SimplicityStudio/DK3550_blink.slsproj,../hardware/kit/EFM32G_DK3550/examples/blink/arm/blink.uvprojx,../hardware/kit/EFM32G_DK3550/examples/blink/iar/blink.eww"/>
    <properties key="core.boardCompatibility" value="brd3302a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="src/blink.c"/>
  </descriptors>
  <descriptors label="DK3550_eeprom" description="&lt;h1&gt;&lt;b&gt;I2C eeprom example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS and emlib&#xD;&#xA;including DK BSP (board support package) and demonstrates&#xD;&#xA;the use of the I2C bus accessing the EEPROM on the DK.&#xD;&#xA;&#xD;&#xA;The first 3 bytes of the EEPROM is displayed on the TFT screen.&#xD;&#xA;(This will normally be FFFFFF first time.) Since stored in EEPROM,&#xD;&#xA;the data survives resets and power cycles.&#xD;&#xA;&#xD;&#xA;The following usage is possible:&#xD;&#xA;&#xD;&#xA;- Joystick up/down will increment/decrement the first byte (Byte0) in the&#xD;&#xA;  EEPROM. Byte1 is then set to Byte0+1, and Byte2 is set to Byte1+1.&#xD;&#xA;- Press SW4 button to reset 3 first bytes to 0xFF.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32G-DK3550 Development Kit&#xD;&#xA;Device: EFM32G890F128&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko 3550 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32G_DK3550/examples/eeprom/SimplicityStudio/DK3550_eeprom.slsproj,../hardware/kit/EFM32G_DK3550/examples/eeprom/arm/eeprom.uvprojx,../hardware/kit/EFM32G_DK3550/examples/eeprom/iar/eeprom.eww"/>
    <properties key="core.boardCompatibility" value="brd3302a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="src/eepromtest.c"/>
  </descriptors>
  <descriptors label="DK3550_emlcd" description="&lt;h1&gt;&lt;b&gt;Cycle through Energy Modes while updating Segment-LCD.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS and demonstrates the use of&#xD;&#xA;the LCD controller, RTC (real time counter), GPIO and various Energy &#xD;&#xA;Modes (EM).&#xD;&#xA;&#xD;&#xA;EM2 is used for delays in between refreshing the LCD display, and a lot&#xD;&#xA;of &quot;eye candy&quot; are present to show off the MCU module's LCD display.&#xD;&#xA;&#xD;&#xA;The LCD controller drives the display down to EM2. In the demo, EM2 is &#xD;&#xA;used for &quot;most&quot; delays to show off this feature. The user can press &#xD;&#xA;joystick up or down to activate EM3 and EM4. EM4 requires a system &#xD;&#xA;reset, while pushing joystick again will wake up the system from Energy&#xD;&#xA;Mode 3. Note that the upper right corner of the kit must show &#xD;&#xA;&quot;Keys: EFM&quot; for the joystick presses to work. Pressing joystick up and&#xD;&#xA;down will not go into EM3 or EM4 immediately, but after going through &#xD;&#xA;EM0-EM2 first.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32G_DK3550&#xD;&#xA;Device: EFM32G890F128&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko 3550 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32G_DK3550/examples/emlcd/SimplicityStudio/DK3550_emlcd.slsproj,../hardware/kit/EFM32G_DK3550/examples/emlcd/arm/emlcd.uvprojx,../hardware/kit/EFM32G_DK3550/examples/emlcd/iar/emlcd.eww"/>
    <properties key="core.boardCompatibility" value="brd3302a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="src/emlcd.c"/>
  </descriptors>
  <descriptors label="DK3550_emode" description="&lt;h1&gt;&lt;b&gt;Static Energy Mode example, select a single EM level.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 to demonstrate the use of the&#xD;&#xA;LCD controller, RTC (real time counter), GPIO and various Energy Modes.&#xD;&#xA;&#xD;&#xA;A counter ticks down from 4 seconds, and the user can press the joystick&#xD;&#xA;up and down to select the various energy modes, EM0 (busy loop from &#xD;&#xA;flash), EM1, EM2, EM3, EM4, EM2+RTC, EM2+RTC+LCD. Remember to press the AEM key&#xD;&#xA;to give the EFM32 access to the joystick.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32G_DK3550 Development Kit&#xD;&#xA;Device: EFM32G890F128&#xD;&#xA;&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko 3550 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32G_DK3550/examples/emode/SimplicityStudio/DK3550_emode.slsproj,../hardware/kit/EFM32G_DK3550/examples/emode/arm/emode.uvprojx,../hardware/kit/EFM32G_DK3550/examples/emode/iar/emode.eww"/>
    <properties key="core.boardCompatibility" value="brd3302a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="src/emode.c"/>
  </descriptors>
  <descriptors label="DK3550_fatcon" description="&lt;h1&gt;&lt;b&gt;FAT File System console example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use EFM32 CMSIS and the emlib peripheral library&#xD;&#xA;to demonstrate SPI-access to the Micro-SD card on the EFM32G-DK3550&#xD;&#xA;development kit. The application gives a small &quot;console&quot; on the serial&#xD;&#xA;port which can be used to view and list contents of the file system.&#xD;&#xA;Serial port configuration is 115200-8-N-1 is used.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32G-DK3550 Development Kit&#xD;&#xA;Device: EFM32G890F128&#xD;&#xA;&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko 3550 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32G_DK3550/examples/fatcon/SimplicityStudio/DK3550_fatcon.slsproj,../hardware/kit/EFM32G_DK3550/examples/fatcon/arm/fatcon.uvprojx,../hardware/kit/EFM32G_DK3550/examples/fatcon/iar/fatcon.eww"/>
    <properties key="core.boardCompatibility" value="brd3302a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="src/fatcon.c"/>
  </descriptors>
  <descriptors label="DK3550_freertos_blink" description="&lt;h1&gt;&lt;b&gt;FreeRTOS - Blink example&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the FreeRTOS, and gives a basic demonstration of using two tasks to blink the LEDs on the board. &#xD;&#xA;It also shows how to use idle mode with different energy saving modes ( from EM1 to EM2 - configured in FreeRTOSConfig.h file).&#xD;&#xA;This example is intended as a skeleton for new projects using FreeRTOS.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32G-DK3550 Development Kit&#xD;&#xA;Device: EFM32G890F128&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko 3550 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32G_DK3550/examples/freertos_blink/SimplicityStudio/DK3550_freertos_blink.slsproj,../hardware/kit/EFM32G_DK3550/examples/freertos_blink/arm/freertos_blink.uvprojx,../hardware/kit/EFM32G_DK3550/examples/freertos_blink/iar/freertos_blink.eww"/>
    <properties key="core.boardCompatibility" value="brd3302a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="DK3550_freertos_tickless" description="&lt;h1&gt;&lt;b&gt;FreeRTOS - Tickless example&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the FreeRTOS, and gives a basic demonstration of using two tasks,&#xD;&#xA;one sender generating number and one receiver that displays the number on the LCD. The FreeRTOS is &#xD;&#xA;configured in tickless mode, going into EM2 when no tasks are active.&#xD;&#xA;&#xD;&#xA;EM3 mode cannot be used in this example because the LCD driver and timer are not available in EM3.&#xD;&#xA;For more details, see the configuraiton in FreeRTOSConfig.h file.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32G-DK3550 Development Kit&#xD;&#xA;Device: EFM32G890F128&lt;/pre&gt;">
    <properties key="template.category" value="Gecko 3550 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32G_DK3550/examples/freertos_tickless/SimplicityStudio/DK3550_freertos_tickless.slsproj,../hardware/kit/EFM32G_DK3550/examples/freertos_tickless/arm/freertos_tickless.uvprojx,../hardware/kit/EFM32G_DK3550/examples/freertos_tickless/iar/freertos_tickless.eww"/>
    <properties key="core.boardCompatibility" value="brd3302a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="DK3550_graphxy_mm" description="&lt;h1&gt;&lt;b&gt;emWin example - XY Graph demonstration.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the emWin library.&#xD;&#xA;&#xD;&#xA;TFT driver is controlled in so called &quot;Memory Map&quot;&#xD;&#xA;configuration, where internal RAM of TFT controller &#xD;&#xA;is used. There is additional frame buffer needed so &#xD;&#xA;this example could be run in small RAM footprint &#xD;&#xA;systems. The code fits 128kB flash and uses less &#xD;&#xA;than 32kB RAM.&#xD;&#xA;&#xD;&#xA;In idle mode (where no user interaction is required)&#xD;&#xA;EM2 mode is enabled, allowing reducing power consumption&#xD;&#xA;down to 20uA.&#xD;&#xA;&#xD;&#xA;Control using touch panel or joystick.&#xD;&#xA;On application startup there is possibility to&#xD;&#xA;perform touch panel calibration.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32G-DK3550 Development Kit&#xD;&#xA;Device: EFM32G890F128&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko 3550 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32G_DK3550/examples/graphxy_mm/SimplicityStudio/DK3550_graphxy_mm.slsproj,../hardware/kit/EFM32G_DK3550/examples/graphxy_mm/iar/graphxy_mm.eww"/>
    <properties key="core.boardCompatibility" value="brd3302a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="src/WIDGET_GraphXY.c"/>
  </descriptors>
  <descriptors label="DK3550_guidemo_mm" description="&lt;h1&gt;&lt;b&gt;emWin example - show gui functionality&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the emWin library.&#xD;&#xA;&#xD;&#xA;TFT driver is controlled in so called &quot;Memory Map&quot;&#xD;&#xA;configuration, where internal RAM of TFT controller&#xD;&#xA;is used. There is additional framebuffer needed so&#xD;&#xA;this example could be run in small RAM footprint&#xD;&#xA;systems. The code fits 128kB flash and uses less&#xD;&#xA;than 32kB RAM.&#xD;&#xA;&#xD;&#xA;In idle mode (where no user interaction is required)&#xD;&#xA;EM2 mode is enabled, allowing reduced power consumption.&#xD;&#xA;&#xD;&#xA;Simple application showing different visual effects&#xD;&#xA;which could be achieved by means of emWin&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32G-DK3550 Development Kit&#xD;&#xA;Device: EFM32G890F128&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko 3550 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32G_DK3550/examples/guidemo_mm/SimplicityStudio/DK3550_guidemo_mm.slsproj,../hardware/kit/EFM32G_DK3550/examples/guidemo_mm/arm/guidemo_mm.uvprojx,../hardware/kit/EFM32G_DK3550/examples/guidemo_mm/iar/guidemo_mm.eww"/>
    <properties key="core.boardCompatibility" value="brd3302a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="src/GUIDEMO.c"/>
  </descriptors>
  <descriptors label="DK3550_hardfault" description="&lt;h1&gt;&lt;b&gt;Hardfault handler example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project demonstrates the use of the hard fault handler, and&#xD;&#xA;how to install and use another HardFault exception handler to provide&#xD;&#xA;useful information when these types of errors occurs.&#xD;&#xA;The information is transmitted on the kit UART port, serial configuration&#xD;&#xA;115200-8-N-1 is used.&#xD;&#xA;&#xD;&#xA;Three function calls for triggering software errors to be trapped is&#xD;&#xA;provided, comment them in and out to select between them.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32G-DK3550 Development Kit&#xD;&#xA;Device: EFM32G890F128&#xD;&#xA;&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko 3550 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32G_DK3550/examples/hardfault/SimplicityStudio/DK3550_hardfault.slsproj,../hardware/kit/EFM32G_DK3550/examples/hardfault/iar/hardfault.eww"/>
    <properties key="core.boardCompatibility" value="brd3302a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="DK3550_inttemp" description="&lt;h1&gt;&lt;b&gt;Internal temperature sensor example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS and emlib including DVK&#xD;&#xA;BSP (board support package) and demonstrates the use of the internal&#xD;&#xA;temperature sensor and ADC on the EFM32.&#xD;&#xA;&#xD;&#xA;Note: EFM32 devices with production ID lower than 18 may measure inaccurate&#xD;&#xA;temperatures due to a sensor calibration bug.&#xD;&#xA;&#xD;&#xA;The following configuration is possible:&#xD;&#xA;&#xD;&#xA;- Joystick push toggles between Fahrenheit and Celsius display mode.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32G_DK3550 Development Kit&#xD;&#xA;Device: EFM32G890F128&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko 3550 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32G_DK3550/examples/inttemp/SimplicityStudio/DK3550_inttemp.slsproj,../hardware/kit/EFM32G_DK3550/examples/inttemp/arm/inttemp.uvprojx,../hardware/kit/EFM32G_DK3550/examples/inttemp/iar/inttemp.eww"/>
    <properties key="core.boardCompatibility" value="brd3302a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="src/inttemp.c"/>
  </descriptors>
  <descriptors label="DK3550_joystick" description="&lt;h1&gt;&lt;b&gt;Kit joystick control example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use EFM32 CMSIS and the emlib peripheral library to&#xD;&#xA;demonstrate the joystick control API of the development kit. Please note that&#xD;&#xA;you need to configure the AEM-state to &quot;EFM&quot; to be able to operate this&#xD;&#xA;example. The example also shows how to enable and use a GPIO interrupt.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32G-DK3550 Development Kit&#xD;&#xA;Device: EFM32G890F128&#xD;&#xA;&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko 3550 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32G_DK3550/examples/joystick/SimplicityStudio/DK3550_joystick.slsproj,../hardware/kit/EFM32G_DK3550/examples/joystick/arm/joystick.uvprojx,../hardware/kit/EFM32G_DK3550/examples/joystick/iar/joystick.eww"/>
    <properties key="core.boardCompatibility" value="brd3302a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="src/joystick.c"/>
  </descriptors>
  <descriptors label="DK3550_leuart" description="&lt;h1&gt;&lt;b&gt;LEUART/DMA in Energy mode2 output example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project reads and sends the data back to terminal using LEUART&#xA;while staying in EM2.&#xA;&#xA;It uses the EFM32 CMSIS and emlib, to demonstrate the&#xA;use of LEUART communication using DMA under the EM2 on the &#xA;EFM32G_DK3550 development kit.&#xA;&#xA;The LEUART is configured to be used with DMA under EM2.&#xA;The terminal configuration is 9600-8-N-1.&#xA;The DMA is configured to handle read and write data bytes from LEUART under EM2.&#xA;&#xA;Testing:&#xA;1. Use the LEUART serial port header to connect the LEUART to your PC.&#xA;2. Configure terminal to 9600-8-N-1.&#xA;3. Enter characters from your keyboard and see if you receive the echo on the terminal.&#xA;4. Check the average current consumption is equal to EM2 on Energy Profiler.&#xA;&#xA;Board:  Silicon Labs EFM32G_DK3550 Development Kit&#xA;Device: EFM32G890F128&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko 3550 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32G_DK3550/examples/leuart/SimplicityStudio/DK3550_leuart.slsproj,../hardware/kit/EFM32G_DK3550/examples/leuart/arm/leuart.uvprojx,../hardware/kit/EFM32G_DK3550/examples/leuart/iar/leuart.eww"/>
    <properties key="core.boardCompatibility" value="brd3302a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="DK3550_mpu" description="&lt;h1&gt;&lt;b&gt;Cortex-M3 Memory Protection Unit example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example configures the MPU to demonstrate usage of this peripheral&#xD;&#xA;to catch memory access violations. The serial port is used to create and&#xD;&#xA;report on access violations, on LEUART1.&#xD;&#xA;&#xD;&#xA;Connect a terminal on RS232 port with baudrate 9600-8-N-1. This demo&#xD;&#xA;requires the use of the RS232 port in LEUART mode, UART mode will not&#xD;&#xA;work.&#xD;&#xA;&#xD;&#xA;The example will also use Energy Mode 2 (EM2).&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32G_DK3550 Development Kit&#xD;&#xA;Device: EFM32G890F128&#xD;&#xA;&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko 3550 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32G_DK3550/examples/mpu/SimplicityStudio/DK3550_mpu.slsproj,../hardware/kit/EFM32G_DK3550/examples/mpu/arm/mpu.uvprojx,../hardware/kit/EFM32G_DK3550/examples/mpu/iar/mpu.eww"/>
    <properties key="core.boardCompatibility" value="brd3302a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="src/mpu.c"/>
  </descriptors>
  <descriptors label="DK3550_peripherals" description="&lt;h1&gt;&lt;b&gt;Peripheral control example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use EFM32 CMSIS and the emlib peripheral library&#xD;&#xA;to demonstrate how to enable the access to various on-board peripherals.&#xD;&#xA;To reduce leakage current, the EFM32G-DK3550 board has several analog&#xD;&#xA;switches, and to enable extended functionality there are multiplexers&#xD;&#xA;which need to be configured correctly for most of the kit peripherals.&#xD;&#xA;&#xD;&#xA;The on-board LEDs will light up according to the configured state of the&#xD;&#xA;peripherals.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32G-DK3550 Development Kit&#xD;&#xA;Device: EFM32G890F128&#xD;&#xA;&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko 3550 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32G_DK3550/examples/peripherals/SimplicityStudio/DK3550_peripherals.slsproj,../hardware/kit/EFM32G_DK3550/examples/peripherals/arm/peripherals.uvprojx,../hardware/kit/EFM32G_DK3550/examples/peripherals/iar/peripherals.eww"/>
    <properties key="core.boardCompatibility" value="brd3302a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="src/periph.c"/>
  </descriptors>
  <descriptors label="DK3550_powertest" description="&lt;h1&gt;&lt;b&gt;Power test example, running demonstration of energy modes.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use EFM32 CMSIS and the emlib peripheral library &#xD;&#xA;to demonstrate the use of the various Energy Modes available on the&#xD;&#xA;EFM32G890F128. When running this example, the EnergyAware Profiler tool&#xD;&#xA;in Simplicity Studio can be used to show the power consumption of each &#xD;&#xA;energy mode.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32G-DK3550 Development Kit&#xD;&#xA;Device: EFM32G890F128&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko 3550 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32G_DK3550/examples/powertest/SimplicityStudio/DK3550_powertest.slsproj,../hardware/kit/EFM32G_DK3550/examples/powertest/arm/powertest.uvprojx,../hardware/kit/EFM32G_DK3550/examples/powertest/iar/powertest.eww"/>
    <properties key="core.boardCompatibility" value="brd3302a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="DK3550_preamp" description="&lt;h1&gt;&lt;b&gt;Pre-amplifier example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS including DK BSP (board &#xD;&#xA;support package) and demonstrates the use of the ADC/DAC/DMA/PRS/TIMER&#xD;&#xA;in order to implement a very simple pre-amplifier.&#xD;&#xA;&#xD;&#xA;- Connect an audio source to the audio in connector&#xD;&#xA;  on the DVK, for instance an MP3 player.&#xD;&#xA;- Connect an active loudspeaker with built-in amplifier&#xD;&#xA;  to the audio out connector on the DVK.&#xD;&#xA;&#xD;&#xA;The input signal is converted to digital and level adjusted by the EFM32&#xD;&#xA;core before being converted back to analog.&#xD;&#xA;&#xD;&#xA;The output volume level is adjusted with kit pushbuttons PB1 and PB2.&#xD;&#xA;Output level is indicated by the 14 leftmost user LEDs.&#xD;&#xA;&#xD;&#xA;The example will clip the output signal if exceeding predefined level.&#xD;&#xA;This may occur due to too high input signal and/or to high volume &#xD;&#xA;setting. Clipping is indicated by the rightmost user LED.&#xD;&#xA;&#xD;&#xA;Push the AEM button on the kit until &quot;EFM&quot; shows in the upper right&#xD;&#xA;corner of the TFT display to activate PB1 and PB2 pushbuttons.&#xD;&#xA;&#xD;&#xA;WARNING:&#xD;&#xA;--------&#xD;&#xA;Do not attach or use headphones with this example. Use small&#xD;&#xA;loadspeakers with built in amplification, ensuring volume is at an&#xD;&#xA;acceptable level. Exposure to loud noises from any source for extended&#xD;&#xA;periods of time may temporarily or permanently affect your hearing. The&#xD;&#xA;louder the volume sound level, the less time is required before your&#xD;&#xA;hearing could be affected. Hearing damage from loud noise is sometimes&#xD;&#xA;undetectable at first and can have a cumulative effect.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32G-DK3550 Development Kit&#xD;&#xA;Device: EFM32G890F128&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko 3550 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32G_DK3550/examples/preamp/SimplicityStudio/DK3550_preamp.slsproj,../hardware/kit/EFM32G_DK3550/examples/preamp/arm/preamp.uvprojx,../hardware/kit/EFM32G_DK3550/examples/preamp/iar/preamp.eww"/>
    <properties key="core.boardCompatibility" value="brd3302a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="src/preamp.c"/>
  </descriptors>
  <descriptors label="DK3550_reversi_mm" description="&lt;h1&gt;&lt;b&gt;emWin example - reversi game.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the emWin library.&#xD;&#xA;&#xD;&#xA;TFT driver is controlled in so called &quot;Memory Map&quot;&#xD;&#xA;configuration, where internal RAM of TFT controller &#xD;&#xA;is used. There is additional framebuffer needed so &#xD;&#xA;this example could be run in small RAM footprint &#xD;&#xA;systems. The code fits 128kB flash and uses less &#xD;&#xA;than 32kB RAM.&#xD;&#xA;&#xD;&#xA;In idle mode (where no user interaction is required)&#xD;&#xA;EM2 mode is enabled, allowing reducing power consuption&#xD;&#xA;down to 20uA.&#xD;&#xA;&#xD;&#xA;The game is controlled using touch pad or joystick. &#xD;&#xA;If there is misalignment when using touch pad please&#xD;&#xA;do calibration - from menu select:&#xD;&#xA;Options-&gt;Touch Panel calibration.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32G-DK3550 Development Kit&#xD;&#xA;Device: EFM32G890F128&#xD;&#xA;&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko 3550 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32G_DK3550/examples/reversi_mm/SimplicityStudio/DK3550_reversi_mm.slsproj,../hardware/kit/EFM32G_DK3550/examples/reversi_mm/arm/reversi_mm.uvprojx,../hardware/kit/EFM32G_DK3550/examples/reversi_mm/iar/reversi_mm.eww"/>
    <properties key="core.boardCompatibility" value="brd3302a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="src/reversi.c"/>
  </descriptors>
  <descriptors label="DK3550_rs232" description="&lt;h1&gt;&lt;b&gt;RS232/UART output example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS and emlib, to demonstrates the&#xD;&#xA;use of UART and LEUART communication on the EFM32G-DK3550 development kit.&#xD;&#xA;&#xD;&#xA;For the default UART communication, serial configuration 115200-8-N-1 is used.&#xD;&#xA;If LEUART mode is configured by defining &quot;RETARGET_LEUART1&quot; as a build option,&#xD;&#xA;terminal configuration is 9600-8-N-1.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32G-DK3550 Development Kit&#xD;&#xA;Device: EFM32G890F128&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko 3550 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32G_DK3550/examples/rs232/SimplicityStudio/DK3550_rs232.slsproj,../hardware/kit/EFM32G_DK3550/examples/rs232/arm/rs232.uvprojx,../hardware/kit/EFM32G_DK3550/examples/rs232/iar/rs232.eww"/>
    <properties key="core.boardCompatibility" value="brd3302a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="src/rs232.c"/>
  </descriptors>
  <descriptors label="DK3550_slideshow" description="&lt;h1&gt;&lt;b&gt;Slideshow example using microSD.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example uses the FatFS library for accssing a filesystem on a &#xD;&#xA;microSD card. It will loop through the files present on the card. &#xD;&#xA;BMP files with a resolution less than the resolution of the screen&#xD;&#xA;(320x240) will be displayed on the TFT.&#xD;&#xA;&#xD;&#xA;The demo has two modes of operation. If a file called &quot;files.txt&quot; is&#xD;&#xA;present on the root of the microSD card, this file will be read. The&#xD;&#xA;BMP files will then be displayed in the order they are listed in the&#xD;&#xA;file.&#xD;&#xA;&#xD;&#xA;If this file is not present, all files on the root of tile SD card is &#xD;&#xA;looped through and displayed. If the BMP decoder cannot display a &#xD;&#xA;certain file, an error message is displayed.&#xD;&#xA;&#xD;&#xA;WARNING:&#xD;&#xA;SD2119 driver and GLIB graphics library are not intended for production &#xD;&#xA;purposes, and are included here to illustrate TFT display driving only.&#xD;&#xA;This components are subject to changes in API/usage and there will be &#xD;&#xA;no effort to keep compatibility, or to support this software in any way.&#xD;&#xA;&#xD;&#xA;NOTE:&#xD;&#xA;This example is too large to be built with IDEs with 32KB size limits.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32G-DK3550 Development Kit&#xD;&#xA;Device: EFM32G890F128&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko 3550 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32G_DK3550/examples/slideshow/SimplicityStudio/DK3550_slideshow.slsproj,../hardware/kit/EFM32G_DK3550/examples/slideshow/arm/slideshow.uvprojx,../hardware/kit/EFM32G_DK3550/examples/slideshow/iar/slideshow.eww"/>
    <properties key="core.boardCompatibility" value="brd3302a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="src/slideshow.c"/>
  </descriptors>
  <descriptors label="DK3550_temperature" description="&lt;h1&gt;&lt;b&gt;I2C temperature sensor example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS and emlib including DK BSP&#xD;&#xA;(board support package) and demonstrates the use of the I2C bus&#xD;&#xA;accessing the temperature sensor on the DK.&#xD;&#xA;&#xD;&#xA;The following configuration is possible:&#xD;&#xA;&#xD;&#xA;- Joystick push toggles between Fahrenheit and Celsius display mode.&#xD;&#xA;&#xD;&#xA;The result is displayed on the TFT-LCD. Press the AEM button to show&#xD;&#xA;Keys:EFM to enable on-screen results.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32G-DK3550 Development Kit&#xD;&#xA;Device: EFM32G890F128&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko 3550 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32G_DK3550/examples/temperature/SimplicityStudio/DK3550_temperature.slsproj,../hardware/kit/EFM32G_DK3550/examples/temperature/arm/temperature.uvprojx,../hardware/kit/EFM32G_DK3550/examples/temperature/iar/temperature.eww"/>
    <properties key="core.boardCompatibility" value="brd3302a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="src/temperature.c"/>
  </descriptors>
  <descriptors label="DK3550_tft" description="&lt;h1&gt;&lt;b&gt;TFT Addressed map coloured blocks example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS including emlib and the board&#xD;&#xA;support package support functions/drivers to demonstrate driving the&#xD;&#xA;kit's TFT-display from the EFM32 Gecko.&#xD;&#xA;&#xD;&#xA;This example is driving the display in what is called &quot;address mapped mode&quot;&#xD;&#xA;(or mode 8080). Using this mode, the framebuffer resides in the memory of&#xD;&#xA;the SSD2119 controller chip.&#xD;&#xA;&#xD;&#xA;WARNING:&#xD;&#xA;SD2119 driver and GLIB graphics library are not intended for production&#xD;&#xA;purposes, and are included here to illustrate TFT display driving only.&#xD;&#xA;&#xD;&#xA;These components are subject to changes in API/usage and there will be&#xD;&#xA;no effort to keep compatibility, or to support this software in any way.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32G-DK3550 Development Kit&#xD;&#xA;Device: EFM32G890F128&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko 3550 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32G_DK3550/examples/tft/SimplicityStudio/DK3550_tft.slsproj,../hardware/kit/EFM32G_DK3550/examples/tft/arm/tft.uvprojx,../hardware/kit/EFM32G_DK3550/examples/tft/iar/tft.eww"/>
    <properties key="core.boardCompatibility" value="brd3302a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="src/tft.c"/>
  </descriptors>
  <descriptors label="DK3550_tftprintf" description="&lt;h1&gt;&lt;b&gt;Printf output on TFT-LCD.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS including emlib and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the kit's TFT-display from the EFM32 Gecko. In this case the display is&#xD;&#xA;used as output from a regular printf in the application, as an&#xD;&#xA;alternative to the RS232 port.&#xD;&#xA;&#xD;&#xA;This example is driving the display in what is called &quot;address mapped&#xD;&#xA;mode&quot; (or mode 8080). Using this mode, the framebuffer resides in the&#xD;&#xA;memory of the SSD2119 controller chip of the URT TFT-LCD display.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32G-DK3550 Development Kit&#xD;&#xA;Device: EFM32G890F128&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko 3550 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32G_DK3550/examples/tftprintf/SimplicityStudio/DK3550_tftprintf.slsproj,../hardware/kit/EFM32G_DK3550/examples/tftprintf/arm/tftprintf.uvprojx,../hardware/kit/EFM32G_DK3550/examples/tftprintf/iar/tftprintf.eww"/>
    <properties key="core.boardCompatibility" value="brd3302a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="src/tftprintf.c"/>
  </descriptors>
  <descriptors label="DK3550_ucos2" description="&lt;h1&gt;&lt;b&gt;uC/OS-II RTOS on EFM32 using example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This is a port of the uC/OS-II RTOS from Micrium Inc, http://www.micrium.com&#xD;&#xA;&#xD;&#xA;The port has been adapted by Silicon Labs for use with our Development&#xD;&#xA;Kit. It requires the standard EFM32 CMSIS package (including emlib).&#xD;&#xA;&#xD;&#xA;The example has three tasks:&#xD;&#xA; - Task1: LED blink task&#xD;&#xA; - Task2: Receives characters from serial port and posts message to Task3&#xD;&#xA; - Task3: Receives message from Task2 and writes it on LCD and serial port&#xD;&#xA;&#xD;&#xA;Serial port can be chosen between:&#xD;&#xA;USART1 - location 1 is used, GPIO port D pins 0 and 1, baudrate 115200-8-N-1.&#xD;&#xA;LEUART0 - location 0 is used, GPIO port D pins 4 and 5, baudrate 9600-8-N-1.&#xD;&#xA;&#xD;&#xA;uC/OS-II is provided in source form for FREE evaluation, for educational use&#xD;&#xA;or for peaceful research.&#xD;&#xA;&#xD;&#xA;If you plan on using uC/OS-II in a commercial product you need to contact&#xD;&#xA;Micrium to properly license its use in your product. We provide ALL the&#xD;&#xA;source code for your convenience and to help you experience uC/OS-II.&#xD;&#xA;The fact that the source is provided does NOT mean that you can use it without&#xD;&#xA;paying a licensing fee.&#xD;&#xA;&#xD;&#xA;For commercial use, contact Micrium, http://www.micrium.com for details.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32G_DK3550 Development Kit&#xD;&#xA;Device: EFM32G890F128&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko 3550 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32G_DK3550/examples/ucos2_port/arm/ucos2.uvprojx,../hardware/kit/EFM32G_DK3550/examples/ucos2_port/iar/ucos2.eww"/>
    <properties key="core.boardCompatibility" value="brd3302a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="src/app/app.c"/>
  </descriptors>
  <descriptors label="DK3550_ucos3" description="&lt;h1&gt;&lt;b&gt;uC/OS-III RTOS on EFM32 using example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This is a port of the uC/OS-III RTOS from Micrium Inc, http://www.micrium.com&#xD;&#xA;&#xD;&#xA;The port has been adapted by Silicon Labs for use with our Development Kit..&#xD;&#xA;It requires the standard EFM32 CMSIS package (including emlib).&#xD;&#xA;&#xD;&#xA;The example has three tasks:&#xD;&#xA; - Task1: LED blink task&#xD;&#xA; - Task2: Receives characters from serial port and posts message to Task3&#xD;&#xA; - Task3: Receives message from Task2 and writes it on LCD and serial port&#xD;&#xA;&#xD;&#xA;USART1 is used, GPIO port C pins 0 and 1, baudrate 115200-8-N-1. No thread&#xD;&#xA;safety has been added around the simple &quot;printf&quot; usage provided. For commercial&#xD;&#xA;use, contact Micrium, http://www.micrium.com for details.&#xD;&#xA;&#xD;&#xA;uC/OS-III is provided in source form for FREE evaluation, for educational use&#xD;&#xA;or for peaceful research.&#xD;&#xA;&#xD;&#xA;If you plan on using uC/OS-III in a commercial product you need to contact&#xD;&#xA;Micrium to properly license its use in your product. We provide ALL the&#xD;&#xA;source code for your convenience and to help you experience uC/OS-III.&#xD;&#xA;The fact that the source is provided does NOT mean that you can use it without&#xD;&#xA;paying a licensing fee.&#xD;&#xA;&#xD;&#xA;For commercial use, contact Micrium, http://www.micrium.com for details.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32G_DK3550 Development Kit&#xD;&#xA;Device: EFM32G890F128&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko 3550 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32G_DK3550/examples/ucos3_port/arm/ucos3.uvprojx,../hardware/kit/EFM32G_DK3550/examples/ucos3_port/iar/ucos3.eww"/>
    <properties key="core.boardCompatibility" value="brd3302a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="src/app/app.c"/>
  </descriptors>
  <descriptors label="DK3550_wavplayer" description="&lt;h1&gt;&lt;b&gt;Audio .WAV format player from microSD card.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS including DK BSP (board &#xD;&#xA;support package) and demonstrates how to play a wav file from the &#xD;&#xA;microSD-card.&#xD;&#xA;&#xD;&#xA;The wav file must be named &quot;sweet1.wav&quot; and must be encoded with 16-bit&#xD;&#xA;PCM audio sampling.&#xD;&#xA;&#xD;&#xA;The output volume level is adjusted with kit pushbuttons PB1 and PB2.&#xD;&#xA;Output level is indicated by the 14 leftmost user LEDs.&#xD;&#xA;Push the AEM button on the kit until &quot;EFM&quot; shows in the upper right&#xD;&#xA;corner of the TFT display to activate PB1 and PB2 pushbuttons.&#xD;&#xA;&#xD;&#xA;It sets up access to DVK registers, and supports fat-filesystem on the&#xD;&#xA;sd-card.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32G-DK3550 Development Kit&#xD;&#xA;Device: EFM32G890F128&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko 3550 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32G_DK3550/examples/wavplayer/SimplicityStudio/DK3550_wavplayer.slsproj,../hardware/kit/EFM32G_DK3550/examples/wavplayer/arm/wavplayer.uvprojx,../hardware/kit/EFM32G_DK3550/examples/wavplayer/iar/wavplayer.eww"/>
    <properties key="core.boardCompatibility" value="brd3302a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="src/wavplayer.c"/>
  </descriptors>
  <descriptors label="DK3750_blink" description="&lt;h1&gt;&lt;b&gt;Blink example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use EFM32 CMSIS and the emlib peripheral library&#xD;&#xA;to demonstrate the use of the LED on the EFM32GG-DK3750 development kit.&#xD;&#xA;This example is intended as a skeleton for new projects.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32GG-DK3750 Development Kit&#xD;&#xA;Device: EFM32GG990F1024&#xD;&#xA;&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3750 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32GG_DK3750/examples/blink/SimplicityStudio/DK3750_blink.slsproj,../hardware/kit/EFM32GG_DK3750/examples/blink/arm/blink.uvprojx,../hardware/kit/EFM32GG_DK3750/examples/blink/iar/blink.eww"/>
    <properties key="core.boardCompatibility" value="brd3600a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/blink.c"/>
  </descriptors>
  <descriptors label="DK3750_eeprom" description="&lt;h1&gt;&lt;b&gt;I2C eeprom example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS and emlib including DK BSP&#xD;&#xA;(board support package) and demonstrates the use of the I2C bus&#xD;&#xA;accessing the EEPROM on the DK.&#xD;&#xA;&#xD;&#xA;The first 3 bytes of the EEPROM is displayed on the TFT screen (this&#xD;&#xA;will normally be FFFFFF first time.) Since stored in EEPROM, the data&#xD;&#xA;survives resets and power cycles.&#xD;&#xA;&#xD;&#xA;The following usage is possible:&#xD;&#xA;&#xD;&#xA;- Joystick up/down will increment/decrement the first byte (Byte0) in&#xD;&#xA;  the EEPROM. Byte1 is then set to Byte0+1, and Byte2 is set to Byte1+1.&#xD;&#xA;- Press SW4 button to reset 3 first bytes to 0xFF.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32GG-DK3750 Development Kit&#xD;&#xA;Device: EFM32GG990F1024&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3750 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32GG_DK3750/examples/eeprom/SimplicityStudio/DK3750_eeprom.slsproj,../hardware/kit/EFM32GG_DK3750/examples/eeprom/arm/eeprom.uvprojx,../hardware/kit/EFM32GG_DK3750/examples/eeprom/iar/eeprom.eww"/>
    <properties key="core.boardCompatibility" value="brd3600a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/eepromtest.c"/>
  </descriptors>
  <descriptors label="DK3750_emode" description="&lt;h1&gt;&lt;b&gt;Energy Mode 0-4 example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project for the EFM32GG-DK3750 development kit, illustrates the&#xD;&#xA;various energy saving modes of the EFM32GG990F1024.&#xD;&#xA;&#xD;&#xA;Use joystick Up and Down to select the demo, after pressing the kit AEM &#xD;&#xA;button to enable the display to be driven from the Giant Gecko.&#xD;&#xA;&#xD;&#xA;When the correct demo has been selected, press PB1 to activate it. &#xD;&#xA;After this, you need to use the kit's AEM button again to go back to the&#xD;&#xA;energy mesaurement display. A new press on the AEM button will not bring&#xD;&#xA;back the original screen, as the Giant Gecko will be in a sleep mode. You&#xD;&#xA;need to restart to test another demo.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32GG-DK3750 Development Kit&#xD;&#xA;Device: EFM32GG990F1024&#xD;&#xA;&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3750 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32GG_DK3750/examples/emode/SimplicityStudio/DK3750_emode.slsproj,../hardware/kit/EFM32GG_DK3750/examples/emode/arm/emode.uvprojx,../hardware/kit/EFM32GG_DK3750/examples/emode/iar/emode.eww"/>
    <properties key="core.boardCompatibility" value="brd3600a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/emode.c"/>
  </descriptors>
  <descriptors label="DK3750_fatcon" description="&lt;h1&gt;&lt;b&gt;FAT File System console example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use EFM32 CMSIS and the emlib peripheral library&#xD;&#xA;to demonstrate SPI-access to the Micro-SD card on the EFM32GG-DK3750&#xD;&#xA;development kit. The application gives a small &quot;console&quot; on the serial&#xD;&#xA;port which can be used to view and list contents of the file system.&#xD;&#xA;Serial configuration 115200-8-N-1 is used.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32GG-DK3750 Development Kit&#xD;&#xA;Device: EFM32GG990F1024&#xD;&#xA;&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3750 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32GG_DK3750/examples/fatcon/SimplicityStudio/DK3750_fatcon.slsproj,../hardware/kit/EFM32GG_DK3750/examples/fatcon/arm/fatcon.uvprojx,../hardware/kit/EFM32GG_DK3750/examples/fatcon/iar/fatcon.eww"/>
    <properties key="core.boardCompatibility" value="brd3600a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/fatcon.c"/>
  </descriptors>
  <descriptors label="DK3750_freertos_blink" description="&lt;h1&gt;&lt;b&gt;FreeRTOS - Blink example&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the FreeRTOS, and gives a basic demonstration of using two tasks to blink the LEDs on the board. &#xD;&#xA;It also shows how to use idle with different energy saving modes with or without ticless mode( from EM1 to EM3 - configured in FreeRTOSConfig.h file).&#xD;&#xA;This example is intended as a skeleton for new projects using FreeRTOS.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32GG-DK3750 Development Kit&#xD;&#xA;Device: EFM32GG990F1024&#xD;&#xA;&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3750 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32GG_DK3750/examples/freertos_blink/SimplicityStudio/DK3750_freertos_blink.slsproj,../hardware/kit/EFM32GG_DK3750/examples/freertos_blink/arm/freertos_blink.uvprojx,../hardware/kit/EFM32GG_DK3750/examples/freertos_blink/iar/freertos_blink.eww"/>
    <properties key="core.boardCompatibility" value="brd3600a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="DK3750_graphxy" description="&lt;h1&gt;&lt;b&gt;emWin example - XY Graph demonstration.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the emWin library.&#xD;&#xA;&#xD;&#xA;Control using touch panel or joystick.&#xD;&#xA;On application startup there is possibility to&#xD;&#xA;perform touch panel calibration.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32GG-DK3750 Development Kit&#xD;&#xA;Device: EFM32GG990F1024&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3750 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32GG_DK3750/examples/graphxy/SimplicityStudio/DK3750_graphxy.slsproj,../hardware/kit/EFM32GG_DK3750/examples/graphxy/arm/graphxy.uvprojx,../hardware/kit/EFM32GG_DK3750/examples/graphxy/iar/graphxy.eww"/>
    <properties key="core.boardCompatibility" value="brd3600a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/WIDGET_GraphXY.c"/>
  </descriptors>
  <descriptors label="DK3750_graphxy_mm" description="&lt;h1&gt;&lt;b&gt;emWin example - XY Graph demonstration - energy efficient.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the emWin library maintaining&#xD;&#xA;low power consumption.&#xD;&#xA;&#xD;&#xA;TFT driver is controlled in so called &quot;Memory Map&quot;&#xD;&#xA;configuration, where internal RAM of TFT controller &#xD;&#xA;is used. There is no additional framebuffer needed&#xD;&#xA;so this example could be run in small RAM footprint &#xD;&#xA;systems. The code fits 128kB flash and uses less &#xD;&#xA;than 32kB RAM.&#xD;&#xA;&#xD;&#xA;In idle mode (where no user interaction is required)&#xD;&#xA;EM2 mode is enabled, allowing reducing power consuption&#xD;&#xA;down to ~4uA.&#xD;&#xA;&#xD;&#xA;Control using touch panel or joystick.&#xD;&#xA;On application startup there is possibility to&#xD;&#xA;perform touch panel calibration.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32GG-DK3750 Development Kit&#xD;&#xA;Device: EFM32GG990F1024&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3750 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32GG_DK3750/examples/graphxy_mm/SimplicityStudio/DK3750_graphxy_mm.slsproj,../hardware/kit/EFM32GG_DK3750/examples/graphxy_mm/arm/graphxy_mm.uvprojx,../hardware/kit/EFM32GG_DK3750/examples/graphxy_mm/iar/graphxy_mm.eww"/>
    <properties key="core.boardCompatibility" value="brd3600a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/WIDGET_GraphXY.c"/>
  </descriptors>
  <descriptors label="DK3750_guidemo" description="&lt;h1&gt;&lt;b&gt;emWin example - show gui functionality&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the emWin library.&#xD;&#xA;&#xD;&#xA;Simple application showing different visual effects&#xD;&#xA;which could be achieved by means of emWin&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32GG-DK3750 Development Kit&#xD;&#xA;Device: EFM32GG990F1024&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3750 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32GG_DK3750/examples/guidemo/SimplicityStudio/DK3750_guidemo.slsproj,../hardware/kit/EFM32GG_DK3750/examples/guidemo/arm/guidemo.uvprojx,../hardware/kit/EFM32GG_DK3750/examples/guidemo/iar/guidemo.eww"/>
    <properties key="core.boardCompatibility" value="brd3600a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="guidemo.c"/>
  </descriptors>
  <descriptors label="DK3750_guidemo_mm" description="&lt;h1&gt;&lt;b&gt;emWin example - show gui functionality - energy efficient.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the emWin library maintaining&#xD;&#xA;low power consumption.&#xD;&#xA;&#xD;&#xA;TFT driver is controlled in so called &quot;Memory Map&quot;&#xD;&#xA;configuration, where internal RAM of TFT controller &#xD;&#xA;is used. There is no additional framebuffer needed &#xD;&#xA;so this example could be run in small RAM footprint &#xD;&#xA;systems.&#xD;&#xA;&#xD;&#xA;Simple application showing different visual effects&#xD;&#xA;which could be achieved by means of emWin.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32GG-DK3750 Development Kit&#xD;&#xA;Device: EFM32GG990F1024&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3750 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32GG_DK3750/examples/guidemo_mm/SimplicityStudio/DK3750_guidemo_mm.slsproj,../hardware/kit/EFM32GG_DK3750/examples/guidemo_mm/arm/guidemo_mm.uvprojx,../hardware/kit/EFM32GG_DK3750/examples/guidemo_mm/iar/guidemo_mm.eww"/>
    <properties key="core.boardCompatibility" value="brd3600a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/GUIDEMO.c"/>
  </descriptors>
  <descriptors label="DK3750_hardfault" description="&lt;h1&gt;&lt;b&gt;Hardfault handler example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project demonstrates the use of the hard fault handler, and&#xD;&#xA;how to install and use another HardFault exception handler to provide&#xD;&#xA;useful information when these types of errors occurs.&#xD;&#xA;The information is transmitted on the kit UART port, serial configuration&#xD;&#xA;115200-8-N-1 is used.&#xD;&#xA;&#xD;&#xA;Three function calls for triggering software errors to be trapped is&#xD;&#xA;provided, comment them in and out to select between them.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32GG-DK3750 Development Kit&#xD;&#xA;Device: EFM32GG990F1024&#xD;&#xA;&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3750 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32GG_DK3750/examples/hardfault/SimplicityStudio/DK3750_hardfault.slsproj,../hardware/kit/EFM32GG_DK3750/examples/hardfault/iar/hardfault.eww"/>
    <properties key="core.boardCompatibility" value="brd3600a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="DK3750_inttemp" description="&lt;h1&gt;&lt;b&gt;Internal temperature sensor example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS and emlib including DK BSP&#xD;&#xA;(board support package) and demonstrates the use of the internal&#xD;&#xA;temperature sensor and ADC on the EFM32.&#xD;&#xA;&#xD;&#xA;Note: EFM32 devices with production ID lower than 18 may measure inaccurate&#xD;&#xA;temperatures due to a sensor calibration bug.&#xD;&#xA;&#xD;&#xA;The following configuration is possible:&#xD;&#xA;&#xD;&#xA;- Joystick push toggles between Fahrenheit and Celsius display mode.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32GG-DK3750 Development Kit&#xD;&#xA;Device: EFM32GG990F1024&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3750 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32GG_DK3750/examples/inttemp/SimplicityStudio/DK3750_inttemp.slsproj,../hardware/kit/EFM32GG_DK3750/examples/inttemp/arm/inttemp.uvprojx,../hardware/kit/EFM32GG_DK3750/examples/inttemp/iar/inttemp.eww"/>
    <properties key="core.boardCompatibility" value="brd3600a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/inttemp.c"/>
  </descriptors>
  <descriptors label="DK3750_joystick" description="&lt;h1&gt;&lt;b&gt;Kit joystick control example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use EFM32 CMSIS and the emlib peripheral library to&#xD;&#xA;demonstrate the joystick control API of the development kit. Please note that&#xD;&#xA;you need to configure the AEM-state to &quot;EFM&quot; to be able to operate this&#xD;&#xA;example. The example also shows how to enable and use a GPIO interrupt.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32GG-DK3750 Development Kit&#xD;&#xA;Device: EFM32GG990F1024&#xD;&#xA;&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3750 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32GG_DK3750/examples/joystick/SimplicityStudio/DK3750_joystick.slsproj,../hardware/kit/EFM32GG_DK3750/examples/joystick/arm/joystick.uvprojx,../hardware/kit/EFM32GG_DK3750/examples/joystick/iar/joystick.eww"/>
    <properties key="core.boardCompatibility" value="brd3600a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/joystick.c"/>
  </descriptors>
  <descriptors label="DK3750_leuart" description="&lt;h1&gt;&lt;b&gt;LEUART/DMA in Energy mode2 output example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project reads and sends the data back to terminal using LEUART&#xD;&#xA;while staying in EM2.&#xD;&#xA;&#xD;&#xA;It uses the EFM32 CMSIS and emlib, to demonstrate the&#xD;&#xA;use of LEUART communication using DMA under the EM2 on the &#xD;&#xA;EFM32GG_DK3750 development kit.&#xD;&#xA;&#xD;&#xA;The LEUART is configured to be used with DMA under EM2.&#xD;&#xA;The terminal configuration is 9600-8-N-1.&#xD;&#xA;The DMA is configured to handle read and write data bytes from LEUART under EM2.&#xD;&#xA;&#xD;&#xA;Testing:&#xD;&#xA;1. Use the LEUART serial port header to connect the LEUART to your PC.&#xD;&#xA;2. Configure terminal to 9600-8-N-1.&#xD;&#xA;3. Enter characters from your keyboard and see if you receive the echo on the terminal.&#xD;&#xA;4. Check the average current consumption is equal to EM2 on Energy Profiler.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32GG_DK3750 Development Kit&#xD;&#xA;Device: EFM32GG990F1024&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3750 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32GG_DK3750/examples/leuart/SimplicityStudio/DK3750_leuart.slsproj,../hardware/kit/EFM32GG_DK3750/examples/leuart/arm/leuart.uvprojx,../hardware/kit/EFM32GG_DK3750/examples/leuart/iar/leuart.eww"/>
    <properties key="core.boardCompatibility" value="brd3600a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="DK3750_life" description="&lt;h1&gt;&lt;b&gt;Conway's game of life, TFT direct drive example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example demonstrate driving the EFM32GG_DK37850 kit's TFT-display &#xD;&#xA;from the EFM32 Giant Gecko.&#xD;&#xA;&#xD;&#xA;This example is driving the display in &quot;direct drive&quot; (or mode generic in &#xD;&#xA;SSD2119 terms). Using this mode, the framebuffer resides in the external&#xD;&#xA;PSRAM memory of the development kit. This can be accessed directly to &#xD;&#xA;modify the screen contents.&#xD;&#xA;&#xD;&#xA;This demo demonstrates the use of frame buffer control, and implements&#xD;&#xA;Conway's Game of Life, with triple buffering support. Triple buffering&#xD;&#xA;works the following way&#xD;&#xA;  &#xD;&#xA; We have 3 frame buffers, A, B and C.&#xD;&#xA;&#xD;&#xA; Buffer A, is currently being displayed on the screen&#xD;&#xA; Buffer B, is being updated with graphics&#xD;&#xA;&#xD;&#xA; When B is finished - B is set to be displayed on the next frame update&#xD;&#xA;                      C is set to be updated with new graphics&#xD;&#xA;&#xD;&#xA; When C is finished - C is set to be displayed on the next frame update &#xD;&#xA;                      A is set to be updated with new graphics&#xD;&#xA;&#xD;&#xA;WARNING:&#xD;&#xA;SD2119 driver and GLIB graphics library are not intended for production &#xD;&#xA;purposes, and are included here to illustrate TFT display driving only.&#xD;&#xA;&#xD;&#xA;These components are subject to changes in API/usage and there will be &#xD;&#xA;no effort to keep compatibility, or to support this software in any way.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32GG-DK3750 Development Kit&#xD;&#xA;Device: EFM32GG990F1024&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3750 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32GG_DK3750/examples/life/SimplicityStudio/DK3750_life.slsproj,../hardware/kit/EFM32GG_DK3750/examples/life/arm/life.uvprojx,../hardware/kit/EFM32GG_DK3750/examples/life/iar/life.eww"/>
    <properties key="core.boardCompatibility" value="brd3600a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/life.c"/>
  </descriptors>
  <descriptors label="DK3750_lines" description="&lt;h1&gt;&lt;b&gt;Lines TFT Direct Drive example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example demonstrate driving the EFM32GG_DK37850 kit's TFT-display&#xD;&#xA;from the EFM32 Giant Gecko in &quot;direct drive&quot; (or mode generic in&#xD;&#xA;SSD2119 terms). Using this mode, the framebuffer resides in the external&#xD;&#xA;PSRAM memory of the development kit. This can be accessed directly to&#xD;&#xA;modify the screen contents.&#xD;&#xA;&#xD;&#xA;In this mode, the display is configured for having 16-bits per pixel,&#xD;&#xA;RGB with 5-6-5 bits color components of each. The framebuffer is located&#xD;&#xA;at EBI bank 2, offset address 0x88000000. This demo simply draws some&#xD;&#xA;alternating, coloured lines over the entire display.&#xD;&#xA;&#xD;&#xA;WARNING:&#xD;&#xA;SD2119 driver and GLIB graphics library are not intended for production &#xD;&#xA;purposes, and are included here to illustrate TFT display driving only.&#xD;&#xA;&#xD;&#xA;These components are subject to changes in API/usage and there will be &#xD;&#xA;no effort to keep compatibility, or to support this software in any way.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32GG-DK3750 Development Kit&#xD;&#xA;Device: EFM32GG990F1024&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3750 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32GG_DK3750/examples/lines/SimplicityStudio/DK3750_lines.slsproj,../hardware/kit/EFM32GG_DK3750/examples/lines/arm/lines.uvprojx,../hardware/kit/EFM32GG_DK3750/examples/lines/iar/lines.eww"/>
    <properties key="core.boardCompatibility" value="brd3600a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/lines.c"/>
  </descriptors>
  <descriptors label="DK3750_mandel" description="&lt;h1&gt;&lt;b&gt;Mandelbrot image zoom example, using TFT direct drive.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example demonstrate driving the EFM32GG_DK37850 kit's TFT-display &#xD;&#xA;from the EFM32 Giant Gecko.&#xD;&#xA;&#xD;&#xA;The example is driving the display in &quot;direct drive&quot; (or mode generic in &#xD;&#xA;SSD2119 terms). Using this mode, the framebuffer resides in the external&#xD;&#xA;PSRAM memory of the development kit. This can be accessed directly to &#xD;&#xA;modify the screen contents.&#xD;&#xA;&#xD;&#xA;This example makes a simple mandelbrot fractal zoomer, using up most &#xD;&#xA;of the external 4MB PSRAM to store the various images, where the screens&#xD;&#xA;are being flipped around in the interrupt routine.&#xD;&#xA;&#xD;&#xA;WARNING:&#xD;&#xA;SD2119 driver and GLIB graphics library are not intended for production &#xD;&#xA;purposes, and are included here to illustrate TFT display driving only.&#xD;&#xA;These components are subject to changes in API/usage and there will be &#xD;&#xA;no effort to keep compatibility, or to support this software in any way.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32GG-DK3750 Development Kit&#xD;&#xA;Device: EFM32GG990F1024&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3750 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32GG_DK3750/examples/mandel/SimplicityStudio/DK3750_mandel.slsproj,../hardware/kit/EFM32GG_DK3750/examples/mandel/arm/mandel.uvprojx,../hardware/kit/EFM32GG_DK3750/examples/mandel/iar/mandel.eww"/>
    <properties key="core.boardCompatibility" value="brd3600a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/mandel.c"/>
  </descriptors>
  <descriptors label="DK3750_norflash" description="&lt;h1&gt;&lt;b&gt;Norflash example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example demonstrates use of the NORFLASH driver.&#xD;&#xA;&#xD;&#xA;Connect a terminal to the serialport of the DK (115200-N-8-1).&#xD;&#xA;Operations on the flash are initiated by issuing commands on the terminal.&#xD;&#xA;Command &quot;h&quot; will print a help screen on the terminal :&#xD;&#xA;&#xD;&#xA;    Available commands:&#xD;&#xA;        fi        : Show flash information&#xD;&#xA;        h         : Show this help&#xD;&#xA;        dump &lt;n&gt;  : Show first 16 bytes of sector &lt;n&gt;&#xD;&#xA;        dumps &lt;n&gt; : Show entire sector &lt;n&gt; content&#xD;&#xA;        blc &lt;n&gt;   : Blankcheck sector &lt;n&gt;&#xD;&#xA;        bld       : Blankcheck entire device&#xD;&#xA;        erase &lt;n&gt; : Erase sector &lt;n&gt;&#xD;&#xA;        eraseall  : Erase entire device&#xD;&#xA;        prog &lt;n&gt;  : Program first 16 bytes of sector &lt;n&gt; with byte pattern&#xD;&#xA;        exec &lt;n&gt;  : Execute &quot;blink&quot; from sector &lt;n&gt;&#xD;&#xA;        misc      : Test misc. NORFLASH API functions&#xD;&#xA;        rspeed    : Measure flash read speed&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32GG-DK3750 Development Kit&#xD;&#xA;Device: EFM32GG990F1024&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3750 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32GG_DK3750/examples/norflash/SimplicityStudio/DK3750_norflash.slsproj,../hardware/kit/EFM32GG_DK3750/examples/norflash/arm/norflash.uvprojx,../hardware/kit/EFM32GG_DK3750/examples/norflash/iar/norflash.eww"/>
    <properties key="core.boardCompatibility" value="brd3600a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="DK3750_peripherals" description="&lt;h1&gt;&lt;b&gt;Peripheral control example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use EFM32 CMSIS and the emlib peripheral library to&#xD;&#xA;demonstrate how to enable the access to various on-board peripherals. To&#xD;&#xA;reduce leakage current, the EFM32GG-DK3750 board has several analog switches, and to&#xD;&#xA;enable extended functionality there are multiplexers which need to be&#xD;&#xA;configured correctly for most of the kit peripherals.&#xD;&#xA;&#xD;&#xA;The on-board LEDs will light up according to the configured state of the&#xD;&#xA;peripherals.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32GG-DK3750 Development Kit&#xD;&#xA;Device: EFM32GG990F1024&#xD;&#xA;&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3750 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32GG_DK3750/examples/peripherals/SimplicityStudio/DK3750_peripherals.slsproj,../hardware/kit/EFM32GG_DK3750/examples/peripherals/arm/peripherals.uvprojx,../hardware/kit/EFM32GG_DK3750/examples/peripherals/iar/peripherals.eww"/>
    <properties key="core.boardCompatibility" value="brd3600a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/periph.c"/>
  </descriptors>
  <descriptors label="DK3750_powertest" description="&lt;h1&gt;&lt;b&gt;Power test example, running demonstration of energy modes.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use EFM32 CMSIS and the emlib peripheral library&#xD;&#xA;to demonstrate the use of the various Energy Modes available on the&#xD;&#xA;EFM32GG990F1024. When running this example, the EnergyAware Profiler tool&#xD;&#xA;in Simplicity Studio can be used to show the power consumption of each&#xD;&#xA;energy mode.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32GG-DK3750 Development Kit&#xD;&#xA;Device: EFM32GG990F1024&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3750 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32GG_DK3750/examples/powertest/SimplicityStudio/DK3750_powertest.slsproj,../hardware/kit/EFM32GG_DK3750/examples/powertest/arm/powertest.uvprojx,../hardware/kit/EFM32GG_DK3750/examples/powertest/iar/powertest.eww"/>
    <properties key="core.boardCompatibility" value="brd3600a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="DK3750_preamp" description="&lt;h1&gt;&lt;b&gt;Pre-amplifier example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS including DK BSP (board &#xD;&#xA;support package) and demonstrates the use of the ADC/DAC/DMA/PRS/TIMER&#xD;&#xA;in order to implement a very simple pre-amplifier.&#xD;&#xA;&#xD;&#xA;- Connect an audio source to the audio in connector&#xD;&#xA;  on the DVK, for instance an MP3 player.&#xD;&#xA;- Connect an active loudspeaker with built-in amplifier&#xD;&#xA;  to the audio out connector on the DVK.&#xD;&#xA;&#xD;&#xA;WARNING:&#xD;&#xA;--------&#xD;&#xA;Do not attach or use headphones with this example. Use small&#xD;&#xA;loadspeakers with built in amplification, ensuring volume is at an&#xD;&#xA;acceptable level. Exposure to loud noises from any source for extended&#xD;&#xA;periods of time may temporarily or permanently affect your hearing. The&#xD;&#xA;louder the volume sound level, the less time is required before your&#xD;&#xA;hearing could be affected. Hearing damage from loud noise is sometimes&#xD;&#xA;undetectable at first and can have a cumulative effect.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;The input signal is converted to digital and level&#xD;&#xA;adjusted by the EFM32 core before being converted back&#xD;&#xA;to analog.&#xD;&#xA;&#xD;&#xA;The output volume level is adjusted with kit pushbuttons PB1 and PB2.&#xD;&#xA;Output level is indicated by the 14 leftmost user LEDs.&#xD;&#xA;&#xD;&#xA;The example will clip the output signal if exceeding predefined&#xD;&#xA;level. This may occur due to too high input signal and/or to high&#xD;&#xA;volume setting. Clipping is indicated by the rightmost user LED.&#xD;&#xA;&#xD;&#xA;Push the AEM button on the kit until &quot;EFM&quot; shows in the upper right&#xD;&#xA;corner of the TFT display to activate PB1 and PB2 pushbuttons.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32GG-DK3750 Development Kit&#xD;&#xA;Device: EFM32GG990F1024&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3750 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32GG_DK3750/examples/preamp/SimplicityStudio/DK3750_preamp.slsproj,../hardware/kit/EFM32GG_DK3750/examples/preamp/arm/preamp.uvprojx,../hardware/kit/EFM32GG_DK3750/examples/preamp/iar/preamp.eww"/>
    <properties key="core.boardCompatibility" value="brd3600a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/preamp.c"/>
  </descriptors>
  <descriptors label="DK3750_radialmenu" description="&lt;h1&gt;&lt;b&gt;emWin example - radial menu demonstartion.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the emWin library.&#xD;&#xA;&#xD;&#xA;Control using touch panel or joystick.&#xD;&#xA;If touch panel misaligned, there is possibility to&#xD;&#xA;perform touch panel calibration, just press PB4.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32GG-DK3750 Development Kit&#xD;&#xA;Device: EFM32GG990F1024&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3750 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32GG_DK3750/examples/radialmenu/SimplicityStudio/DK3750_radialmenu.slsproj,../hardware/kit/EFM32GG_DK3750/examples/radialmenu/arm/radialmenu.uvprojx,../hardware/kit/EFM32GG_DK3750/examples/radialmenu/iar/radialmenu.eww"/>
    <properties key="core.boardCompatibility" value="brd3600a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/WM_RadialMenu.c"/>
  </descriptors>
  <descriptors label="DK3750_realtime" description="&lt;h1&gt;&lt;b&gt;emWin example - dynamic graph update.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the emWin library.&#xD;&#xA;&#xD;&#xA;Control using touch panel.&#xD;&#xA;On application startup there is possibility to&#xD;&#xA;perform touch panel calibration.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32GG-DK3750 Development Kit&#xD;&#xA;Device: EFM32GG990F1024&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3750 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32GG_DK3750/examples/realtime/SimplicityStudio/DK3750_realtime.slsproj,../hardware/kit/EFM32GG_DK3750/examples/realtime/arm/realtime.uvprojx,../hardware/kit/EFM32GG_DK3750/examples/realtime/iar/realtime.eww"/>
    <properties key="core.boardCompatibility" value="brd3600a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/VSCREEN_RealTime.c"/>
  </descriptors>
  <descriptors label="DK3750_reversi" description="&lt;h1&gt;&lt;b&gt;emWin example - reversi game.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the emWin library.&#xD;&#xA;&#xD;&#xA;Control using touch pad or joystick. If there&#xD;&#xA;is misalignment when using touch pad please&#xD;&#xA;do calibration select from menu:&#xD;&#xA;Options-&gt;Touch Panel calibration.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32GG-DK3750 Development Kit&#xD;&#xA;Device: EFM32GG990F1024&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3750 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32GG_DK3750/examples/reversi/SimplicityStudio/DK3750_reversi.slsproj,../hardware/kit/EFM32GG_DK3750/examples/reversi/arm/reversi.uvprojx,../hardware/kit/EFM32GG_DK3750/examples/reversi/iar/reversi.eww"/>
    <properties key="core.boardCompatibility" value="brd3600a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/reversi.c"/>
  </descriptors>
  <descriptors label="DK3750_reversi_mm" description="&lt;h1&gt;&lt;b&gt;emWin example - reversi game - energy efficient.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the emWin library maintaining&#xD;&#xA;low power consumption.&#xD;&#xA;&#xD;&#xA;TFT driver is controlled in so called &quot;Memory Map&quot;&#xD;&#xA;configuration, where internal RAM of TFT controller &#xD;&#xA;is used. There is no additional framebuffer needed&#xD;&#xA;so this example could be run in small RAM footprint &#xD;&#xA;systems. The code fits 128kB flash and uses less &#xD;&#xA;than 32kB RAM.&#xD;&#xA;&#xD;&#xA;In idle mode (where no user interaction is required)&#xD;&#xA;EM2 mode is enabled, allowing reducing power consumption&#xD;&#xA;down to 4uA.&#xD;&#xA;&#xD;&#xA;The game is controlled using touch pad or joystick. &#xD;&#xA;If there is misalignment when using touch pad please&#xD;&#xA;do calibration - from menu select:&#xD;&#xA;Options-&gt;Touch Panel calibration.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32GG-DK3750 Development Kit&#xD;&#xA;Device: EFM32GG990F1024&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3750 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32GG_DK3750/examples/reversi_mm/SimplicityStudio/DK3750_reversi_mm.slsproj,../hardware/kit/EFM32GG_DK3750/examples/reversi_mm/arm/reversi_mm.uvprojx,../hardware/kit/EFM32GG_DK3750/examples/reversi_mm/iar/reversi_mm.eww"/>
    <properties key="core.boardCompatibility" value="brd3600a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/reversi.c"/>
  </descriptors>
  <descriptors label="DK3750_rs232" description="&lt;h1&gt;&lt;b&gt;RS232/UART output example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS and emlib, to demonstrates the&#xD;&#xA;use of UART and LEUART communication on the EFM32GG-DK3750 development kit.&#xD;&#xA;&#xD;&#xA;For the default UART communication, serial configuration 115200-8-N-1 is used.&#xD;&#xA;If LEUART mode is configured by defining &quot;RETARGET_LEUART1&quot; as a build option,&#xD;&#xA;terminal configuration is 9600-8-N-1.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32GG-DK3750 Development Kit&#xD;&#xA;Device: EFM32GG990F1024&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3750 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32GG_DK3750/examples/rs232/SimplicityStudio/DK3750_rs232.slsproj,../hardware/kit/EFM32GG_DK3750/examples/rs232/arm/rs232.uvprojx,../hardware/kit/EFM32GG_DK3750/examples/rs232/iar/rs232.eww"/>
    <properties key="core.boardCompatibility" value="brd3600a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="DK3750_scroller" description="&lt;h1&gt;&lt;b&gt;Horizontal single pixel text scroller example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example demonstrate driving the EFM32GG_DK3750 kit's TFT-display&#xD;&#xA;from the EFM32 Giant Gecko.&#xD;&#xA;&#xD;&#xA;This example is driving the display in &quot;direct drive&quot; (or mode generic in&#xD;&#xA;SSD2119 terms). Using this mode, the framebuffer resides in the external&#xD;&#xA;PSRAM memory of the development kit. This can be accessed directly to&#xD;&#xA;modify the screen contents.&#xD;&#xA;&#xD;&#xA;This demo demonstrates the use of frame buffer control, and implements&#xD;&#xA;a horizontal scroller and shows the hardware assisted masking and&#xD;&#xA;blending capabilities.&#xD;&#xA;&#xD;&#xA;The horizontal scroller is implemented by using a large framebuffer,&#xD;&#xA;which is shifted right one pixel for each horizontal scan line, using&#xD;&#xA;the horizontal sync interrupt, and frame base sync trigger  capability&#xD;&#xA;of the Giant Gecko devices.&#xD;&#xA;&#xD;&#xA;The masking and blending is hardware assisted. The geckos being drawn&#xD;&#xA;on screen are using the same software procedure, only adding mask and&#xD;&#xA;enable configurations.&#xD;&#xA;&#xD;&#xA;WARNING:&#xD;&#xA;SD2119 driver and GLIB graphics library are not intended for production&#xD;&#xA;purposes, and are included here to illustrate TFT display driving only.&#xD;&#xA;This component are subject to changes in API/usage and there will be&#xD;&#xA;no effort to keep compatibility, or to support this software in any way.&#xD;&#xA;&#xD;&#xA;NOTE:&#xD;&#xA;This example is too large to be built with IDEs with 32KB size limits.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32GG-DK3750 Development Kit&#xD;&#xA;Device: EFM32GG990F1024&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3750 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32GG_DK3750/examples/scroller/SimplicityStudio/DK3750_scroller.slsproj,../hardware/kit/EFM32GG_DK3750/examples/scroller/arm/scroller.uvprojx,../hardware/kit/EFM32GG_DK3750/examples/scroller/iar/scroller.eww"/>
    <properties key="core.boardCompatibility" value="brd3600a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/scroller.c"/>
  </descriptors>
  <descriptors label="DK3750_slideshow" description="&lt;h1&gt;&lt;b&gt;Slideshow example using microSD.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example uses the FatFS library for accssing a filesystem on a &#xD;&#xA;microSD card. It will loop through the files present on the card. &#xD;&#xA;BMP files with a resolution less than the resolution of the screen&#xD;&#xA;(320x240) will be displayed on the TFT.&#xD;&#xA;&#xD;&#xA;The demo has two modes of operation. If a file called &quot;files.txt&quot; is &#xD;&#xA;present on the root of the microSD card, this file will be read. The&#xD;&#xA;BMP files will then be displayed in the order they are listed in the&#xD;&#xA;file.&#xD;&#xA;&#xD;&#xA;If this file is not present, all files on the root of tile SD card is &#xD;&#xA;looped through and displayed. If the BMP decoder cannot display a &#xD;&#xA;certain file, an error message is displayed.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;WARNING:&#xD;&#xA;SD2119 driver and GLIB graphics library are not intended for production &#xD;&#xA;purposes, and are included here to illustrate TFT display driving only.&#xD;&#xA;This components are subject to changes in API/usage and there will be &#xD;&#xA;no effort to keep compatibility, or to support this software in any way.&#xD;&#xA;&#xD;&#xA;NOTE:&#xD;&#xA;This example is too large to be built with IDEs with 32KB size limits.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32GG-DK3750 Development Kit&#xD;&#xA;Device: EFM32GG990F1024&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3750 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32GG_DK3750/examples/slideshow/SimplicityStudio/DK3750_slideshow.slsproj,../hardware/kit/EFM32GG_DK3750/examples/slideshow/arm/slideshow.uvprojx,../hardware/kit/EFM32GG_DK3750/examples/slideshow/iar/slideshow.eww"/>
    <properties key="core.boardCompatibility" value="brd3600a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/slideshow.c"/>
  </descriptors>
  <descriptors label="DK3750_temperature" description="&lt;h1&gt;&lt;b&gt;I2C temperature sensor example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS and emlib including DK BSP&#xD;&#xA;(board support package) to demonstrate the use of the I2C bus and &#xD;&#xA;the temperature sensor on the DK.&#xD;&#xA;&#xD;&#xA;Note: On some DK boards the temperature sensor is placed too close &#xD;&#xA;to components that generate significant heat. The sensor may therefore&#xD;&#xA;read a temperature 2-4 degrees Celsius higher than the ambient temperature.&#xD;&#xA;&#xD;&#xA;The following configuration is possible:&#xD;&#xA;&#xD;&#xA;- Joystick push toggles between Fahrenheit and Celsius display mode.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32GG-DK3750 Development Kit&#xD;&#xA;Device: EFM32GG990F1024&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3750 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32GG_DK3750/examples/temperature/SimplicityStudio/DK3750_temperature.slsproj,../hardware/kit/EFM32GG_DK3750/examples/temperature/arm/temperature.uvprojx,../hardware/kit/EFM32GG_DK3750/examples/temperature/iar/temperature.eww"/>
    <properties key="core.boardCompatibility" value="brd3600a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/temperature.c"/>
  </descriptors>
  <descriptors label="DK3750_tft" description="&lt;h1&gt;&lt;b&gt;TFT Addressed map coloured blocks example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS including emlib and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the kit's TFT-display from the EFM32 Giant Gecko.&#xD;&#xA;&#xD;&#xA;This example is driving the display in what is called &quot;address mapped&#xD;&#xA;mode&quot; (or mode 8080). Using this mode, the framebuffer resides in the&#xD;&#xA;memory of the SSD2119 controller chip.&#xD;&#xA;&#xD;&#xA;WARNING:&#xD;&#xA;SD2119 driver and GLIB graphics library are not intended for production&#xD;&#xA;purposes, and are included here to illustrate TFT display driving only.&#xD;&#xA;&#xD;&#xA;These components are subject to changes in API/usage and there will be&#xD;&#xA;no effort to keep compatibility, or to support this software in any way.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32GG-DK3750 Development Kit&#xD;&#xA;Device: EFM32GG990F1024&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3750 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32GG_DK3750/examples/tft/SimplicityStudio/DK3750_tft.slsproj,../hardware/kit/EFM32GG_DK3750/examples/tft/arm/tft.uvprojx,../hardware/kit/EFM32GG_DK3750/examples/tft/iar/tft.eww"/>
    <properties key="core.boardCompatibility" value="brd3600a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/tft.c"/>
  </descriptors>
  <descriptors label="DK3750_tftprintf" description="&lt;h1&gt;&lt;b&gt;Printf output on TFT-LCD.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS including emlib and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the kit's TFT-display from the EFM32 Giant Gecko. In this case the&#xD;&#xA;display is used as output from a regular printf in the application, as&#xD;&#xA;an alternative to the RS232 port.&#xD;&#xA;&#xD;&#xA;This example is driving the display in what is called &quot;address mapped&#xD;&#xA;mode&quot; (or mode 8080). Using this mode, the framebuffer resides in the&#xD;&#xA;memory of the SSD2119 controller chip of the URT TFT-LCD display.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32GG-DK3750 Development Kit&#xD;&#xA;Device: EFM32GG990F1024&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3750 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32GG_DK3750/examples/tftprintf/SimplicityStudio/DK3750_tftprintf.slsproj,../hardware/kit/EFM32GG_DK3750/examples/tftprintf/arm/tftprintf.uvprojx,../hardware/kit/EFM32GG_DK3750/examples/tftprintf/iar/tftprintf.eww"/>
    <properties key="core.boardCompatibility" value="brd3600a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/tftprintf.c"/>
  </descriptors>
  <descriptors label="DK3750_touch" description="&lt;h1&gt;&lt;b&gt;Touchscreen example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example demonstrate use of the resistive touchscreen on the&#xD;&#xA;EFM32GG_DK3750 kit's TFT-display.&#xD;&#xA;&#xD;&#xA;Touchscreen X and Y positions are obtained using the ADC. Two ADC readouts&#xD;&#xA;are performed, one for X position and one for Y position.&#xD;&#xA;&#xD;&#xA;The example allows freehand drawing and calibration. After starting the example&#xD;&#xA;make sure that the EFM32 control the display (use AEM button to toggle).&#xD;&#xA;&#xD;&#xA;The calibrations algorithm used is from an article in EETimes 5/31/2002 by&#xD;&#xA;Carlos E. Vidales.&#xD;&#xA;&#xD;&#xA;Initial touchscreen calibration is &quot;off&quot; on purpose to demonstrate that&#xD;&#xA;calibration takes effect.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32GG-DK3750 Development Kit&#xD;&#xA;Device: EFM32GG990F1024&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3750 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32GG_DK3750/examples/touch/SimplicityStudio/DK3750_touch.slsproj,../hardware/kit/EFM32GG_DK3750/examples/touch/arm/touch.uvprojx,../hardware/kit/EFM32GG_DK3750/examples/touch/iar/touch.eww"/>
    <properties key="core.boardCompatibility" value="brd3600a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="DK3750_ucos2" description="&lt;h1&gt;&lt;b&gt;uC/OS-II RTOS on EFM32 using example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This is a port of the uC/OS-II RTOS from Micrium Inc, http://www.micrium.com&#xD;&#xA;&#xD;&#xA;The port has been adapted by Silicon Labs for use with our Development&#xD;&#xA;Kit. It requires the standard EFM32 CMSIS package (including emlib).&#xD;&#xA;&#xD;&#xA;The example has three tasks:&#xD;&#xA; - Task1: LED blink task&#xD;&#xA; - Task2: Receives characters from serial port and posts message to Task3&#xD;&#xA; - Task3: Receives message from Task2 and writes it on TFT display&#xD;&#xA;&#xD;&#xA;Standard output is redirected to TFT display and standard input is UART1.&#xD;&#xA;&#xD;&#xA;uC/OS-II is provided in source form for FREE evaluation, for educational use&#xD;&#xA;or for peaceful research.&#xD;&#xA;&#xD;&#xA;If you plan on using uC/OS-II in a commercial product you need to contact&#xD;&#xA;Micrium to properly license its use in your product. We provide ALL the&#xD;&#xA;source code for your convenience and to help you experience uC/OS-II.&#xD;&#xA;The fact that the source is provided does NOT mean that you can use it without&#xD;&#xA;paying a licensing fee.&#xD;&#xA;&#xD;&#xA;For commercial use, contact Micrium, http://www.micrium.com for details.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32GG_DK3750 Starter Kit&#xD;&#xA;Device: EFM32GG990F1024&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3750 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32GG_DK3750/examples/ucos2_port/arm/ucos2.uvprojx,../hardware/kit/EFM32GG_DK3750/examples/ucos2_port/iar/ucos2.eww"/>
    <properties key="core.boardCompatibility" value="brd3600a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/app/app.c"/>
  </descriptors>
  <descriptors label="DK3750_ucos3" description="&lt;h1&gt;&lt;b&gt;uC/OS-III RTOS on EFM32 using example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This is a port of the uC/OS-III RTOS from Micrium Inc, http://www.micrium.com&#xD;&#xA;&#xD;&#xA;The port has been adapted by Silicon Labs for use with our Development Kit..&#xD;&#xA;It requires the standard EFM32 CMSIS package (including emlib).&#xD;&#xA;&#xD;&#xA;The example has three tasks:&#xD;&#xA; - Task1: LED blink task&#xD;&#xA; - Task2: Receives characters from serial port and posts message to Task3&#xD;&#xA; - Task3: Receives message from Task2 and writes it on TFT display&#xD;&#xA;&#xD;&#xA;Standard output is redirected to TFT display and standard input is UART1.&#xD;&#xA;&#xD;&#xA;uC/OS-III is provided in source form for FREE evaluation, for educational use&#xD;&#xA;or for peaceful research.&#xD;&#xA;&#xD;&#xA;If you plan on using uC/OS-III in a commercial product you need to contact&#xD;&#xA;Micrium to properly license its use in your product. We provide ALL the&#xD;&#xA;source code for your convenience and to help you experience uC/OS-III.&#xD;&#xA;The fact that the source is provided does NOT mean that you can use it without&#xD;&#xA;paying a licensing fee.&#xD;&#xA;&#xD;&#xA;For commercial use, contact Micrium, http://www.micrium.com for details.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32GG_DK3750 Starter Kit&#xD;&#xA;Device: EFM32GG990F1024&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3750 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32GG_DK3750/examples/ucos3_port/arm/ucos3.uvprojx,../hardware/kit/EFM32GG_DK3750/examples/ucos3_port/iar/ucos3.eww"/>
    <properties key="core.boardCompatibility" value="brd3600a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/app/app.c"/>
  </descriptors>
  <descriptors label="DK3750_usbdcdc" description="&lt;h1&gt;&lt;b&gt;USB CDC virtual COM port example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use the EFM32 USB Device protocol stack&#xD;&#xA;and implements an USB CDC based virtual COM port.&#xD;&#xA;&#xD;&#xA;UART1 on the DK is used as the physical COM port.&#xD;&#xA;Any data sent to the virtual CDC COM port is transmitted on UART1.&#xD;&#xA;Any data received on UART1 is transmitted to the virtual port.&#xD;&#xA;&#xD;&#xA;When connecting the mcu plugin boards USB port to a Windows host PC,&#xD;&#xA;the new hardware &quot;Wizard&quot; may or may not prompt you to provide a driver&#xD;&#xA;installation file (.inf file) depending on your Windows version.&#xD;&#xA;&#xD;&#xA;Manually direct Windows to look for drivers in the directory where you have&#xD;&#xA;unpacked your copy of the Silabs-CDC_Install.zip driver file.&#xD;&#xA;This can be done with the new device &quot;Wizard&quot; which might pop up after device&#xD;&#xA;insertion, or you can open &quot;Device Manager&quot;, left click on the new device and&#xD;&#xA;select &quot;Update Driver Software...&quot;.&#xD;&#xA;&#xD;&#xA;Some versions of Windows wont allow you to install unsigned drivers. If you&#xD;&#xA;suspect this, reboot the PC into &quot;Disable Driver Signature Enforcement&quot; mode.&#xD;&#xA;Win7:&#xD;&#xA;Repeatedly push F8 during boot until the boot menu appears.&#xD;&#xA;Select the &quot;Disable Driver Signature Enforcement&quot; option.&#xD;&#xA;Win10:&#xD;&#xA;Start Menu-&gt;Power button-&gt;Hold Shift key down and select Restart.&#xD;&#xA;When computer has restarted into the options menu, select:&#xD;&#xA;Troubleshoot-&gt;Advanced Option-&gt;Startup Settings-&gt;Restart-&gt;Disable driver signature enforcement&#xD;&#xA;You should now be able to install an unsigned driver.&#xD;&#xA;&#xD;&#xA;When a driver is succesfully installed, the device will be listed as a &quot;Ports&quot;&#xD;&#xA;device in Device Manager, double-click it, select the &quot;Port Settings&quot; tab and&#xD;&#xA;maybe the &quot;Advanced...&quot; button to set serial port properties.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32GG-DK3750 Development Kit&#xD;&#xA;Device: EFM32GG990F1024&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3750 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32GG_DK3750/examples/usbdcdc/SimplicityStudio/DK3750_usbdcdc.slsproj,../hardware/kit/EFM32GG_DK3750/examples/usbdcdc/arm/usbdcdc.uvprojx,../hardware/kit/EFM32GG_DK3750/examples/usbdcdc/iar/usbdcdc.eww"/>
    <properties key="core.boardCompatibility" value="brd3600a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="DK3750_usbdcomposite" description="&lt;h1&gt;&lt;b&gt;USB Composite Device example, MSD + CDC + Vendor unique functions.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use the EFM32 USB Device protocol stack&#xD;&#xA;to implement a composite USB device with tree functions:&#xD;&#xA;&#xD;&#xA; - Mass storage class device (MSD) implementing a 4MB disk&#xD;&#xA; - Communication device class (CDC) implementing a USB&lt;-&gt;UART bridge&#xD;&#xA; - Vendor Unique Device similar to the usbdvud example (control DK leds).&#xD;&#xA;&#xD;&#xA;As the CDC function has two interface, the CDC function use an Interface&#xD;&#xA;Association Descriptor (IAD). A composite device which use IAD's must be&#xD;&#xA;implemented using bDeviceClass=0xEF, bDeviceSubClass=2 and bDeviceProtocol=1.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;The vendor unique function (VUD).&#xD;&#xA;=================================&#xD;&#xA;Toggles user LED's 0-4 when receiving vendor unique class setup commands.&#xD;&#xA;Intended to be used together with the &quot;libusb&quot; device driver, and host&#xD;&#xA;application EFM32-LedApp.exe (a Windows application).&#xD;&#xA;You will find libusb and EFM32-LedApp.exe in the &quot;host&quot; folder of the usbdvud&#xD;&#xA;example. Check EFM32_Vendor_Unique_Device.inf to see how both the usbdvud&#xD;&#xA;example VID_10C4&amp;PID_0001 and this composite example VID_10C4&amp;PID_0008&amp;MI_00&#xD;&#xA;are specified.&#xD;&#xA;&#xD;&#xA;The CDC COM port function.&#xD;&#xA;==========================&#xD;&#xA;Implements an USB CDC based virtual COM port. UART1 on the DK is used as the&#xD;&#xA;physical COM port. Any data sent to the virtual CDC COM port is transmitted on&#xD;&#xA;UART1. Any data received on UART1 is transmitted to the virtual port.&#xD;&#xA;&#xD;&#xA;USB Mass Storage Device function.&#xD;&#xA;=================================&#xD;&#xA;Implements a Mass Storage Class device (MSD) with 4MByte in external PSRAM.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Windows driver installation.&#xD;&#xA;============================&#xD;&#xA;The first time the composite USB device is connected to the host, Windows must&#xD;&#xA;install drivers for the VUD and CDC functions.&#xD;&#xA;&#xD;&#xA;To control the VUD function with EFM32-LedApp.exe you need to install &quot;libusb&quot;&#xD;&#xA;device driver. Manually direct Windows to look for this driver in the &quot;host&quot;&#xD;&#xA;folder of the usbdvud example.&#xD;&#xA;This can be done with the new device &quot;Wizard&quot; which might pop up after device&#xD;&#xA;insertion, or you can open &quot;Device Manager&quot;, left click on one of functions&#xD;&#xA;of the new composite device (marked with yellow exclamation mark) and&#xD;&#xA;select &quot;Update Driver Software...&quot;.&#xD;&#xA;After libusb is installed you can start EFM32-LedApp.exe to control leds on&#xD;&#xA;the DK.&#xD;&#xA;&#xD;&#xA;Similarly for the CDC function, direct Windows to look for a driver in the&#xD;&#xA;folder where you have unpacked your copy of the Silabs-CDC_Install.zip driver&#xD;&#xA;file.&#xD;&#xA;This can be done with the new device &quot;Wizard&quot; which might pop up after device&#xD;&#xA;insertion, or you can open &quot;Device Manager&quot;, left click on the new device and&#xD;&#xA;select &quot;Update Driver Software...&quot;. Note how the .inf file specifies interface&#xD;&#xA;number 2, VID_10C4&amp;PID_0008&amp;MI_02.&#xD;&#xA;When the serial port driver is succesfully installed, the device will be listed&#xD;&#xA;as a &quot;Ports&quot; device in Device Manager, double-click it, select the&#xD;&#xA;&quot;Port Settings&quot; tab and maybe the &quot;Advanced...&quot; button to set serial port&#xD;&#xA;properties.&#xD;&#xA;&#xD;&#xA;Some versions of Windows wont allow you to install unsigned drivers. If you&#xD;&#xA;suspect this, reboot the PC into &quot;Disable Driver Signature Enforcement&quot; mode.&#xD;&#xA;Win7:&#xD;&#xA;Repeatedly push F8 during boot until the boot menu appears.&#xD;&#xA;Select the &quot;Disable Driver Signature Enforcement&quot; option.&#xD;&#xA;Win10:&#xD;&#xA;Start Menu-&gt;Power button-&gt;Hold Shift key down and select Restart.&#xD;&#xA;When computer has restarted into the options menu, select:&#xD;&#xA;Troubleshoot-&gt;Advanced Option-&gt;Startup Settings-&gt;Restart-&gt;Disable driver signature enforcement&#xD;&#xA;You should now be able to install an unsigned driver.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32GG-DK3750 Development Kit&#xD;&#xA;Device: EFM32GG990F1024&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3750 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32GG_DK3750/examples/usbdcomposite/SimplicityStudio/DK3750_usbdcomposite.slsproj,../hardware/kit/EFM32GG_DK3750/examples/usbdcomposite/arm/usbdcomposite.uvprojx,../hardware/kit/EFM32GG_DK3750/examples/usbdcomposite/iar/usbdcomposite.eww"/>
    <properties key="core.boardCompatibility" value="brd3600a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="DK3750_usbdheadphone" description="&lt;h1&gt;&lt;b&gt;USB audio headphone device example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example implements a USB connected headphone device. The device enumerates&#xD;&#xA;as a device supporting stereo 16bit PCM encoded audio at a samplerate of&#xD;&#xA;44.1 kHz (the standard audio CD rate). The samples are sent directly to the I2S&#xD;&#xA;DAC on the mainboard and audio is available on the &quot;AUDIO OUT&quot; jack.&#xD;&#xA;&#xD;&#xA;The USB device is modelled as the HT1 (Headphone Topology 1) described in&#xD;&#xA;USB-IF document &quot;Universal Serial Bus Audio Device Class Specification for&#xD;&#xA;Basic Audio Devices&quot;, Release 1.0, November 24th, 2009.&#xD;&#xA;&#xD;&#xA;The I2S DAC is fed at a samplerate of 44.118 kHz, so additional audio samples&#xD;&#xA;are occasionally inserted to ensure that the data streams (USB and DAC) stay&#xD;&#xA;synchronized.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32GG-DK3750 Development Kit&#xD;&#xA;Device: EFM32GG990F1024&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3750 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32GG_DK3750/examples/usbdheadphone/SimplicityStudio/DK3750_usbdheadphone.slsproj,../hardware/kit/EFM32GG_DK3750/examples/usbdheadphone/arm/usbdheadphone.uvprojx,../hardware/kit/EFM32GG_DK3750/examples/usbdheadphone/iar/usbdheadphone.eww"/>
    <properties key="core.boardCompatibility" value="brd3600a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="DK3750_usbdhidkbd" description="&lt;h1&gt;&lt;b&gt;USB HID keyboard example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use the EFM32 USB Device protocol stack&#xD;&#xA;and implements an USB HID class keyboard device (one button !).&#xD;&#xA;&#xD;&#xA;SW1 is the keyboard button. Pressing this button will succesively write&#xD;&#xA;&quot;Silicon Labs - &quot;.&#xD;&#xA;&#xD;&#xA;User LED's 0-3 is used as a &quot;heart-beat&quot; counting pattern. The count rate&#xD;&#xA;reflects the scan rate of the onebutton keypad.&#xD;&#xA;&#xD;&#xA;User LED 8 reflects hosts NumLock status.&#xD;&#xA;User LED 9 reflects hosts CapsLock status.&#xD;&#xA;User LED 10 reflects hosts ScrollLock status.&#xD;&#xA;User LED 15 reflects the status of the keyboard pushbutton.&#xD;&#xA;&#xD;&#xA;It is also possible to make a buspowered device:&#xD;&#xA; - Enable #define BUSPOWERED in usbconfig.h&#xD;&#xA; - Program the MCU plugin module, remove it fron the DK.&#xD;&#xA; - Connect a pushbutton from PORTE bit 0 to GND (optional keyboard button).&#xD;&#xA; - Connect &quot;USB VREGO&quot; and &quot;VMCU&quot; together.&#xD;&#xA; - Optionally connect &quot;USB VREGO&quot; and &quot;3.3V&quot; together to enable an activity LED&#xD;&#xA;   (the blue LED labeled &quot;STATUS).&#xD;&#xA;   Note: This will cause the device suspend current to exceed 2.5 mA.&#xD;&#xA;&#xD;&#xA; - NOTE !!! Do NOT insert the plugin module back on the DK with &quot;USB VREGO&quot;,&#xD;&#xA;   &quot;3.3V&quot; and &quot;VMCU&quot; connected together !!!.&#xD;&#xA;&#xD;&#xA;This example will output useful info on the DK serial port (115.200 8N1).&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32GG-DK3750 Development Kit&#xD;&#xA;Device: EFM32GG990F1024&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3750 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32GG_DK3750/examples/usbdhidkbd/SimplicityStudio/DK3750_usbdhidkbd.slsproj,../hardware/kit/EFM32GG_DK3750/examples/usbdhidkbd/arm/usbdhidkbd.uvprojx,../hardware/kit/EFM32GG_DK3750/examples/usbdhidkbd/iar/usbdhidkbd.eww"/>
    <properties key="core.boardCompatibility" value="brd3600a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="DK3750_usbdmicrophone" description="&lt;h1&gt;&lt;b&gt;USB audio microphone device example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example implements a USB connected microphone device. The device enumerates&#xD;&#xA;as a device supporting stereo 16bit PCM encoded audio at a samplerate of&#xD;&#xA;44.1 kHz (the standard audio CD rate). The samples are aquired using the ADC&#xD;&#xA;which is routed to the &quot;AUDIO IN&quot; jack on the mainboard. The example can be&#xD;&#xA;compiled in &quot;tone generator&quot; mode, where the device produce a 1kHz sine.&#xD;&#xA;&#xD;&#xA;The USB device is modelled as the MT (Microphone Topology) described in&#xD;&#xA;USB-IF document &quot;Universal Serial Bus Audio Device Class Specification for&#xD;&#xA;Basic Audio Devices&quot;, Release 1.0, November 24th, 2009.&#xD;&#xA;&#xD;&#xA;The ADC is sampling at a rate of 44.118 kHz, so additional audio samples&#xD;&#xA;are occasionally inserted or removed from the data sent to host to ensure that&#xD;&#xA;the data streams (USB and ADC) stay synchronized. This gives reasonable audio&#xD;&#xA;quality when listening to music, but produce noticeable artifacts when&#xD;&#xA;listening to a pure sinewave or when the example is compiled in &quot;tone generator&quot;&#xD;&#xA;mode.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32GG-DK3750 Development Kit&#xD;&#xA;Device: EFM32GG990F1024&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3750 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32GG_DK3750/examples/usbdmicrophone/SimplicityStudio/DK3750_usbdmicrophone.slsproj,../hardware/kit/EFM32GG_DK3750/examples/usbdmicrophone/arm/usbdmicrophone.uvprojx,../hardware/kit/EFM32GG_DK3750/examples/usbdmicrophone/iar/usbdmicrophone.eww"/>
    <properties key="core.boardCompatibility" value="brd3600a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="DK3750_usbdmsd" description="&lt;h1&gt;&lt;b&gt;USB Mass Storage Device example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use the EFM32 USB Device protocol stack&#xD;&#xA;to implement a device Mass Storage Class device (MSD).&#xD;&#xA;&#xD;&#xA;The example provides five different MSD types.&#xD;&#xA;&#xD;&#xA; - A 96KByte &quot;disk&quot; in internal SRAM&#xD;&#xA; - A 4MByte &quot;disk&quot; in external PSRAM&#xD;&#xA; - A disk implemented with a micro SD-Card&#xD;&#xA; - An internal FLASH &quot;disk&quot; (disksize is internal FLASH size minus 64K)&#xD;&#xA; - A 16MB external NORFLASH &quot;disk&quot;&#xD;&#xA;&#xD;&#xA;Select mediatype in msddmedia.h (#define MSD_MEDIA)&#xD;&#xA;&#xD;&#xA;It is also possible to make a buspowered device:&#xD;&#xA; - Enable #define BUSPOWERED in usbconfig.h (only valid for SRAM and FLASH media)&#xD;&#xA; - Program the MCU plugin module, remove it from the DK.&#xD;&#xA; - Connect &quot;USB VREGO&quot; and &quot;VMCU&quot; together.&#xD;&#xA; - Optionally connect &quot;USB VREGO&quot; and &quot;3.3V&quot; together to enable an activity LED&#xD;&#xA;   (the blue LED labeled &quot;STATUS&quot;).&#xD;&#xA;   Note: This will cause the device suspend current to exceed 2.5 mA.&#xD;&#xA;&#xD;&#xA; - NOTE !!! Do NOT insert the plugin module back on the DK with &quot;USB VREGO&quot;,&#xD;&#xA;   &quot;3.3V&quot; and &quot;VMCU&quot; connected together !!!.&#xD;&#xA;&#xD;&#xA;The example will output some info on the DK serial port (115.200 8N1).&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32GG-DK3750 Development Kit&#xD;&#xA;Device: EFM32GG990F1024&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3750 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32GG_DK3750/examples/usbdmsd/SimplicityStudio/DK3750_usbdmsd.slsproj,../hardware/kit/EFM32GG_DK3750/examples/usbdmsd/arm/usbdmsd.uvprojx,../hardware/kit/EFM32GG_DK3750/examples/usbdmsd/iar/usbdmsd.eww"/>
    <properties key="core.boardCompatibility" value="brd3600a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="DK3750_usbdtouch" description="&lt;h1&gt;&lt;b&gt;USB Bitmap transfer using USB drive functionality.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example demonstrate use several functionalities:&#xD;&#xA;1. Creation of virtual drive in system with FAT FS,&#xD;&#xA;2. Mounting the drive on PC and file transfer,&#xD;&#xA;3. Bitmap file creation based on TFT frame buffer content,&#xD;&#xA;4. Resistive touch panel interaction.&#xD;&#xA;&#xD;&#xA;On system startup initial drive is created and &#xD;&#xA;formatted using FAT FS then simple readme.txt file &#xD;&#xA;is put on file system. Every time user press PB4 key&#xD;&#xA;new file, containing TFT frame buffer in bitmap format&#xD;&#xA;is added. All files could be retrieved after connecting&#xD;&#xA;board to PC by means of USB. For this connection use&#xD;&#xA;small USB socket located on Giant Gecko CPU board, not&#xD;&#xA;the big one on development kit.&#xD;&#xA;&#xD;&#xA;If new files doesn't appear on drive after pressing PB4,&#xD;&#xA;try to reconnect the board to PC.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32GG-DK3750 Development Kit&#xD;&#xA;Device: EFM32GG990F1024&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3750 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32GG_DK3750/examples/usbdtouch/SimplicityStudio/DK3750_usbdtouch.slsproj,../hardware/kit/EFM32GG_DK3750/examples/usbdtouch/arm/usbdtouch.uvprojx,../hardware/kit/EFM32GG_DK3750/examples/usbdtouch/iar/usbdtouch.eww"/>
    <properties key="core.boardCompatibility" value="brd3600a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="DK3750_usbdvud" description="&lt;h1&gt;&lt;b&gt;USB Vendor Unique Device example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use the EFM32 USB Device protocol stack&#xD;&#xA;and implements an USB Vendor Unique Device.&#xD;&#xA;&#xD;&#xA;The example will toggle User LED's 0-4 when receiving vendor unique class&#xD;&#xA;setup commands.&#xD;&#xA;&#xD;&#xA;This example is intended to be used together with the &quot;libusb&quot; device driver,&#xD;&#xA;and host application EFM32-LedApp.exe (a Windows application).&#xD;&#xA;&#xD;&#xA;The first time the USB device is connected to the host, you must tell the host&#xD;&#xA;OS to install the &quot;libusb&quot; device driver.&#xD;&#xA;&#xD;&#xA;On Windows, you can follow this procedure:&#xD;&#xA;Insert the device, and manually direct Windows to look for drivers in the&#xD;&#xA;directory where you have your copy of the &quot;EFM32_Vendor_Unique_Device.inf&quot; file.&#xD;&#xA;This can be done with the new device &quot;Wizard&quot; which might pop up after device&#xD;&#xA;insertion, or you can open &quot;Device Manager&quot;, left click on the new device and&#xD;&#xA;select &quot;Update Driver Software...&quot;.&#xD;&#xA;&#xD;&#xA;Some versions of Windows wont allow you to install unsigned drivers. If you&#xD;&#xA;suspect this, reboot the PC into &quot;Disable Driver Signature Enforcement&quot; mode.&#xD;&#xA;Win7:&#xD;&#xA;Repeatedly push F8 during boot until the boot menu appears.&#xD;&#xA;Select the &quot;Disable Driver Signature Enforcement&quot; option.&#xD;&#xA;Win10:&#xD;&#xA;Start Menu-&gt;Power button-&gt;Hold Shift key down and select Restart.&#xD;&#xA;When computer has restarted into the options menu, select:&#xD;&#xA;Troubleshoot-&gt;Advanced Option-&gt;Startup Settings-&gt;Restart-&gt;Disable driver signature enforcement&#xD;&#xA;You should now be able to install an unsigned driver.&#xD;&#xA;&#xD;&#xA;After libusb is installed, start EFM32-LedApp.exe.&#xD;&#xA;&#xD;&#xA;This example will output some info on the DK serial port (115.200 8N1).&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32GG-DK3750 Development Kit&#xD;&#xA;Device: EFM32GG990F1024&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3750 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32GG_DK3750/examples/usbdvud/SimplicityStudio/DK3750_usbdvud.slsproj,../hardware/kit/EFM32GG_DK3750/examples/usbdvud/arm/usbdvud.uvprojx,../hardware/kit/EFM32GG_DK3750/examples/usbdvud/iar/usbdvud.eww"/>
    <properties key="core.boardCompatibility" value="brd3600a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="DK3750_usbhenum" description="&lt;h1&gt;&lt;b&gt;USB device enumerator example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the USB host stack to implement&#xD;&#xA;a simple device enumerator.&#xD;&#xA;&#xD;&#xA;Connect a terminal to the DK UART port (115.200, N, 8, 1) and&#xD;&#xA;then connect any USB device to the USB port of the MCU plug-in module.&#xD;&#xA;&#xD;&#xA;Info about the VID/PID and some string descriptors will be output on&#xD;&#xA;the serial port. The connected USB device will not be configured.&#xD;&#xA;&#xD;&#xA;Note that USB disk drives may fail, as some of them draw too much current&#xD;&#xA;when attached.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32GG-DK3750 Development Kit&#xD;&#xA;Device: EFM32GG990F1024&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3750 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32GG_DK3750/examples/usbhenum/SimplicityStudio/DK3750_usbhenum.slsproj,../hardware/kit/EFM32GG_DK3750/examples/usbhenum/arm/usbhenum.uvprojx,../hardware/kit/EFM32GG_DK3750/examples/usbhenum/iar/usbhenum.eww"/>
    <properties key="core.boardCompatibility" value="brd3600a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="DK3750_usbhhidkbd" description="&lt;h1&gt;&lt;b&gt;USB Host HID keyboard example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the USB host stack to implement&#xD;&#xA;support for USB HID Keyboards.&#xD;&#xA;&#xD;&#xA;Connect a terminal to the DK UART port (115.200, N, 8, 1) and&#xD;&#xA;then connect a USB keyboard to the USB port of the MCU plug-in module.&#xD;&#xA;&#xD;&#xA;The example will flash keyboard leds (numlock, scrollock and capslock)&#xD;&#xA;with a binary counting pattern.&#xD;&#xA;&#xD;&#xA;Keyboard entry will be echoed on the UART serial port.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32GG-DK3750 Development Kit&#xD;&#xA;Device: EFM32GG990F1024&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3750 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32GG_DK3750/examples/usbhhidkbd/SimplicityStudio/DK3750_usbhhidkbd.slsproj,../hardware/kit/EFM32GG_DK3750/examples/usbhhidkbd/arm/usbhhidkbd.uvprojx,../hardware/kit/EFM32GG_DK3750/examples/usbhhidkbd/iar/usbhhidkbd.eww"/>
    <properties key="core.boardCompatibility" value="brd3600a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="DK3750_usbhmsdfatcon" description="&lt;h1&gt;&lt;b&gt;USB Host mass storage device example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the USB host and the MSD modules in the&#xD;&#xA;drivers directory to implement support for Mass Storage Device's (MSD).&#xD;&#xA;&#xD;&#xA;Connect a terminal to the DK UART port (115.200, N, 8, 1) and&#xD;&#xA;then connect a memory stick the USB port of the MCU plug-in module.&#xD;&#xA;&#xD;&#xA;Info about the MSD device will be output on the serial port. When a MSD&#xD;&#xA;device is connected and detected as a valid, you can issue commands at the&#xD;&#xA;serial port console to list all files on the device (ls), type the content&#xD;&#xA;of a file (cat) and append test to a file (echo).&#xD;&#xA;&#xD;&#xA;Note that USB disk drives may fail, as some of them draw too much current&#xD;&#xA;when attached.&#xD;&#xA;&#xD;&#xA;NOTE:&#xD;&#xA;This example is too large to be built with IDEs with 32KB size limits.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32GG-DK3750 Development Kit&#xD;&#xA;Device: EFM32GG990F1024&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3750 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32GG_DK3750/examples/usbhmsdfatcon/SimplicityStudio/DK3750_usbhmsdfatcon.slsproj,../hardware/kit/EFM32GG_DK3750/examples/usbhmsdfatcon/arm/usbhmsdfatcon.uvprojx,../hardware/kit/EFM32GG_DK3750/examples/usbhmsdfatcon/iar/usbhmsdfatcon.eww"/>
    <properties key="core.boardCompatibility" value="brd3600a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="DK3750_wavplayer" description="&lt;h1&gt;&lt;b&gt;Audio .WAV format player.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS including DK BSP (board support&#xD;&#xA;package) and demonstrates how to play a wav file from the SD-card.&#xD;&#xA;&#xD;&#xA;The wav file must be named &quot;sweet1.wav&quot; and must be encoded with 16-bit&#xD;&#xA;PCM audio sampling.&#xD;&#xA;&#xD;&#xA;The output volume level is adjusted with kit pushbuttons PB1 and PB2.&#xD;&#xA;Output level is indicated by the 14 leftmost user LEDs.&#xD;&#xA;Push the AEM button on the kit until &quot;EFM&quot; shows in the upper right&#xD;&#xA;corner of the TFT display to activate PB1 and PB2 pushbuttons.&#xD;&#xA;&#xD;&#xA;The example can be build for using the I2S dac or onchip DAC0.&#xD;&#xA;Look for #define USE_I2S near top of file wavplayer.c&#xD;&#xA;&#xD;&#xA;It sets up access to DVK registers, and supports fat-filesystem on the&#xD;&#xA;sd-card.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32GG-DK3750 Development Kit&#xD;&#xA;Device: EFM32GG990F1024&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3750 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32GG_DK3750/examples/wavplayer/SimplicityStudio/DK3750_wavplayer.slsproj,../hardware/kit/EFM32GG_DK3750/examples/wavplayer/arm/wavplayer.uvprojx,../hardware/kit/EFM32GG_DK3750/examples/wavplayer/iar/wavplayer.eww"/>
    <properties key="core.boardCompatibility" value="brd3600a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/wavplayer.c"/>
  </descriptors>
  <descriptors label="DK3750_webserver" description="&lt;h1&gt;&lt;b&gt;Webserver example&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;==================&#xD;&#xA;&#xD;&#xA;This example shows how to use the EFM32GG-DK3750 to run a http server with a&#xD;&#xA;static web page. This example is using the lwip network stack to provide the&#xD;&#xA;necessary protocol implementations and it's using the ksz8851snl ethernet&#xD;&#xA;controller on the development kit to send and receive packets.&#xD;&#xA;&#xD;&#xA;Web page&#xD;&#xA;=========&#xD;&#xA;&#xD;&#xA;To view the static web page open your browser to http://&lt;dk-ip&gt;/ .&#xD;&#xA;&#xD;&#xA;You can find the source code for the static web page under the html directory.&#xD;&#xA;These source files are converted into the fsdata_custom.c file that the lwip&#xD;&#xA;http module knows how to read. This conversion is done by the makefsdata tool.&#xD;&#xA;&#xD;&#xA;To customize your own web pages, you can use the makefsdata tool to generate&#xD;&#xA;your own fsdata_custom.c file. The makefsdata tool is provided as part of lwip,&#xD;&#xA;and you can find the C source file for it in the lwip-&#xD;&#xA;contrib/apps/httpserver_raw/makefsdata folder (Don't use the makefsdata perl&#xD;&#xA;script, it is outdated). This is an example of how you can generate the&#xD;&#xA;fsdata_custom.c file using makefsdata.exe.&#xD;&#xA;&#xD;&#xA;makefsdata.exe html -l1 -f:fsdata_custom.c&#xD;&#xA;&#xD;&#xA;Output&#xD;&#xA;=======&#xD;&#xA;&#xD;&#xA;When a network interface is up and running the IP address of the server is&#xD;&#xA;displayed on the LCD display together with rx/tx packet statistics. If you want&#xD;&#xA;to view the lwip trace output you can open a serial connection to the&#xD;&#xA;development kit using baud rate 115200.&#xD;&#xA;&#xD;&#xA;IP Configuration&#xD;&#xA;=================&#xD;&#xA;&#xD;&#xA;By default this example is configured to use DHCP to fetch an ip address. If you&#xD;&#xA;want to use static ip address instead then follow these steps.&#xD;&#xA;&#xD;&#xA;1. open lwipopts.h&#xD;&#xA;2. edit the LWIP_DHCP option to be&#xD;&#xA;&#xD;&#xA;#define LWIP_DHCP                       0&#xD;&#xA;&#xD;&#xA;3. edit the STATIC_* options to match your desired ip address, subnet mask,&#xD;&#xA;default gateway. This is an example of how to configure these static ip&#xD;&#xA;addresses.&#xD;&#xA;&#xD;&#xA;ip: 192.168.0.12&#xD;&#xA;sn: 255.255.255.0&#xD;&#xA;gw: 192.168.0.1&#xD;&#xA;&#xD;&#xA;#define STATIC_IPADDR0                  192&#xD;&#xA;#define STATIC_IPADDR1                  168&#xD;&#xA;#define STATIC_IPADDR2                  0&#xD;&#xA;#define STATIC_IPADDR3                  12&#xD;&#xA;&#xD;&#xA;#define STATIC_NET_MASK0                255&#xD;&#xA;#define STATIC_NET_MASK1                255&#xD;&#xA;#define STATIC_NET_MASK2                255&#xD;&#xA;#define STATIC_NET_MASK3                0&#xD;&#xA;&#xD;&#xA;#define STATIC_GW_IPADDR0               192&#xD;&#xA;#define STATIC_GW_IPADDR1               168&#xD;&#xA;#define STATIC_GW_IPADDR2               0&#xD;&#xA;#define STATIC_GW_IPADDR3               1&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;ksz8851snl interface&#xD;&#xA;=====================&#xD;&#xA;&#xD;&#xA;The ksz8851snl ethernet controller is using an spi interface, and this is&#xD;&#xA;connected to one of the EFM32 USARTs. See the kit user-manual for the actual&#xD;&#xA;pins. This example also shows how to use the provided ksz8851snl drivers to&#xD;&#xA;operate the ethernet controller. These are the main files that are used when&#xD;&#xA;interfacing with the ksz8851snl.&#xD;&#xA;&#xD;&#xA;drivers/ksz8851snl.c&#xD;&#xA;&#xD;&#xA;This is the hardware abstraction layer for the ksz8851snl. This file contains&#xD;&#xA;functionality like enable and initialize the chip.&#xD;&#xA;&#xD;&#xA;drivers/ksz8851snl_spi.c&#xD;&#xA;&#xD;&#xA;This contains the spi communication functions for the ksz8851snl. We provide the&#xD;&#xA;low level operations like read/write register as well as read/write fifo in this&#xD;&#xA;file.&#xD;&#xA;&#xD;&#xA;&lt;lwip-contrib&gt;/ports/efm32/ksz8851snl_driver.c&#xD;&#xA;&#xD;&#xA;This is the lwip driver that interfaces between the lwip stack and our&#xD;&#xA;ksz8851snl.c hardware abstraction layer.&#xD;&#xA;&#xD;&#xA;Interrupt Handling&#xD;&#xA;===================&#xD;&#xA;&#xD;&#xA;The ksz8851snl has an interrupt pin that is routed through the board controller&#xD;&#xA;and into a GPIO pin on the EFM32. When the ethernet interrupt is enabled. This&#xD;&#xA;interrupt pin is active low. The ksz8851snl will trigger an interrupt if the&#xD;&#xA;link status has changed or if an ethernet frame has been received or&#xD;&#xA;transmitted. In this example the GPIO is configured to trigger an interrupt on a&#xD;&#xA;falling edge of the ethernet interrupt pin.&#xD;&#xA;&#xD;&#xA;The interrupts of the ksz8851snl are not serviced directly from the GPIO&#xD;&#xA;interrupt handler. What we do instead is to signal to the application that an&#xD;&#xA;interrupt is pending and let the main application eventually call the interrupt&#xD;&#xA;service routine within the ksz8851snl driver. The reason for doing this is&#xD;&#xA;because we want to minimize the amount of time inside the interrupt handler.&#xD;&#xA;When a received frame interrupt is triggered the ksz8851snl driver will have to&#xD;&#xA;allocate buffer and transfer a large amount of data from the controller to ram,&#xD;&#xA;and then pass this buffer into the lwip stack.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32GG-DK3750 Development Kit&#xD;&#xA;Device: EFM32GG990F1024&#xD;&#xA;&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3750 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32GG_DK3750/examples/webserver/SimplicityStudio/DK3750_webserver.slsproj,../hardware/kit/EFM32GG_DK3750/examples/webserver/arm/webserver.uvprojx,../hardware/kit/EFM32GG_DK3750/examples/webserver/iar/webserver.eww"/>
    <properties key="core.boardCompatibility" value="brd3600a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/webserver.c"/>
  </descriptors>
  <descriptors label="STK3700_biometric" description="&lt;h1&gt;&lt;b&gt;Biometric Demo using the Biometric Sensor add-on board on the EFM32GG-STK3700.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses the EFM32 CMSIS including emlib and the&#xA;board support package support functions/drivers to demonstrate driving&#xA;the LCD display on the EFM32GG_STK3700 kit. In addition, it&#xA;demonstrates the use of Silicon Labs I2C based sensors on the expansion board&#xA;header.&#xA;&#xA;You must have a Silicon Labs Biometric Sensor add-on board to make use of this demo.&#xA;Once the demo is started, push button PB0 to change what is displayed. While&#xA;on the heart rate monitor display hold your finger on the proximity sensor to &#xA;measure heart rate.&#xA;&#xA;Board:  Silicon Labs EFM32GG-STK3700 Starter Kit and Sensor Add-on board&#xA;Device: EFM32GG990F1024&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3700 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32GG_STK3700/examples/biometric/SimplicityStudio/STK3700_biometric.slsproj,../hardware/kit/EFM32GG_STK3700/examples/biometric/arm/biometric.uvprojx,../hardware/kit/EFM32GG_STK3700/examples/biometric/iar/biometric.eww"/>
    <properties key="core.boardCompatibility" value="brd2200a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/biometric_demo.c"/>
  </descriptors>
  <descriptors label="STK3700_blink" description="&lt;h1&gt;&lt;b&gt;Blink example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use EFM32 CMSIS and the emlib peripheral library to&#xD;&#xA;demonstrate the use of the LED's on the starter kit. This example is intended as&#xD;&#xA;a skeleton for new projects.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32GG_STK3700 Starter Kit&#xD;&#xA;Device: EFM32GG990F1024&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3700 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32GG_STK3700/examples/blink/SimplicityStudio/STK3700_blink.slsproj,../hardware/kit/EFM32GG_STK3700/examples/blink/arm/blink.uvprojx,../hardware/kit/EFM32GG_STK3700/examples/blink/iar/blink.eww"/>
    <properties key="core.boardCompatibility" value="brd2200a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/blink.c"/>
  </descriptors>
  <descriptors label="STK3700_burtc" description="&lt;h1&gt;&lt;b&gt;Backup power domain RTC example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example demonstrate use of the backup power domain and the&#xD;&#xA;backup real time clock (BURTC).&#xD;&#xA;&#xD;&#xA;Start the example with the Power Source Selector switch in the &quot;DBG&quot; position.&#xD;&#xA;When the clock is running you can adjust time by pressing pushbuttons&#xD;&#xA;PB0 and PB1.&#xD;&#xA;When you move the Power Source Selector switch to the &quot;USB&quot; position, the&#xD;&#xA;EFM is turned off and the BURTC peripheral runs on power from the BU capacitor.&#xD;&#xA;(See User manual for EFM32GG-STK3700 starter kit for details on the hardware).&#xD;&#xA;When you move the Power Source Selector switch back to the &quot;DBG&quot; position, you&#xD;&#xA;can verify that time has been recorded correctly.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32GG-STK3700 Starter Kit&#xD;&#xA;Device: EFM32GG990F1024&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3700 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32GG_STK3700/examples/burtc/SimplicityStudio/STK3700_burtc.slsproj,../hardware/kit/EFM32GG_STK3700/examples/burtc/arm/burtc.uvprojx,../hardware/kit/EFM32GG_STK3700/examples/burtc/iar/burtc.eww"/>
    <properties key="core.boardCompatibility" value="brd2200a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3700_clock" description="&lt;h1&gt;&lt;b&gt;Wall Clock example using the segment LCD.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS  and demonstrates  the use of&#xD;&#xA;the LCD controller, RTC (real time counter), VCMP, GPIO and various&#xD;&#xA;Energy Modes (EM).&#xD;&#xA;&#xD;&#xA;The RTC is set up to wake the EFM32 from EM2 every minute. During this&#xD;&#xA;interval, the LCD is updated to reflect the current time. The animation&#xD;&#xA;feature is used to show the seconds. This is done by using the frame&#xD;&#xA;event counter to drive the animation feature every second.&#xD;&#xA;&#xD;&#xA;Time is set with pushbuttons PB0 and PB1.&#xD;&#xA; - Pushing PB0 increments minute count.&#xD;&#xA; - Pushing PB1 increments hour count.&#xD;&#xA;&#xD;&#xA;The VCMP is used to measure the input voltage on every wakeup. If the&#xD;&#xA;voltage drops too low, voltage boost is enabled on the LCD. This makes&#xD;&#xA;the LCD clear and readable even when running on low batteries.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32GG_STK3700 Development Kit&#xD;&#xA;Device: EFM32GG990F1024&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3700 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32GG_STK3700/examples/clock/SimplicityStudio/STK3700_clock.slsproj,../hardware/kit/EFM32GG_STK3700/examples/clock/arm/clock.uvprojx,../hardware/kit/EFM32GG_STK3700/examples/clock/iar/clock.eww"/>
    <properties key="core.boardCompatibility" value="brd2200a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/clock.c"/>
  </descriptors>
  <descriptors label="STK3700_cpt007b_demo" description="&lt;h1&gt;&lt;b&gt;CPT007B Demo&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This demo demonstrates the capacitive button function of CPT007B fixed function&#xD;&#xA;board. This demo runs on the EFM32 STK, and communicates with CPT007B through&#xD;&#xA;the GPIO pins on the EXP header. Virtual buttons on STK's LCD screen indicate&#xD;&#xA;whether the capacitive sensing buttons on CPT007B are pressed or released.&#xD;&#xA;This demo supports up to 7 capacitive buttons on CPT007B&#xD;&#xA; &#xD;&#xA;Board:  Silicon Labs EFM32GG_STK3700 Starter Kit and CPT007B Evaluation Board&#xD;&#xA;Device: EFM32GG990F1024&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3700 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32GG_STK3700/examples/cpt007b/SimplicityStudio/STK3700_cpt007b_demo.slsproj,../hardware/kit/EFM32GG_STK3700/examples/cpt007b/arm/cpt007b_demo.uvprojx,../hardware/kit/EFM32GG_STK3700/examples/cpt007b/iar/cpt007b_demo.eww"/>
    <properties key="core.boardCompatibility" value="brd2200a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/cpt007b_demo.c"/>
  </descriptors>
  <descriptors label="STK3700_cslib" description="&lt;h1&gt;&lt;b&gt;CSLIB example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses the capacitive sensing firmware library to sample&#xA;capacitive sensing buttons on the STK.  Real-time sample information, touch&#xA;qualification status, and other state variables can be displayed and examined&#xA;in the Capacitive Sensing Profiler tool.&#xA;&#xA;Board:  Silicon Labs EFM32GG_STK3700 Starter Kit&#xA;Device: EFM32GG990F1024&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3700 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32GG_STK3700/examples/cslib/SimplicityStudio/STK3700_cslib.slsproj,../hardware/kit/EFM32GG_STK3700/examples/cslib/arm/cslib.uvprojx,../hardware/kit/EFM32GG_STK3700/examples/cslib/iar/cslib.eww"/>
    <properties key="core.boardCompatibility" value="brd2200a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="SimplicityStudio/workspace/STK3700_cslib/app/main.c"/>
  </descriptors>
  <descriptors label="STK3700_emlcd" description="&lt;h1&gt;&lt;b&gt;Energy Modes with segment LCD example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use EFM32 CMSIS and the emlib peripheral library to&#xD;&#xA;demonstrate the use of the LCD controller, RTC (real time counter), GPIO and&#xD;&#xA;various Energy Modes (EM) on the starter kit.&#xD;&#xA;&#xD;&#xA;EM2 is used for delays in between refreshing the LCD display, and a lot of&#xD;&#xA;&quot;eye candy&quot; are present to show off the MCU module's LCD display.&#xD;&#xA;&#xD;&#xA;The LCD controller drives the display down to EM2. In the demo, EM2 is used&#xD;&#xA;for &quot;most&quot; delays to show off this feature. The user can press PB0 or PB1 to&#xD;&#xA;activate EM3 and EM4. EM4 requires a system reset, while PB0 again will wake&#xD;&#xA;up the system  from Energy Mode 3.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32STG_STK3700 Starter Kit&#xD;&#xA;Device: EFM32GG990F1024&#xD;&#xA;&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3700 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32GG_STK3700/examples/emlcd/SimplicityStudio/STK3700_emlcd.slsproj,../hardware/kit/EFM32GG_STK3700/examples/emlcd/arm/emlcd.uvprojx,../hardware/kit/EFM32GG_STK3700/examples/emlcd/iar/emlcd.eww"/>
    <properties key="core.boardCompatibility" value="brd2200a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/emlcd.c"/>
  </descriptors>
  <descriptors label="STK3700_emode" description="&lt;h1&gt;&lt;b&gt;Select a single energy mode, and stay there.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 emlib and demonstrates the use of&#xD;&#xA;the LCD controller, RTC (real time counter), GPIO and various Energy&#xD;&#xA;Modes (EM).&#xD;&#xA;&#xD;&#xA;The user can press the push buttons PB0 and PB1 to select which energy&#xD;&#xA;mode to demonstrate.&#xD;&#xA;&#xD;&#xA;This demo application has been made to give a quick demo of the&#xD;&#xA;energyAware Profiler from Silicon Labs and to reproduce the different &#xD;&#xA;energy modes seen in the EFM32 datasheet current consumption table. &#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32GG_STK3700 Development Kit&#xD;&#xA;Device: EFM32GG990F1024&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3700 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32GG_STK3700/examples/emode/SimplicityStudio/STK3700_emode.slsproj,../hardware/kit/EFM32GG_STK3700/examples/emode/arm/emode.uvprojx,../hardware/kit/EFM32GG_STK3700/examples/emode/iar/emode.eww"/>
    <properties key="core.boardCompatibility" value="brd2200a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3700_energy" description="&lt;h1&gt;&lt;b&gt;Board Support Package API demo for voltage and current readout.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS and demonstrates the use of&#xD;&#xA;the STK BSP.&#xD;&#xA;&#xD;&#xA;The BSP is used to read out the current consumption and VMCU voltage level&#xD;&#xA;from the board controller. The readings are printed to the display.&#xD;&#xA;&#xD;&#xA;The BSP use a 115800-N-1 UART to communicate with the board controller,&#xD;&#xA;if you do not need the board support functions, there is no need to&#xD;&#xA;include the BSP in your project. Currently, the UART communication with&#xD;&#xA;16x oversampling is used, limiting the communication channel to high&#xD;&#xA;frequencies for the peripheral clock.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32GG-STK3700 Development Kit&#xD;&#xA;Device: EFM32GG990F1024&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3700 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32GG_STK3700/examples/energy/SimplicityStudio/STK3700_energy.slsproj,../hardware/kit/EFM32GG_STK3700/examples/energy/arm/energy.uvprojx,../hardware/kit/EFM32GG_STK3700/examples/energy/iar/energy.eww"/>
    <properties key="core.boardCompatibility" value="brd2200a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/energy.c"/>
  </descriptors>
  <descriptors label="STK3700_freertos_blink" description="&lt;h1&gt;&lt;b&gt;FreeRTOS - Blink example&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the FreeRTOS, and gives a basic demonstration of using two tasks to blink the LEDs on the board. &#xD;&#xA;It also shows how to use idle with different energy saving modes ( from EM1 to EM3 - configured in FreeRTOSConfig.h file).&#xD;&#xA;This example is intended as a skeleton for new projects using FreeRTOS.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32GG_STK3700 Starter Kit&#xD;&#xA;Device: EFM32GG990F1024&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3700 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32GG_STK3700/examples/freertos_blink/SimplicityStudio/STK3700_freertos_blink.slsproj,../hardware/kit/EFM32GG_STK3700/examples/freertos_blink/arm/freertos_blink.uvprojx,../hardware/kit/EFM32GG_STK3700/examples/freertos_blink/iar/freertos_blink.eww"/>
    <properties key="core.boardCompatibility" value="brd2200a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3700_freertos_demo" description="&lt;h1&gt;&lt;b&gt;FreeRTOS - Demo&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This is the demo application which is also provided in the official FreeRTOS &#xD;&#xA;distribution. The demo can operate in 3 modes showing different functionality &#xD;&#xA;of the FreeRTOS system. The mode can be configured by changing the value of &#xD;&#xA;configCREATE_LOW_POWER_DEMO in the FreeRTOSConfig.h file. &#xD;&#xA;&#xD;&#xA;0 =&gt; Full Demo&#xD;&#xA;&#xD;&#xA;This is the default mode of this example. The &quot;Full Demo&quot; is a comprehensive &#xD;&#xA;test and demo application that shows how to use various FreeRTOS API's. When &#xD;&#xA;running the demo there is a check task which toggles a LED on the board every&#xD;&#xA;3 seconds when the demo is running as expected.&#xD;&#xA;&#xD;&#xA;1 =&gt; Low Power using RTC&#xD;&#xA;&#xD;&#xA;This mode is using the low power tickless idle functionality of FreeRTOS to &#xD;&#xA;show how to use low power while using FreeRTOS. In this mode the MCU will &#xD;&#xA;sleep in EM2 whenever FreeRTOS enter idle mode and it will be using the RTC to &#xD;&#xA;trigger wakeup.&#xD;&#xA;&#xD;&#xA;2 =&gt; Low Power using BURTC&#xD;&#xA;&#xD;&#xA;This mode is using the low power tickless idle functionality of FreeRTOS to &#xD;&#xA;show how to use low power while using FreeRTOS. In this mode the MCU will &#xD;&#xA;sleep in EM3 whenever FreeRTOS enter idle mode and it will be using the BURTC &#xD;&#xA;to trigger wakeup.&#xD;&#xA;&#xD;&#xA;Further information on the example can be found at this location:&#xD;&#xA;http://www.freertos.org/EFM32-Giant-Gecko-Pearl-Gecko-tickless-RTOS-demo.html&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32GG_STK3700 Starter Kit&#xD;&#xA;Device: EFM32GG990F1024&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3700 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32GG_STK3700/examples/freertos_demo/SimplicityStudio/STK3700_freertos_demo.slsproj,../hardware/kit/EFM32GG_STK3700/examples/freertos_demo/arm/freertos_demo.uvprojx,../hardware/kit/EFM32GG_STK3700/examples/freertos_demo/iar/freertos_demo.eww"/>
    <properties key="core.boardCompatibility" value="brd2200a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3700_freertos_tickless" description="&lt;h1&gt;&lt;b&gt;FreeRTOS - Tickless example&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the FreeRTOS, and gives a basic demonstration of using two tasks,&#xD;&#xA;one sender generating number and one receiver that displays the number on the LCD. The FreeRTOS is &#xD;&#xA;configured in tickless mode, going into EM2 when no tasks are active.&#xD;&#xA;&#xD;&#xA;EM3 mode cannot be used in this example because the LCD driver and timer are not available in EM3.&#xD;&#xA;For more details, see the configuraiton in FreeRTOSConfig.h file.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32GG_STK3700 Starter Kit&#xD;&#xA;Device: EFM32GG990F1024&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3700 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32GG_STK3700/examples/freertos_tickless/SimplicityStudio/STK3700_freertos_tickless.slsproj,../hardware/kit/EFM32GG_STK3700/examples/freertos_tickless/arm/freertos_tickless.uvprojx,../hardware/kit/EFM32GG_STK3700/examples/freertos_tickless/iar/freertos_tickless.eww"/>
    <properties key="core.boardCompatibility" value="brd2200a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3700_gpiointerrupt" description="&lt;h1&gt;&lt;b&gt;Gpio interrupt example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use EFM32 CMSIS and gpio interrupt dispatcher driver to show&#xD;&#xA;how to handle multiple GPIO interrupts. Buttons pressing toggles LEDs.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32GG_STK3700 Starter Kit&#xD;&#xA;Device: EFM32GG990F1024&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3700 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32GG_STK3700/examples/gpiointerrupt/SimplicityStudio/STK3700_gpiointerrupt.slsproj,../hardware/kit/EFM32GG_STK3700/examples/gpiointerrupt/arm/gpiointerrupt.uvprojx,../hardware/kit/EFM32GG_STK3700/examples/gpiointerrupt/iar/gpiointerrupt.eww"/>
    <properties key="core.boardCompatibility" value="brd2200a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3700_inttemp" description="&lt;h1&gt;&lt;b&gt;Internal temperature sensor example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS and emlib to demonstrate&#xD;&#xA;the usage of the internal temperature sensor on EFM32 Giant Gecko&#xD;&#xA;devices.&#xD;&#xA;&#xD;&#xA;Note: EFM32 devices with production ID lower than 18 may measure inaccurate&#xD;&#xA;temperatures due to a sensor calibration bug.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32GG_STK3700 Starter Kit&#xD;&#xA;Device: EFM32GG990F1024&#xD;&#xA;&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3700 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32GG_STK3700/examples/inttemp/SimplicityStudio/STK3700_inttemp.slsproj,../hardware/kit/EFM32GG_STK3700/examples/inttemp/arm/inttemp.uvprojx,../hardware/kit/EFM32GG_STK3700/examples/inttemp/iar/inttemp.eww"/>
    <properties key="core.boardCompatibility" value="brd2200a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/inttemp.c"/>
  </descriptors>
  <descriptors label="STK3700_lcd" description="&lt;h1&gt;&lt;b&gt;Segment LCD controller example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS and emlib peripheral library and&#xD;&#xA;demonstrates the use of the segment LCD controller.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32GG_STK3700 Starter Kit&#xD;&#xA;Device: EFM32GG990F1024&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3700 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32GG_STK3700/examples/lcd/SimplicityStudio/STK3700_lcd.slsproj,../hardware/kit/EFM32GG_STK3700/examples/lcd/arm/lcd.uvprojx,../hardware/kit/EFM32GG_STK3700/examples/lcd/iar/lcd.eww"/>
    <properties key="core.boardCompatibility" value="brd2200a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="emlib/lcd.c"/>
  </descriptors>
  <descriptors label="STK3700_lcsense" description="&lt;h1&gt;&lt;b&gt;LC sense example using LESENSE.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS and demonstrates the use of &#xD;&#xA;the LESENSE peripheral on the board.&#xD;&#xA;&#xD;&#xA;This demo has two different modes.&#xD;&#xA;To change between them, press PB1. In Mode0 (default). The LESENSE&#xD;&#xA;module will wake up whenever a metal object is passed above the LC&#xD;&#xA;sensor in the bottom right of the STK. In Mode 1, the EFM32 will only&#xD;&#xA;wake up every fifth time the metal object is passed over the sensor.&#xD;&#xA;&#xD;&#xA;Board: Silicon Labs EFM32GG_STK3700 Development Kit&#xD;&#xA;Device: EFM32GG990F1024&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3700 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32GG_STK3700/examples/lcsense/SimplicityStudio/STK3700_lcsense.slsproj,../hardware/kit/EFM32GG_STK3700/examples/lcsense/arm/lcsense.uvprojx,../hardware/kit/EFM32GG_STK3700/examples/lcsense/iar/lcsense.eww"/>
    <properties key="core.boardCompatibility" value="brd2200a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="Main/lcsense.c"/>
  </descriptors>
  <descriptors label="STK3700_leuart" description="&lt;h1&gt;&lt;b&gt;LEUART/DMA in Energy mode2 output example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project reads and sends the data back to terminal using LEUART&#xD;&#xA;while staying in EM2.&#xD;&#xA;&#xD;&#xA;It uses the EFM32 CMSIS and emlib, to demonstrate the&#xD;&#xA;use of LEUART communication using DMA under the EM2 on the &#xD;&#xA;EFM32GG_STK3700 Starter Kit.&#xD;&#xA;&#xD;&#xA;The LEUART is configured to be used with DMA under EM2.&#xD;&#xA;The terminal configuration is 9600-8-N-1.&#xD;&#xA;The DMA is configured to handle read and write data bytes from LEUART under EM2.&#xD;&#xA;&#xD;&#xA;Testing:&#xD;&#xA;1. Use the expansion header to connect the LEUART to your PC.&#xD;&#xA;2. Pin Configuration:&#xD;&#xA;	2.1. Pin-12 (PD4) LEUART0_TX&#xD;&#xA;	2.2. Pin-14 (PD5) LEUART0_RX&#xD;&#xA;	2.3. Pin-1 Gnd&#xD;&#xA;&#xD;&#xA;3. Configure terminal to 9600-8-N-1.&#xD;&#xA;4. Enter characters from your keyboard and see if you receive the echo on the terminal.&#xD;&#xA;5. Check the average current consumption is equal to EM2 on Energy Profiler.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32GG_STK3700 Starter Kit&#xD;&#xA;Device: EFM32GG990F1024&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3700 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32GG_STK3700/examples/leuart/SimplicityStudio/STK3700_leuart.slsproj,../hardware/kit/EFM32GG_STK3700/examples/leuart/arm/leuart.uvprojx,../hardware/kit/EFM32GG_STK3700/examples/leuart/iar/leuart.eww"/>
    <properties key="core.boardCompatibility" value="brd2200a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3700_lightsense" description="&lt;h1&gt;&lt;b&gt;Lightsensor example using LESENSE.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS&#xD;&#xA;and demonstrates the use of the LESENSE peripheral on the board.&#xD;&#xA;&#xD;&#xA;This demo has two different modes.&#xD;&#xA;To change between them, press PB0. In Mode0 (default). The LESENSE&#xD;&#xA;module will wake up whenever a &quot;dark&quot; event is detected by the light sensor&#xD;&#xA;below the &quot;EFM32&quot; sign on the right from the LCD on the STK. In Mode 1,&#xD;&#xA;EFM32 will only wake up on every fifth &quot;dark&quot; event.&#xD;&#xA;&#xD;&#xA;Board: Silicon Labs EFM32GG_STK3700 Development Kit&#xD;&#xA;Device: EFM32GG990F1024&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3700 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32GG_STK3700/examples/lightsense/SimplicityStudio/STK3700_lightsense.slsproj,../hardware/kit/EFM32GG_STK3700/examples/lightsense/arm/lightsense.uvprojx,../hardware/kit/EFM32GG_STK3700/examples/lightsense/iar/lightsense.eww"/>
    <properties key="core.boardCompatibility" value="brd2200a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="Main/lightsense.c"/>
  </descriptors>
  <descriptors label="STK3700_mpu" description="&lt;h1&gt;&lt;b&gt;Memory Protection Unit example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS including STK BSP (board&#xD;&#xA;support package).&#xD;&#xA;&#xD;&#xA;It sets up the MPU to demonstrate usage of MPU to catch memory access&#xD;&#xA;violations. STK pushbuttons are used generate MPU faults.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32GG_STK3700 Development Kit&#xD;&#xA;Device: EFM32GG990F1024&#xD;&#xA;&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3700 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32GG_STK3700/examples/mpu/SimplicityStudio/STK3700_mpu.slsproj,../hardware/kit/EFM32GG_STK3700/examples/mpu/arm/mpu.uvprojx,../hardware/kit/EFM32GG_STK3700/examples/mpu/iar/mpu.eww"/>
    <properties key="core.boardCompatibility" value="brd2200a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="emlib/mpu.c"/>
  </descriptors>
  <descriptors label="STK3700_nandflash" description="&lt;h1&gt;&lt;b&gt;Nandflash example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example demonstrates use of the NANDFLASH driver.&#xD;&#xA;&#xD;&#xA;Connect a terminal to the TTL-level serialport (115200-N-8-1) on EXP port pins&#xD;&#xA;4 and 6.&#xD;&#xA;Operations on the flash are initiated by issuing commands on the terminal.&#xD;&#xA;Command &quot;h&quot; will print a help screen on the terminal :&#xD;&#xA;&#xD;&#xA;    Available commands:&#xD;&#xA;        fi         : Show NAND flash device information&#xD;&#xA;        h          : Show this help&#xD;&#xA;        rp &lt;n&gt;     : Read page &lt;n&gt;&#xD;&#xA;        bp &lt;n&gt;     : Blankcheck page &lt;n&gt;&#xD;&#xA;        bd         : Blankcheck entire device&#xD;&#xA;        bb         : Check bad-block info&#xD;&#xA;        mb &lt;n&gt;     : Mark block &lt;n&gt; as bad&#xD;&#xA;        wp &lt;n&gt;     : Write page &lt;n&gt;&#xD;&#xA;        eb &lt;n&gt;     : Erase block &lt;n&gt;&#xD;&#xA;        ecc &lt;n&gt;    : Check ECC algorithm, uses page &lt;n&gt; and &lt;n+1&gt;&#xD;&#xA;        cp &lt;m&gt; &lt;n&gt; : Copy page &lt;m&gt; to page &lt;n&gt;&#xD;&#xA;&#xD;&#xA;Note that the nandflash device used on this kit has 32 pages per block, so&#xD;&#xA;pages 0-31 belongs to block 0.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32GG-STK3700 Development Kit&#xD;&#xA;Device: EFM32GG990F1024&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3700 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32GG_STK3700/examples/nandflash/SimplicityStudio/STK3700_nandflash.slsproj,../hardware/kit/EFM32GG_STK3700/examples/nandflash/arm/nandflash.uvprojx,../hardware/kit/EFM32GG_STK3700/examples/nandflash/iar/nandflash.eww"/>
    <properties key="core.boardCompatibility" value="brd2200a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3700_nvm_simple" description="&lt;h1&gt;&lt;b&gt;nvm_simple - non-volatile memory driver usage simple example&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example shows simple usage of NVM module.&#xD;&#xA;&#xD;&#xA;It stores object (32bit word in this case) into flash region declared &#xD;&#xA;as non-volatile memory area. It uses wear leveling and demonstrates &#xD;&#xA;simple use of the NVM driver. There are two types of pages: &quot;normal&quot; &#xD;&#xA;dedicated for storing multiple objects which doesn't change often &#xD;&#xA;and &quot;wear&quot; which can store single object (but this could be structure&#xD;&#xA;containing many fields) that can often change. In this example on two pages &#xD;&#xA;same object is stored but NVM could handle multiple pages with different objects.&#xD;&#xA;&#xD;&#xA;PB0 - short press recalls data from &quot;normal&quot; page&#xD;&#xA;PB0 - long press store data to &quot;normal&quot; page&#xD;&#xA;PB1 - counts up, and after releasing stores data to &quot;wear&quot; page&#xD;&#xA;&#xD;&#xA;RESET - resets CPU and if there were valid data in NVM recovers last data value.&#xD;&#xA;&#xD;&#xA;LED1 - signals writing to flash&#xD;&#xA;LED0 - signals reading from flash (invisible due to short time)&#xD;&#xA;&#xD;&#xA;In case of fatal error LED0 blinks showing place in code that caused it.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32GG-STK3700 Development Kit&#xD;&#xA;Device: EFM32GG990F1024&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3700 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32GG_STK3700/examples/nvm_simple/SimplicityStudio/STK3700_nvm_simple.slsproj,../hardware/kit/EFM32GG_STK3700/examples/nvm_simple/arm/nvm_simple.uvprojx,../hardware/kit/EFM32GG_STK3700/examples/nvm_simple/iar/nvm_simple.eww"/>
    <properties key="core.boardCompatibility" value="brd2200a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3700_powertest" description="&lt;h1&gt;&lt;b&gt;Power test example, running demonstration of energy modes.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use EFM32 CMSIS and the emlib peripheral library&#xD;&#xA;to demonstrate the use of the various Energy Modes available on the&#xD;&#xA;EFM32GG990F1024. When running this example, the EnergyAware Profiler tool&#xD;&#xA;in Simplicity Studio can be used to show the power consumption of each&#xD;&#xA;energy mode.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32GG-STK3700 Development Kit&#xD;&#xA;Device: EFM32GG990F1024&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3700 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32GG_STK3700/examples/powertest/SimplicityStudio/STK3700_powertest.slsproj,../hardware/kit/EFM32GG_STK3700/examples/powertest/arm/powertest.uvprojx,../hardware/kit/EFM32GG_STK3700/examples/powertest/iar/powertest.eww"/>
    <properties key="core.boardCompatibility" value="brd2200a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3700_rtx_blink" description="&lt;h1&gt;&lt;b&gt;Keil RTX RTOS - Blink example&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the Keil RTX RTOS, and gives a basic demonstration of using two tasks to blink the LEDs on the board.&#xD;&#xA;This example is intended as a skeleton for new projects using Keil RTX.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32GG-STK3700&#xD;&#xA;Device: EFM32GG990F1024&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3700 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32GG_STK3700/examples/rtx_blink/SimplicityStudio/STK3700_rtx_blink.slsproj,../hardware/kit/EFM32GG_STK3700/examples/rtx_blink/arm/rtx_blink.uvprojx,../hardware/kit/EFM32GG_STK3700/examples/rtx_blink/iar/rtx_blink.eww"/>
    <properties key="core.boardCompatibility" value="brd2200a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/rtx_blink.c"/>
  </descriptors>
  <descriptors label="STK3700_rtx_tickless" description="&lt;h1&gt;&lt;b&gt;Keil RTX RTOS - tick-less example&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the Keil RTX RTOS, and gives a basic demonstration&#xD;&#xA;of using two tasks; one sender generating number and one receiver that displays&#xD;&#xA;the number on LCD. The RTX is configured in tick-less mode, going into EM2 when&#xD;&#xA;no tasks are active. This example is intended as a skeleton for new projects&#xD;&#xA;using Keil RTX for energy aware applications.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32GG-STK3700&#xD;&#xA;Device: EFM32GG990F1024&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3700 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32GG_STK3700/examples/rtx_tickless/SimplicityStudio/STK3700_rtx_tickless.slsproj,../hardware/kit/EFM32GG_STK3700/examples/rtx_tickless/arm/rtx_tickless.uvprojx,../hardware/kit/EFM32GG_STK3700/examples/rtx_tickless/iar/rtx_tickless.eww"/>
    <properties key="core.boardCompatibility" value="brd2200a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/rtx_tickless.c"/>
  </descriptors>
  <descriptors label="STK3700_rtx_tickless_nolcd" description="&lt;h1&gt;&lt;b&gt;Keil RTX RTOS - tick-less example with LCD off.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example is modification of rtx_tickless to demonstrate ultra low power consumption &#xD;&#xA;of Gecko processors in connection with RTX RTOS. Comparing to previous example it has LCD&#xD;&#xA;turned off. There is also possible to disable part of RAM to lower power even further.&#xD;&#xA;Low frequency crystal oscillator was disabled and low frequency RC oscillator used instead&#xD;&#xA;to lower energy consumption even more.&#xD;&#xA;&#xD;&#xA;project uses the Keil RTX RTOS, and gives a basic demonstration&#xD;&#xA;of using two tasks; one sender generating number and one receiver.&#xD;&#xA;The RTX is configured in tick-less mode, going into EM2 when&#xD;&#xA;no tasks are active. This example is intended as a skeleton for new projects&#xD;&#xA;using Keil RTX for energy aware applications.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32GG-STK3700&#xD;&#xA;Device: EFM32GG990F1024&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3700 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32GG_STK3700/examples/rtx_tickless_nolcd/SimplicityStudio/STK3700_rtx_tickless_nolcd.slsproj,../hardware/kit/EFM32GG_STK3700/examples/rtx_tickless_nolcd/arm/rtx_tickless_nolcd.uvprojx,../hardware/kit/EFM32GG_STK3700/examples/rtx_tickless_nolcd/iar/rtx_tickless_nolcd.eww"/>
    <properties key="core.boardCompatibility" value="brd2200a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/rtx_tickless.c"/>
  </descriptors>
  <descriptors label="STK3700_touch" description="&lt;h1&gt;&lt;b&gt;Capactive touch example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example demonstrates the capacitive touch capability of the EFM32 and the&#xD;&#xA;Tiny Gecko STK. This is a port of the EFM32_G8xx_STK capacitive touch demo.&#xD;&#xA;&#xD;&#xA;It demonstrates the use of LESENSE, ACMP, VCMP, LCD, and EMU.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32GG_STK3700&#xD;&#xA;Device: EFM32GG990F1024&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3700 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32GG_STK3700/examples/touch/SimplicityStudio/STK3700_touch.slsproj,../hardware/kit/EFM32GG_STK3700/examples/touch/arm/touch.uvprojx,../hardware/kit/EFM32GG_STK3700/examples/touch/iar/touch.eww"/>
    <properties key="core.boardCompatibility" value="brd2200a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/touchdemo.c"/>
  </descriptors>
  <descriptors label="STK3700_ucos2" description="&lt;h1&gt;&lt;b&gt;uC/OS-II RTOS on EFM32 using example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This is a port of the uC/OS-II RTOS from Micrium Inc, http://www.micrium.com&#xD;&#xA;&#xD;&#xA;The port has been adapted by Silicon Labs for use with our Development&#xD;&#xA;Kit. It requires the standard EFM32 CMSIS package (including emlib).&#xD;&#xA;&#xD;&#xA;The example has three tasks:&#xD;&#xA; - Task1: LED blink task&#xD;&#xA; - Task2: Receives characters from serial port and posts message to Task3&#xD;&#xA; - Task3: Receives message from Task2 and writes it on LCD and serial port&#xD;&#xA;&#xD;&#xA;Serial port can be chosen between:&#xD;&#xA;USART1 - location 1 is used, GPIO port D pins 0 and 1, baudrate 115200-8-N-1.&#xD;&#xA;LEUART0 - location 0 is used, GPIO port D pins 4 and 5, baudrate 9600-8-N-1.&#xD;&#xA;&#xD;&#xA;These USARTs are by default not connected to any serial port, so this needs&#xD;&#xA;to be connected to external RS232 ports to be usable.&#xD;&#xA;&#xD;&#xA;uC/OS-II is provided in source form for FREE evaluation, for educational use&#xD;&#xA;or for peaceful research.&#xD;&#xA;&#xD;&#xA;If you plan on using uC/OS-II in a commercial product you need to contact&#xD;&#xA;Micrium to properly license its use in your product. We provide ALL the&#xD;&#xA;source code for your convenience and to help you experience uC/OS-II.&#xD;&#xA;The fact that the source is provided does NOT mean that you can use it without&#xD;&#xA;paying a licensing fee.&#xD;&#xA;&#xD;&#xA;For commercial use, contact Micrium, http://www.micrium.com for details.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32GG_STK3700 Starter Kit&#xD;&#xA;Device: EFM32GG990F1024&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3700 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32GG_STK3700/examples/ucos2_port/arm/ucos2.uvprojx,../hardware/kit/EFM32GG_STK3700/examples/ucos2_port/iar/ucos2.eww"/>
    <properties key="core.boardCompatibility" value="brd2200a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/app/app.c"/>
  </descriptors>
  <descriptors label="STK3700_ucos3" description="&lt;h1&gt;&lt;b&gt;uC/OS-III RTOS on EFM32 using example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This is a port of the uC/OS-III RTOS from Micrium Inc, http://www.micrium.com&#xD;&#xA;&#xD;&#xA;The port has been adapted by Silicon Labs for use with our Development Kit..&#xD;&#xA;It requires the standard EFM32 CMSIS package (including emlib).&#xD;&#xA;&#xD;&#xA;The example has three tasks:&#xD;&#xA; - Task1: LED blink task&#xD;&#xA; - Task2: Receives characters from serial port and posts message to Task3&#xD;&#xA; - Task3: Receives message from Task2 and writes it on LCD and serial port&#xD;&#xA;&#xD;&#xA;Serial port can be chosen between:&#xD;&#xA;USART1 - location 1 is used, GPIO port D pins 0 and 1, baudrate 115200-8-N-1.&#xD;&#xA;LEUART0 - location 0 is used, GPIO port D pins 4 and 5, baudrate 9600-8-N-1.&#xD;&#xA;&#xD;&#xA;These USARTs are by default not connected to any serial port, so this needs&#xD;&#xA;to be connected to external RS232 ports to be usable.&#xD;&#xA;&#xD;&#xA;uC/OS-III is provided in source form for FREE evaluation, for educational use&#xD;&#xA;or for peaceful research.&#xD;&#xA;&#xD;&#xA;If you plan on using uC/OS-III in a commercial product you need to contact&#xD;&#xA;Micrium to properly license its use in your product. We provide ALL the&#xD;&#xA;source code for your convenience and to help you experience uC/OS-III.&#xD;&#xA;The fact that the source is provided does NOT mean that you can use it without&#xD;&#xA;paying a licensing fee.&#xD;&#xA;&#xD;&#xA;For commercial use, contact Micrium, http://www.micrium.com for details.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32GG_STK3700 Starter Kit&#xD;&#xA;Device: EFM32GG990F1024&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3700 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32GG_STK3700/examples/ucos3_port/arm/ucos3.uvprojx,../hardware/kit/EFM32GG_STK3700/examples/ucos3_port/iar/ucos3.eww"/>
    <properties key="core.boardCompatibility" value="brd2200a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/app/app.c"/>
  </descriptors>
  <descriptors label="STK3700_usbdcomposite" description="&lt;h1&gt;&lt;b&gt;USB Composite Device example, MSD + CDC + Vendor unique functions.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use the EFM32 USB Device protocol stack&#xD;&#xA;to implement a composite USB device with tree functions:&#xD;&#xA;&#xD;&#xA; - Mass storage class device (MSD) implementing a disk in internal flash memory.&#xD;&#xA; - Communication device class (CDC) implementing a USB&lt;-&gt;UART bridge&#xD;&#xA; - Vendor Unique Device similar to the usbdvud example (control STK leds).&#xD;&#xA;&#xD;&#xA;As the CDC function has two interface, the CDC function use an Interface&#xD;&#xA;Association Descriptor (IAD). A composite device which use IAD's must be&#xD;&#xA;implemented using bDeviceClass=0xEF, bDeviceSubClass=2 and bDeviceProtocol=1.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;The vendor unique function (VUD).&#xD;&#xA;=================================&#xD;&#xA;Toggles user LED's 0 and 1 when receiving vendor unique class setup commands.&#xD;&#xA;Intended to be used together with the &quot;libusb&quot; device driver, and host&#xD;&#xA;application EFM32-LedApp.exe (a Windows application).&#xD;&#xA;You will find libusb and EFM32-LedApp.exe in the &quot;host&quot; folder of the usbdvud&#xD;&#xA;example. Check EFM32_Vendor_Unique_Device.inf to see how both the usbdvud&#xD;&#xA;example VID_10C4&amp;PID_0001 and this composite example VID_10C4&amp;PID_0008&amp;MI_00&#xD;&#xA;are specified.&#xD;&#xA;&#xD;&#xA;The CDC COM port function.&#xD;&#xA;==========================&#xD;&#xA;Implements an USB CDC based virtual COM port. USART1 on the STK is used as the&#xD;&#xA;physical COM port. Any data sent to the virtual CDC COM port is transmitted on&#xD;&#xA;USART1. Any data received on USART1 is transmitted to the virtual port.&#xD;&#xA;USART1 is available on the STK EXT port. EXT pin 4 is Tx, pin 6 is Rx.&#xD;&#xA;NOTE: This is a TTL level USART, DO NOT CONNECT DIRECTLY TO RS232 PORTS !&#xD;&#xA;&#xD;&#xA;USB Mass Storage Device function.&#xD;&#xA;=================================&#xD;&#xA;Implements a Mass Storage Class device (MSD) with 4MByte in external PSRAM.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Windows driver installation.&#xD;&#xA;============================&#xD;&#xA;The first time the composite USB device is connected to the host, Windows must&#xD;&#xA;install drivers for the VUD and CDC functions.&#xD;&#xA;&#xD;&#xA;To control the VUD function with EFM32-LedApp.exe you need to install &quot;libusb&quot;&#xD;&#xA;device driver. Manually direct Windows to look for this driver in the &quot;host&quot;&#xD;&#xA;folder of the usbdvud example.&#xD;&#xA;This can be done with the new device &quot;Wizard&quot; which might pop up after device&#xD;&#xA;insertion, or you can open &quot;Device Manager&quot;, left click on one of functions&#xD;&#xA;of the new composite device (marked with yellow exclamation mark) and&#xD;&#xA;select &quot;Update Driver Software...&quot;.&#xD;&#xA;After libusb is installed you can start EFM32-LedApp.exe to control leds on&#xD;&#xA;the STK.&#xD;&#xA;&#xD;&#xA;Similarly for the CDC function, direct Windows to look for a driver in the&#xD;&#xA;folder where you have your copy of the &quot;EFM32-Cdc.inf&quot; file (same folder as&#xD;&#xA;this readme file, unzip the Silabs-CDC_Install.zip).&#xD;&#xA;Note how the .inf file specifies interface number 2, VID_10C4&amp;PID_0008&amp;MI_02.&#xD;&#xA;When the serial port driver is succesfully installed, the device will be listed&#xD;&#xA;as a &quot;Ports&quot; device in Device Manager, double-click it, select the&#xD;&#xA;&quot;Port Settings&quot; tab and maybe the &quot;Advanced...&quot; button to set serial port&#xD;&#xA;properties.&#xD;&#xA;&#xD;&#xA;Some versions of Windows wont allow you to install unsigned drivers. If you&#xD;&#xA;suspect this, reboot the PC into &quot;Disable Driver Signature Enforcement&quot; mode.&#xD;&#xA;Win7:&#xD;&#xA;Repeatedly push F8 during boot until the boot menu appears.&#xD;&#xA;Select the &quot;Disable Driver Signature Enforcement&quot; option.&#xD;&#xA;Win10:&#xD;&#xA;Start Menu-&gt;Power button-&gt;Hold Shift key down and select Restart.&#xD;&#xA;When computer has restarted into the options menu, select:&#xD;&#xA;Troubleshoot-&gt;Advanced Option-&gt;Startup Settings-&gt;Restart-&gt;Disable driver signature enforcement&#xD;&#xA;You should now be able to install an unsigned driver.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32GG-STK3700 Development Kit&#xD;&#xA;Device: EFM32GG990F1024&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3700 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32GG_STK3700/examples/usbdcomposite/SimplicityStudio/STK3700_usbdcomposite.slsproj,../hardware/kit/EFM32GG_STK3700/examples/usbdcomposite/arm/usbdcomposite.uvprojx,../hardware/kit/EFM32GG_STK3700/examples/usbdcomposite/iar/usbdcomposite.eww"/>
    <properties key="core.boardCompatibility" value="brd2200a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3700_usbdhidkbd" description="&lt;h1&gt;&lt;b&gt;USB HID keyboard example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use the EFM32 USB Device protocol stack&#xD;&#xA;and implements an USB HID class keyboard device (one button !).&#xD;&#xA;&#xD;&#xA;PB0 is the keyboard button. Pressing this button will succesively write&#xD;&#xA;&quot;Silicon Labs - &quot;.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32GG-STK3700 Development Kit&#xD;&#xA;Device: EFM32GG990F1024&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3700 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32GG_STK3700/examples/usbdhidkbd/SimplicityStudio/STK3700_usbdhidkbd.slsproj,../hardware/kit/EFM32GG_STK3700/examples/usbdhidkbd/arm/usbdhidkbd.uvprojx,../hardware/kit/EFM32GG_STK3700/examples/usbdhidkbd/iar/usbdhidkbd.eww"/>
    <properties key="core.boardCompatibility" value="brd2200a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3700_usbdmsd" description="&lt;h1&gt;&lt;b&gt;USB Mass Storage Device example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use the EFM32 USB Device protocol stack&#xD;&#xA;to implement a device Mass Storage Class device (MSD).&#xD;&#xA;&#xD;&#xA;The example provides two different MSD types.&#xD;&#xA;&#xD;&#xA; - A 96KByte &quot;disk&quot; in internal SRAM (on devices with 128 kByte or larger SRAM)&#xD;&#xA; - An internal FLASH &quot;disk&quot; (disksize is internal FLASH size minus 64K)&#xD;&#xA;&#xD;&#xA;Select mediatype in msddmedia.h (#define MSD_MEDIA)&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32GG_STK3700 Development Kit&#xD;&#xA;Device: EFM32GG990F1024&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3700 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32GG_STK3700/examples/usbdmsd/SimplicityStudio/STK3700_usbdmsd.slsproj,../hardware/kit/EFM32GG_STK3700/examples/usbdmsd/arm/usbdmsd.uvprojx,../hardware/kit/EFM32GG_STK3700/examples/usbdmsd/iar/usbdmsd.eww"/>
    <properties key="core.boardCompatibility" value="brd2200a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3700_usbdvud" description="&lt;h1&gt;&lt;b&gt;USB Vendor Unique Device example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use the EFM32 USB Device protocol stack&#xD;&#xA;and implements an USB Vendor Unique Device.&#xD;&#xA;&#xD;&#xA;The example will toggle LED's 0 and 1 when receiving vendor unique class&#xD;&#xA;setup commands.&#xD;&#xA;&#xD;&#xA;This example is intended to be used together with the &quot;libusb&quot; device driver,&#xD;&#xA;and host application EFM32-LedApp.exe (a Windows application).&#xD;&#xA;&#xD;&#xA;The first time the USB device is connected to the host, you must tell the host&#xD;&#xA;OS to install the &quot;libusb&quot; device driver.&#xD;&#xA;&#xD;&#xA;On Windows, you can follow this procedure:&#xD;&#xA;Insert the device, and manually direct Windows to look for drivers in the&#xD;&#xA;directory where you have your copy of the &quot;EFM32_Vendor_Unique_Device.inf&quot; file.&#xD;&#xA;This can be done with the new device &quot;Wizard&quot; which might pop up after device&#xD;&#xA;insertion, or you can open &quot;Device Manager&quot;, left click on the new device and&#xD;&#xA;select &quot;Update Driver Software...&quot;.&#xD;&#xA;&#xD;&#xA;Some versions of Windows wont allow you to install unsigned drivers. If you&#xD;&#xA;suspect this, reboot the PC into &quot;Disable Driver Signature Enforcement&quot; mode.&#xD;&#xA;Win7:&#xD;&#xA;Repeatedly push F8 during boot until the boot menu appears.&#xD;&#xA;Select the &quot;Disable Driver Signature Enforcement&quot; option.&#xD;&#xA;Win10:&#xD;&#xA;Start Menu-&gt;Power button-&gt;Hold Shift key down and select Restart.&#xD;&#xA;When computer has restarted into the options menu, select:&#xD;&#xA;Troubleshoot-&gt;Advanced Option-&gt;Startup Settings-&gt;Restart-&gt;Disable driver signature enforcement&#xD;&#xA;You should now be able to install an unsigned driver.&#xD;&#xA;&#xD;&#xA;After libusb is installed, start EFM32-LedApp.exe.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32GG-STK3700 Development Kit&#xD;&#xA;Device: EFM32GG990F1024&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3700 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32GG_STK3700/examples/usbdvud/SimplicityStudio/STK3700_usbdvud.slsproj,../hardware/kit/EFM32GG_STK3700/examples/usbdvud/arm/usbdvud.uvprojx,../hardware/kit/EFM32GG_STK3700/examples/usbdvud/iar/usbdvud.eww"/>
    <properties key="core.boardCompatibility" value="brd2200a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3700_usbhenum" description="&lt;h1&gt;&lt;b&gt;USB device enumerator example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the USB host stack to implement&#xD;&#xA;a simple device enumerator. When a device is attached its descriptors are read&#xD;&#xA;and the vendor and product id's (VID/PID) are displayed on the LCD.&#xD;&#xA;The device attached will not be configured.&#xD;&#xA;&#xD;&#xA;Note that USB disk drives may fail, as some of them draw too much current&#xD;&#xA;when attached.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32GG-STK3700 Development Kit&#xD;&#xA;Device: EFM32GG990F1024&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3700 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32GG_STK3700/examples/usbhenum/SimplicityStudio/STK3700_usbhenum.slsproj,../hardware/kit/EFM32GG_STK3700/examples/usbhenum/arm/usbhenum.uvprojx,../hardware/kit/EFM32GG_STK3700/examples/usbhenum/iar/usbhenum.eww"/>
    <properties key="core.boardCompatibility" value="brd2200a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3700_usbxpress_echo" description="&lt;h1&gt;&lt;b&gt;USBXpress Echo example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project demonstrates the EFM32 USBXpress firmware library.&#xD;&#xA;It echoes all received data back to the host that sent it.&#xD;&#xA;&#xD;&#xA;The host-side application is the usbxpress_echo.py Python script found in the&#xD;&#xA;USBXpress SDK at Examples/Echo/Host. The USBXpress SDK is available for download&#xD;&#xA;at www.silabs.com/products/mcu/Pages/USBXpress.aspx.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32GG_STK3700 Development Kit&#xD;&#xA;Device: EFM32GG990F1024&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3700 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32GG_STK3700/examples/usbxpress_echo/SimplicityStudio/STK3700_usbxpress_echo.slsproj,../hardware/kit/EFM32GG_STK3700/examples/usbxpress_echo/arm/usbxpress_echo.uvprojx,../hardware/kit/EFM32GG_STK3700/examples/usbxpress_echo/iar/usbxpress_echo.eww"/>
    <properties key="core.boardCompatibility" value="brd2200a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3700_usbxpress_test_panel" description="&lt;h1&gt;&lt;b&gt;USBXpress Test Panel example&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project demonstrates the EFM32 USBXpress firmware library.&#xD;&#xA;It communicates with the TestPanel host application to send and receive data.&#xD;&#xA;TestPanel is included in the USBXpress SDK, available for download at:&#xD;&#xA;&#xD;&#xA;https://www.silabs.com/products/mcu/Pages/USBXpress.aspx&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32GG_STK3700 Development Kit&#xD;&#xA;Device: EFM32GG990F1024&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3700 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32GG_STK3700/examples/usbxpress_test_panel/SimplicityStudio/STK3700_usbxpress_test_panel.slsproj,../hardware/kit/EFM32GG_STK3700/examples/usbxpress_test_panel/arm/usbxpress_test_panel.uvprojx,../hardware/kit/EFM32GG_STK3700/examples/usbxpress_test_panel/iar/usbxpress_test_panel.eww"/>
    <properties key="core.boardCompatibility" value="brd2200a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3700_userpage" description="&lt;h1&gt;&lt;b&gt;Progamming and use of user flash page for data.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS  and demonstrates the programming of&#xD;&#xA;the user page in flash. The page can be used for data such as keys, serial&#xD;&#xA;numbers and other information that should not be deleted by a device erase.&#xD;&#xA;&#xD;&#xA;PB0 increases the main counter&#xD;&#xA;PB1 saves the main counter value to the userpage, and displays how many writes&#xD;&#xA;have been issued.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32GG_STK3700 Development Kit&#xD;&#xA;Device: EFM32GG990F1024&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3700 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32GG_STK3700/examples/userpage/SimplicityStudio/STK3700_userpage.slsproj,../hardware/kit/EFM32GG_STK3700/examples/userpage/arm/userpage.uvprojx,../hardware/kit/EFM32GG_STK3700/examples/userpage/iar/userpage.eww"/>
    <properties key="core.boardCompatibility" value="brd2200a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/userpage.c"/>
  </descriptors>
  <descriptors label="DK3650_blink" description="&lt;h1&gt;&lt;b&gt;Blink example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use EFM32 CMSIS and the emlib peripheral library&#xD;&#xA;to demonstrate the use of the LED on the EFM32LG-DK3650 development kit.&#xD;&#xA;This example is intended as a skeleton for new projects.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG-DK3650 Development Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3650 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32LG_DK3650/examples/blink/SimplicityStudio/DK3650_blink.slsproj,../hardware/kit/EFM32LG_DK3650/examples/blink/arm/blink.uvprojx,../hardware/kit/EFM32LG_DK3650/examples/blink/iar/blink.eww"/>
    <properties key="core.boardCompatibility" value="brd3601a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/blink.c"/>
  </descriptors>
  <descriptors label="DK3650_eeprom" description="&lt;h1&gt;&lt;b&gt;I2C eeprom example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS and emlib including DK BSP&#xD;&#xA;(board support package) and demonstrates the use of the I2C bus&#xD;&#xA;accessing the EEPROM on the DK.&#xD;&#xA;&#xD;&#xA;The first 3 bytes of the EEPROM is displayed on the TFT screen (this&#xD;&#xA;will normally be FFFFFF first time.) Since stored in EEPROM, the data&#xD;&#xA;survives resets and power cycles.&#xD;&#xA;&#xD;&#xA;The following usage is possible:&#xD;&#xA;&#xD;&#xA;- Joystick up/down will increment/decrement the first byte (Byte0) in&#xD;&#xA;  the EEPROM. Byte1 is then set to Byte0+1, and Byte2 is set to Byte1+1.&#xD;&#xA;- Press SW4 button to reset 3 first bytes to 0xFF.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG-DK3650 Development Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3650 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32LG_DK3650/examples/eeprom/SimplicityStudio/DK3650_eeprom.slsproj,../hardware/kit/EFM32LG_DK3650/examples/eeprom/arm/eeprom.uvprojx,../hardware/kit/EFM32LG_DK3650/examples/eeprom/iar/eeprom.eww"/>
    <properties key="core.boardCompatibility" value="brd3601a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/eepromtest.c"/>
  </descriptors>
  <descriptors label="DK3650_emode" description="&lt;h1&gt;&lt;b&gt;Energy Mode 0-4 example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project for the EFM32LG-DK3650 development kit, illustrates the&#xD;&#xA;various energy saving modes of the EFM32LG990F256.&#xD;&#xA;&#xD;&#xA;Use joystick Up and Down to select the demo, after pressing the kit AEM &#xD;&#xA;button to enable the display to be driven from the Leopard Gecko.&#xD;&#xA;&#xD;&#xA;When the correct demo has been selected, press PB1 to activate it. &#xD;&#xA;After this, you need to use the kit's AEM button again to go back to the&#xD;&#xA;energy mesaurement display. A new press on the AEM button will not bring&#xD;&#xA;back the original screen, as the Leopard Gecko will be in a sleep mode. You&#xD;&#xA;need to restart to test another demo.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG-DK3650 Development Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3650 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32LG_DK3650/examples/emode/SimplicityStudio/DK3650_emode.slsproj,../hardware/kit/EFM32LG_DK3650/examples/emode/arm/emode.uvprojx,../hardware/kit/EFM32LG_DK3650/examples/emode/iar/emode.eww"/>
    <properties key="core.boardCompatibility" value="brd3601a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/emode.c"/>
  </descriptors>
  <descriptors label="DK3650_fatcon" description="&lt;h1&gt;&lt;b&gt;FAT File System console example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use EFM32 CMSIS and the emlib peripheral library&#xD;&#xA;to demonstrate SPI-access to the Micro-SD card on the EFM32LG-DK3650&#xD;&#xA;development kit. The application gives a small &quot;console&quot; on the serial&#xD;&#xA;port which can be used to view and list contents of the file system.&#xD;&#xA;Serial configuration 115200-8-N-1 is used.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG-DK3650 Development Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3650 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32LG_DK3650/examples/fatcon/SimplicityStudio/DK3650_fatcon.slsproj,../hardware/kit/EFM32LG_DK3650/examples/fatcon/arm/fatcon.uvprojx,../hardware/kit/EFM32LG_DK3650/examples/fatcon/iar/fatcon.eww"/>
    <properties key="core.boardCompatibility" value="brd3601a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/fatcon.c"/>
  </descriptors>
  <descriptors label="DK3650_freertos_blink" description="&lt;h1&gt;&lt;b&gt;FreeRTOS - Blink example&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the FreeRTOS, and gives a basic demonstration of using two tasks to blink the LEDs on the board. &#xD;&#xA;It also shows how to use idle with different energy saving modes with or without ticless mode( from EM1 to EM3 - configured in FreeRTOSConfig.h file).&#xD;&#xA;This example is intended as a skeleton for new projects using FreeRTOS.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG-DK3650 Development Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3650 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32LG_DK3650/examples/freertos_blink/SimplicityStudio/DK3650_freertos_blink.slsproj,../hardware/kit/EFM32LG_DK3650/examples/freertos_blink/arm/freertos_blink.uvprojx,../hardware/kit/EFM32LG_DK3650/examples/freertos_blink/iar/freertos_blink.eww"/>
    <properties key="core.boardCompatibility" value="brd3601a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="DK3650_graphxy" description="&lt;h1&gt;&lt;b&gt;emWin example - XY Graph demonstration.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the emWin library.&#xD;&#xA;&#xD;&#xA;Control using touch panel or joystick.&#xD;&#xA;On application startup there is possibility to&#xD;&#xA;perform touch panel calibration.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG-DK3650 Development Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3650 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32LG_DK3650/examples/graphxy/SimplicityStudio/DK3650_graphxy.slsproj,../hardware/kit/EFM32LG_DK3650/examples/graphxy/arm/graphxy.uvprojx,../hardware/kit/EFM32LG_DK3650/examples/graphxy/iar/graphxy.eww"/>
    <properties key="core.boardCompatibility" value="brd3601a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/WIDGET_GraphXY.c"/>
  </descriptors>
  <descriptors label="DK3650_graphxy_mm" description="&lt;h1&gt;&lt;b&gt;emWin example - XY Graph demonstration - energy efficient.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the emWin library maintaining&#xD;&#xA;low power consumption.&#xD;&#xA;&#xD;&#xA;TFT driver is controlled in so called &quot;Memory Map&quot;&#xD;&#xA;configuration, where internal RAM of TFT controller &#xD;&#xA;is used. There is no additional framebuffer needed&#xD;&#xA;so this example could be run in small RAM footprint &#xD;&#xA;systems. The code fits 128kB flash and uses less &#xD;&#xA;than 32kB RAM.&#xD;&#xA;&#xD;&#xA;In idle mode (where no user interaction is required)&#xD;&#xA;EM2 mode is enabled, allowing reducing power consuption&#xD;&#xA;down to ~4uA.&#xD;&#xA;&#xD;&#xA;Control using touch panel or joystick.&#xD;&#xA;On application startup there is possibility to&#xD;&#xA;perform touch panel calibration.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG-DK3650 Development Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3650 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32LG_DK3650/examples/graphxy_mm/SimplicityStudio/DK3650_graphxy_mm.slsproj,../hardware/kit/EFM32LG_DK3650/examples/graphxy_mm/arm/graphxy_mm.uvprojx,../hardware/kit/EFM32LG_DK3650/examples/graphxy_mm/iar/graphxy_mm.eww"/>
    <properties key="core.boardCompatibility" value="brd3601a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/WIDGET_GraphXY.c"/>
  </descriptors>
  <descriptors label="DK3650_guidemo" description="&lt;h1&gt;&lt;b&gt;emWin example - show gui functionality&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the emWin library.&#xD;&#xA;&#xD;&#xA;Simple application showing different visual effects&#xD;&#xA;which could be achieved by means of emWin&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG-DK3650 Development Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3650 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32LG_DK3650/examples/guidemo/SimplicityStudio/DK3650_guidemo.slsproj,../hardware/kit/EFM32LG_DK3650/examples/guidemo/arm/guidemo.uvprojx,../hardware/kit/EFM32LG_DK3650/examples/guidemo/iar/guidemo.eww"/>
    <properties key="core.boardCompatibility" value="brd3601a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="guidemo.c"/>
  </descriptors>
  <descriptors label="DK3650_guidemo_mm" description="&lt;h1&gt;&lt;b&gt;emWin example - show gui functionality - energy efficient.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the emWin library maintaining&#xD;&#xA;low power consumption.&#xD;&#xA;&#xD;&#xA;TFT driver is controlled in so called &quot;Memory Map&quot;&#xD;&#xA;configuration, where internal RAM of TFT controller &#xD;&#xA;is used. There is no additional framebuffer needed &#xD;&#xA;so this example could be run in small RAM footprint &#xD;&#xA;systems.&#xD;&#xA;&#xD;&#xA;Simple application showing different visual effects&#xD;&#xA;which could be achieved by means of emWin.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG-DK3650 Development Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3650 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32LG_DK3650/examples/guidemo_mm/SimplicityStudio/DK3650_guidemo_mm.slsproj,../hardware/kit/EFM32LG_DK3650/examples/guidemo_mm/arm/guidemo_mm.uvprojx,../hardware/kit/EFM32LG_DK3650/examples/guidemo_mm/iar/guidemo_mm.eww"/>
    <properties key="core.boardCompatibility" value="brd3601a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/GUIDEMO.c"/>
  </descriptors>
  <descriptors label="DK3650_hardfault" description="&lt;h1&gt;&lt;b&gt;Hardfault handler example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project demonstrates the use of the hard fault handler, and&#xD;&#xA;how to install and use another HardFault exception handler to provide&#xD;&#xA;useful information when these types of errors occurs.&#xD;&#xA;The information is transmitted on the kit UART port, serial configuration&#xD;&#xA;115200-8-N-1 is used.&#xD;&#xA;&#xD;&#xA;Three function calls for triggering software errors to be trapped is&#xD;&#xA;provided, comment them in and out to select between them.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG-DK3650 Development Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3650 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32LG_DK3650/examples/hardfault/SimplicityStudio/DK3650_hardfault.slsproj,../hardware/kit/EFM32LG_DK3650/examples/hardfault/iar/hardfault.eww"/>
    <properties key="core.boardCompatibility" value="brd3601a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="DK3650_inttemp" description="&lt;h1&gt;&lt;b&gt;Internal temperature sensor example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS and emlib including DK BSP&#xD;&#xA;(board support package) and demonstrates the use of the internal&#xD;&#xA;temperature sensor and ADC on the EFM32.&#xD;&#xA;&#xD;&#xA;Note: EFM32 devices with production ID lower than 18 may measure inaccurate&#xD;&#xA;temperatures due to a sensor calibration bug.&#xD;&#xA;&#xD;&#xA;The following configuration is possible:&#xD;&#xA;&#xD;&#xA;- Joystick push toggles between Fahrenheit and Celsius display mode.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG-DK3650 Development Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3650 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32LG_DK3650/examples/inttemp/SimplicityStudio/DK3650_inttemp.slsproj,../hardware/kit/EFM32LG_DK3650/examples/inttemp/arm/inttemp.uvprojx,../hardware/kit/EFM32LG_DK3650/examples/inttemp/iar/inttemp.eww"/>
    <properties key="core.boardCompatibility" value="brd3601a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/inttemp.c"/>
  </descriptors>
  <descriptors label="DK3650_joystick" description="&lt;h1&gt;&lt;b&gt;Kit joystick control example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use EFM32 CMSIS and the emlib peripheral library to&#xD;&#xA;demonstrate the joystick control API of the development kit. Please note that&#xD;&#xA;you need to configure the AEM-state to &quot;EFM&quot; to be able to operate this&#xD;&#xA;example. The example also shows how to enable and use a GPIO interrupt.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG-DK3650 Development Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3650 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32LG_DK3650/examples/joystick/SimplicityStudio/DK3650_joystick.slsproj,../hardware/kit/EFM32LG_DK3650/examples/joystick/arm/joystick.uvprojx,../hardware/kit/EFM32LG_DK3650/examples/joystick/iar/joystick.eww"/>
    <properties key="core.boardCompatibility" value="brd3601a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/joystick.c"/>
  </descriptors>
  <descriptors label="DK3650_leuart" description="&lt;h1&gt;&lt;b&gt;LEUART/DMA in Energy mode2 output example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project reads and sends the data back to terminal using LEUART&#xD;&#xA;while staying in EM2.&#xD;&#xA;&#xD;&#xA;It uses the EFM32 CMSIS and emlib, to demonstrate the&#xD;&#xA;use of LEUART communication using DMA under the EM2 on the &#xD;&#xA;EFM32LG_DK3650 development kit.&#xD;&#xA;&#xD;&#xA;The LEUART is configured to be used with DMA under EM2.&#xD;&#xA;The terminal configuration is 9600-8-N-1.&#xD;&#xA;The DMA is configured to handle read and write data bytes from LEUART under EM2.&#xD;&#xA;&#xD;&#xA;Testing:&#xD;&#xA;1. Use the LEUART serial port header to connect the LEUART to your PC.&#xD;&#xA;2. Configure terminal to 9600-8-N-1.&#xD;&#xA;3. Enter characters from your keyboard and see if you receive the echo on the terminal.&#xD;&#xA;4. Check the average current consumption is equal to EM2 on Energy Profiler.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG_DK3650 Development Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3650 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32LG_DK3650/examples/leuart/SimplicityStudio/DK3650_leuart.slsproj,../hardware/kit/EFM32LG_DK3650/examples/leuart/arm/leuart.uvprojx,../hardware/kit/EFM32LG_DK3650/examples/leuart/iar/leuart.eww"/>
    <properties key="core.boardCompatibility" value="brd3601a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="DK3650_life" description="&lt;h1&gt;&lt;b&gt;Conway's game of life, TFT direct drive example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example demonstrate driving the EFM32GG_DK37850 kit's TFT-display &#xD;&#xA;from the EFM32 Leopard Gecko.&#xD;&#xA;&#xD;&#xA;This example is driving the display in &quot;direct drive&quot; (or mode generic in &#xD;&#xA;SSD2119 terms). Using this mode, the framebuffer resides in the external&#xD;&#xA;PSRAM memory of the development kit. This can be accessed directly to &#xD;&#xA;modify the screen contents.&#xD;&#xA;&#xD;&#xA;This demo demonstrates the use of frame buffer control, and implements&#xD;&#xA;Conway's Game of Life, with triple buffering support. Triple buffering&#xD;&#xA;works the following way&#xD;&#xA;  &#xD;&#xA; We have 3 frame buffers, A, B and C.&#xD;&#xA;&#xD;&#xA; Buffer A, is currently being displayed on the screen&#xD;&#xA; Buffer B, is being updated with graphics&#xD;&#xA;&#xD;&#xA; When B is finished - B is set to be displayed on the next frame update&#xD;&#xA;                      C is set to be updated with new graphics&#xD;&#xA;&#xD;&#xA; When C is finished - C is set to be displayed on the next frame update &#xD;&#xA;                      A is set to be updated with new graphics&#xD;&#xA;&#xD;&#xA;WARNING:&#xD;&#xA;SD2119 driver and GLIB graphics library are not intended for production &#xD;&#xA;purposes, and are included here to illustrate TFT display driving only.&#xD;&#xA;&#xD;&#xA;These components are subject to changes in API/usage and there will be &#xD;&#xA;no effort to keep compatibility, or to support this software in any way.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG-DK3650 Development Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3650 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32LG_DK3650/examples/life/SimplicityStudio/DK3650_life.slsproj,../hardware/kit/EFM32LG_DK3650/examples/life/arm/life.uvprojx,../hardware/kit/EFM32LG_DK3650/examples/life/iar/life.eww"/>
    <properties key="core.boardCompatibility" value="brd3601a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/life.c"/>
  </descriptors>
  <descriptors label="DK3650_lines" description="&lt;h1&gt;&lt;b&gt;Lines TFT Direct Drive example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example demonstrate driving the EFM32GG_DK37850 kit's TFT-display&#xD;&#xA;from the EFM32 Leopard Gecko in &quot;direct drive&quot; (or mode generic in&#xD;&#xA;SSD2119 terms). Using this mode, the framebuffer resides in the external&#xD;&#xA;PSRAM memory of the development kit. This can be accessed directly to&#xD;&#xA;modify the screen contents.&#xD;&#xA;&#xD;&#xA;In this mode, the display is configured for having 16-bits per pixel,&#xD;&#xA;RGB with 5-6-5 bits color components of each. The framebuffer is located&#xD;&#xA;at EBI bank 2, offset address 0x88000000. This demo simply draws some&#xD;&#xA;alternating, coloured lines over the entire display.&#xD;&#xA;&#xD;&#xA;WARNING:&#xD;&#xA;SD2119 driver and GLIB graphics library are not intended for production &#xD;&#xA;purposes, and are included here to illustrate TFT display driving only.&#xD;&#xA;&#xD;&#xA;These components are subject to changes in API/usage and there will be &#xD;&#xA;no effort to keep compatibility, or to support this software in any way.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG-DK3650 Development Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3650 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32LG_DK3650/examples/lines/SimplicityStudio/DK3650_lines.slsproj,../hardware/kit/EFM32LG_DK3650/examples/lines/arm/lines.uvprojx,../hardware/kit/EFM32LG_DK3650/examples/lines/iar/lines.eww"/>
    <properties key="core.boardCompatibility" value="brd3601a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/lines.c"/>
  </descriptors>
  <descriptors label="DK3650_mandel" description="&lt;h1&gt;&lt;b&gt;Mandelbrot image zoom example, using TFT direct drive.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example demonstrate driving the EFM32GG_DK37850 kit's TFT-display &#xD;&#xA;from the EFM32 Leopard Gecko.&#xD;&#xA;&#xD;&#xA;The example is driving the display in &quot;direct drive&quot; (or mode generic in &#xD;&#xA;SSD2119 terms). Using this mode, the framebuffer resides in the external&#xD;&#xA;PSRAM memory of the development kit. This can be accessed directly to &#xD;&#xA;modify the screen contents.&#xD;&#xA;&#xD;&#xA;This example makes a simple mandelbrot fractal zoomer, using up most &#xD;&#xA;of the external 4MB PSRAM to store the various images, where the screens&#xD;&#xA;are being flipped around in the interrupt routine.&#xD;&#xA;&#xD;&#xA;WARNING:&#xD;&#xA;SD2119 driver and GLIB graphics library are not intended for production &#xD;&#xA;purposes, and are included here to illustrate TFT display driving only.&#xD;&#xA;These components are subject to changes in API/usage and there will be &#xD;&#xA;no effort to keep compatibility, or to support this software in any way.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG-DK3650 Development Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3650 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32LG_DK3650/examples/mandel/SimplicityStudio/DK3650_mandel.slsproj,../hardware/kit/EFM32LG_DK3650/examples/mandel/arm/mandel.uvprojx,../hardware/kit/EFM32LG_DK3650/examples/mandel/iar/mandel.eww"/>
    <properties key="core.boardCompatibility" value="brd3601a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/mandel.c"/>
  </descriptors>
  <descriptors label="DK3650_norflash" description="&lt;h1&gt;&lt;b&gt;Norflash example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example demonstrates use of the NORFLASH driver.&#xD;&#xA;&#xD;&#xA;Connect a terminal to the serialport of the DK (115200-N-8-1).&#xD;&#xA;Operations on the flash are initiated by issuing commands on the terminal.&#xD;&#xA;Command &quot;h&quot; will print a help screen on the terminal :&#xD;&#xA;&#xD;&#xA;    Available commands:&#xD;&#xA;        fi        : Show flash information&#xD;&#xA;        h         : Show this help&#xD;&#xA;        dump &lt;n&gt;  : Show first 16 bytes of sector &lt;n&gt;&#xD;&#xA;        dumps &lt;n&gt; : Show entire sector &lt;n&gt; content&#xD;&#xA;        blc &lt;n&gt;   : Blankcheck sector &lt;n&gt;&#xD;&#xA;        bld       : Blankcheck entire device&#xD;&#xA;        erase &lt;n&gt; : Erase sector &lt;n&gt;&#xD;&#xA;        eraseall  : Erase entire device&#xD;&#xA;        prog &lt;n&gt;  : Program first 16 bytes of sector &lt;n&gt; with byte pattern&#xD;&#xA;        exec &lt;n&gt;  : Execute &quot;blink&quot; from sector &lt;n&gt;&#xD;&#xA;        misc      : Test misc. NORFLASH API functions&#xD;&#xA;        rspeed    : Measure flash read speed&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG-DK3650 Development Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3650 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32LG_DK3650/examples/norflash/SimplicityStudio/DK3650_norflash.slsproj,../hardware/kit/EFM32LG_DK3650/examples/norflash/arm/norflash.uvprojx,../hardware/kit/EFM32LG_DK3650/examples/norflash/iar/norflash.eww"/>
    <properties key="core.boardCompatibility" value="brd3601a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="DK3650_peripherals" description="&lt;h1&gt;&lt;b&gt;Peripheral control example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use EFM32 CMSIS and the emlib peripheral library to&#xD;&#xA;demonstrate how to enable the access to various on-board peripherals. To&#xD;&#xA;reduce leakage current, the EFM32LG-DK3650 board has several analog switches, and to&#xD;&#xA;enable extended functionality there are multiplexers which need to be&#xD;&#xA;configured correctly for most of the kit peripherals.&#xD;&#xA;&#xD;&#xA;The on-board LEDs will light up according to the configured state of the&#xD;&#xA;peripherals.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG-DK3650 Development Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3650 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32LG_DK3650/examples/peripherals/SimplicityStudio/DK3650_peripherals.slsproj,../hardware/kit/EFM32LG_DK3650/examples/peripherals/arm/peripherals.uvprojx,../hardware/kit/EFM32LG_DK3650/examples/peripherals/iar/peripherals.eww"/>
    <properties key="core.boardCompatibility" value="brd3601a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/periph.c"/>
  </descriptors>
  <descriptors label="DK3650_powertest" description="&lt;h1&gt;&lt;b&gt;Power test example, running demonstration of energy modes.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use EFM32 CMSIS and the emlib peripheral library&#xD;&#xA;to demonstrate the use of the various Energy Modes available on the&#xD;&#xA;EFM32LG990F256. When running this example, the EnergyAware Profiler tool&#xD;&#xA;in Simplicity Studio can be used to show the power consumption of each&#xD;&#xA;energy mode.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG-DK3650 Development Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3650 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32LG_DK3650/examples/powertest/SimplicityStudio/DK3650_powertest.slsproj,../hardware/kit/EFM32LG_DK3650/examples/powertest/arm/powertest.uvprojx,../hardware/kit/EFM32LG_DK3650/examples/powertest/iar/powertest.eww"/>
    <properties key="core.boardCompatibility" value="brd3601a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="DK3650_preamp" description="&lt;h1&gt;&lt;b&gt;Pre-amplifier example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS including DK BSP (board &#xD;&#xA;support package) and demonstrates the use of the ADC/DAC/DMA/PRS/TIMER&#xD;&#xA;in order to implement a very simple pre-amplifier.&#xD;&#xA;&#xD;&#xA;- Connect an audio source to the audio in connector&#xD;&#xA;  on the DVK, for instance an MP3 player.&#xD;&#xA;- Connect an active loudspeaker with built-in amplifier&#xD;&#xA;  to the audio out connector on the DVK.&#xD;&#xA;&#xD;&#xA;WARNING:&#xD;&#xA;--------&#xD;&#xA;Do not attach or use headphones with this example. Use small&#xD;&#xA;loadspeakers with built in amplification, ensuring volume is at an&#xD;&#xA;acceptable level. Exposure to loud noises from any source for extended&#xD;&#xA;periods of time may temporarily or permanently affect your hearing. The&#xD;&#xA;louder the volume sound level, the less time is required before your&#xD;&#xA;hearing could be affected. Hearing damage from loud noise is sometimes&#xD;&#xA;undetectable at first and can have a cumulative effect.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;The input signal is converted to digital and level&#xD;&#xA;adjusted by the EFM32 core before being converted back&#xD;&#xA;to analog.&#xD;&#xA;&#xD;&#xA;The output volume level is adjusted with kit pushbuttons PB1 and PB2.&#xD;&#xA;Output level is indicated by the 14 leftmost user LEDs.&#xD;&#xA;&#xD;&#xA;The example will clip the output signal if exceeding predefined&#xD;&#xA;level. This may occur due to too high input signal and/or to high&#xD;&#xA;volume setting. Clipping is indicated by the rightmost user LED.&#xD;&#xA;&#xD;&#xA;Push the AEM button on the kit until &quot;EFM&quot; shows in the upper right&#xD;&#xA;corner of the TFT display to activate PB1 and PB2 pushbuttons.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG-DK3650 Development Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3650 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32LG_DK3650/examples/preamp/SimplicityStudio/DK3650_preamp.slsproj,../hardware/kit/EFM32LG_DK3650/examples/preamp/arm/preamp.uvprojx,../hardware/kit/EFM32LG_DK3650/examples/preamp/iar/preamp.eww"/>
    <properties key="core.boardCompatibility" value="brd3601a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/preamp.c"/>
  </descriptors>
  <descriptors label="DK3650_radialmenu" description="&lt;h1&gt;&lt;b&gt;emWin example - radial menu demonstartion.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the emWin library.&#xD;&#xA;&#xD;&#xA;Control using touch panel or joystick.&#xD;&#xA;If touch panel misaligned, there is possibility to&#xD;&#xA;perform touch panel calibration, just press PB4.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG-DK3650 Development Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3650 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32LG_DK3650/examples/radialmenu/SimplicityStudio/DK3650_radialmenu.slsproj,../hardware/kit/EFM32LG_DK3650/examples/radialmenu/arm/radialmenu.uvprojx,../hardware/kit/EFM32LG_DK3650/examples/radialmenu/iar/radialmenu.eww"/>
    <properties key="core.boardCompatibility" value="brd3601a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/WM_RadialMenu.c"/>
  </descriptors>
  <descriptors label="DK3650_realtime" description="&lt;h1&gt;&lt;b&gt;emWin example - dynamic graph update.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the emWin library.&#xD;&#xA;&#xD;&#xA;Control using touch panel.&#xD;&#xA;On application startup there is possibility to&#xD;&#xA;perform touch panel calibration.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG-DK3650 Development Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3650 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32LG_DK3650/examples/realtime/SimplicityStudio/DK3650_realtime.slsproj,../hardware/kit/EFM32LG_DK3650/examples/realtime/arm/realtime.uvprojx,../hardware/kit/EFM32LG_DK3650/examples/realtime/iar/realtime.eww"/>
    <properties key="core.boardCompatibility" value="brd3601a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/VSCREEN_RealTime.c"/>
  </descriptors>
  <descriptors label="DK3650_reversi" description="&lt;h1&gt;&lt;b&gt;emWin example - reversi game.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the emWin library.&#xD;&#xA;&#xD;&#xA;Control using touch pad or joystick. If there&#xD;&#xA;is misalignment when using touch pad please&#xD;&#xA;do calibration select from menu:&#xD;&#xA;Options-&gt;Touch Panel calibration.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG-DK3650 Development Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3650 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32LG_DK3650/examples/reversi/SimplicityStudio/DK3650_reversi.slsproj,../hardware/kit/EFM32LG_DK3650/examples/reversi/arm/reversi.uvprojx,../hardware/kit/EFM32LG_DK3650/examples/reversi/iar/reversi.eww"/>
    <properties key="core.boardCompatibility" value="brd3601a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/reversi.c"/>
  </descriptors>
  <descriptors label="DK3650_reversi_mm" description="&lt;h1&gt;&lt;b&gt;emWin example - reversi game - energy efficient.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the emWin library maintaining&#xD;&#xA;low power consumption.&#xD;&#xA;&#xD;&#xA;TFT driver is controlled in so called &quot;Memory Map&quot;&#xD;&#xA;configuration, where internal RAM of TFT controller &#xD;&#xA;is used. There is no additional framebuffer needed&#xD;&#xA;so this example could be run in small RAM footprint &#xD;&#xA;systems. The code fits 128kB flash and uses less &#xD;&#xA;than 32kB RAM.&#xD;&#xA;&#xD;&#xA;In idle mode (where no user interaction is required)&#xD;&#xA;EM2 mode is enabled, allowing reducing power consumption&#xD;&#xA;down to 4uA.&#xD;&#xA;&#xD;&#xA;The game is controlled using touch pad or joystick. &#xD;&#xA;If there is misalignment when using touch pad please&#xD;&#xA;do calibration - from menu select:&#xD;&#xA;Options-&gt;Touch Panel calibration.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG-DK3650 Development Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3650 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32LG_DK3650/examples/reversi_mm/SimplicityStudio/DK3650_reversi_mm.slsproj,../hardware/kit/EFM32LG_DK3650/examples/reversi_mm/arm/reversi_mm.uvprojx,../hardware/kit/EFM32LG_DK3650/examples/reversi_mm/iar/reversi_mm.eww"/>
    <properties key="core.boardCompatibility" value="brd3601a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/reversi.c"/>
  </descriptors>
  <descriptors label="DK3650_rs232" description="&lt;h1&gt;&lt;b&gt;RS232/UART output example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS and emlib, to demonstrates the&#xD;&#xA;use of UART and LEUART communication on the EFM32LG-DK3650 development kit.&#xD;&#xA;&#xD;&#xA;For the default UART communication, serial configuration 115200-8-N-1 is used.&#xD;&#xA;If LEUART mode is configured by defining &quot;RETARGET_LEUART1&quot; as a build option,&#xD;&#xA;terminal configuration is 9600-8-N-1.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG-DK3650 Development Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3650 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32LG_DK3650/examples/rs232/SimplicityStudio/DK3650_rs232.slsproj,../hardware/kit/EFM32LG_DK3650/examples/rs232/arm/rs232.uvprojx,../hardware/kit/EFM32LG_DK3650/examples/rs232/iar/rs232.eww"/>
    <properties key="core.boardCompatibility" value="brd3601a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="DK3650_scroller" description="&lt;h1&gt;&lt;b&gt;Horizontal single pixel text scroller example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example demonstrate driving the EFM32LG_DK3650 kit's TFT-display&#xD;&#xA;from the EFM32 Leopard Gecko.&#xD;&#xA;&#xD;&#xA;This example is driving the display in &quot;direct drive&quot; (or mode generic in&#xD;&#xA;SSD2119 terms). Using this mode, the framebuffer resides in the external&#xD;&#xA;PSRAM memory of the development kit. This can be accessed directly to&#xD;&#xA;modify the screen contents.&#xD;&#xA;&#xD;&#xA;This demo demonstrates the use of frame buffer control, and implements&#xD;&#xA;a horizontal scroller and shows the hardware assisted masking and&#xD;&#xA;blending capabilities.&#xD;&#xA;&#xD;&#xA;The horizontal scroller is implemented by using a large framebuffer,&#xD;&#xA;which is shifted right one pixel for each horizontal scan line, using&#xD;&#xA;the horizontal sync interrupt, and frame base sync trigger  capability&#xD;&#xA;of the Leopard Gecko devices.&#xD;&#xA;&#xD;&#xA;The masking and blending is hardware assisted. The geckos being drawn&#xD;&#xA;on screen are using the same software procedure, only adding mask and&#xD;&#xA;enable configurations.&#xD;&#xA;&#xD;&#xA;WARNING:&#xD;&#xA;SD2119 driver and GLIB graphics library are not intended for production&#xD;&#xA;purposes, and are included here to illustrate TFT display driving only.&#xD;&#xA;This component are subject to changes in API/usage and there will be&#xD;&#xA;no effort to keep compatibility, or to support this software in any way.&#xD;&#xA;&#xD;&#xA;NOTE:&#xD;&#xA;This example is too large to be built with IDEs with 32KB size limits.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG-DK3650 Development Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3650 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32LG_DK3650/examples/scroller/SimplicityStudio/DK3650_scroller.slsproj,../hardware/kit/EFM32LG_DK3650/examples/scroller/arm/scroller.uvprojx,../hardware/kit/EFM32LG_DK3650/examples/scroller/iar/scroller.eww"/>
    <properties key="core.boardCompatibility" value="brd3601a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/scroller.c"/>
  </descriptors>
  <descriptors label="DK3650_slideshow" description="&lt;h1&gt;&lt;b&gt;Slideshow example using microSD.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example uses the FatFS library for accssing a filesystem on a &#xD;&#xA;microSD card. It will loop through the files present on the card. &#xD;&#xA;BMP files with a resolution less than the resolution of the screen&#xD;&#xA;(320x240) will be displayed on the TFT.&#xD;&#xA;&#xD;&#xA;The demo has two modes of operation. If a file called &quot;files.txt&quot; is &#xD;&#xA;present on the root of the microSD card, this file will be read. The&#xD;&#xA;BMP files will then be displayed in the order they are listed in the&#xD;&#xA;file.&#xD;&#xA;&#xD;&#xA;If this file is not present, all files on the root of tile SD card is &#xD;&#xA;looped through and displayed. If the BMP decoder cannot display a &#xD;&#xA;certain file, an error message is displayed.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;WARNING:&#xD;&#xA;SD2119 driver and GLIB graphics library are not intended for production &#xD;&#xA;purposes, and are included here to illustrate TFT display driving only.&#xD;&#xA;This components are subject to changes in API/usage and there will be &#xD;&#xA;no effort to keep compatibility, or to support this software in any way.&#xD;&#xA;&#xD;&#xA;NOTE:&#xD;&#xA;This example is too large to be built with IDEs with 32KB size limits.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG-DK3650 Development Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3650 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32LG_DK3650/examples/slideshow/SimplicityStudio/DK3650_slideshow.slsproj,../hardware/kit/EFM32LG_DK3650/examples/slideshow/arm/slideshow.uvprojx,../hardware/kit/EFM32LG_DK3650/examples/slideshow/iar/slideshow.eww"/>
    <properties key="core.boardCompatibility" value="brd3601a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/slideshow.c"/>
  </descriptors>
  <descriptors label="DK3650_temperature" description="&lt;h1&gt;&lt;b&gt;I2C temperature sensor example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS and emlib including DK BSP&#xD;&#xA;(board support package) to demonstrate the use of the I2C bus and &#xD;&#xA;the temperature sensor on the DK.&#xD;&#xA;&#xD;&#xA;Note: On some DK boards the temperature sensor is placed too close &#xD;&#xA;to components that generate significant heat. The sensor may therefore&#xD;&#xA;read a temperature 2-4 degrees Celsius higher than the ambient temperature.&#xD;&#xA;&#xD;&#xA;The following configuration is possible:&#xD;&#xA;&#xD;&#xA;- Joystick push toggles between Fahrenheit and Celsius display mode.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG-DK3650 Development Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3650 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32LG_DK3650/examples/temperature/SimplicityStudio/DK3650_temperature.slsproj,../hardware/kit/EFM32LG_DK3650/examples/temperature/arm/temperature.uvprojx,../hardware/kit/EFM32LG_DK3650/examples/temperature/iar/temperature.eww"/>
    <properties key="core.boardCompatibility" value="brd3601a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/temperature.c"/>
  </descriptors>
  <descriptors label="DK3650_tft" description="&lt;h1&gt;&lt;b&gt;TFT Addressed map coloured blocks example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS including emlib and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the kit's TFT-display from the EFM32 Leopard Gecko.&#xD;&#xA;&#xD;&#xA;This example is driving the display in what is called &quot;address mapped&#xD;&#xA;mode&quot; (or mode 8080). Using this mode, the framebuffer resides in the&#xD;&#xA;memory of the SSD2119 controller chip.&#xD;&#xA;&#xD;&#xA;WARNING:&#xD;&#xA;SD2119 driver and GLIB graphics library are not intended for production&#xD;&#xA;purposes, and are included here to illustrate TFT display driving only.&#xD;&#xA;&#xD;&#xA;These components are subject to changes in API/usage and there will be&#xD;&#xA;no effort to keep compatibility, or to support this software in any way.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG-DK3650 Development Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3650 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32LG_DK3650/examples/tft/SimplicityStudio/DK3650_tft.slsproj,../hardware/kit/EFM32LG_DK3650/examples/tft/arm/tft.uvprojx,../hardware/kit/EFM32LG_DK3650/examples/tft/iar/tft.eww"/>
    <properties key="core.boardCompatibility" value="brd3601a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/tft.c"/>
  </descriptors>
  <descriptors label="DK3650_tftprintf" description="&lt;h1&gt;&lt;b&gt;Printf output on TFT-LCD.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS including emlib and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the kit's TFT-display from the EFM32 Leopard Gecko. In this case the&#xD;&#xA;display is used as output from a regular printf in the application, as&#xD;&#xA;an alternative to the RS232 port.&#xD;&#xA;&#xD;&#xA;This example is driving the display in what is called &quot;address mapped&#xD;&#xA;mode&quot; (or mode 8080). Using this mode, the framebuffer resides in the&#xD;&#xA;memory of the SSD2119 controller chip of the URT TFT-LCD display.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG-DK3650 Development Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3650 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32LG_DK3650/examples/tftprintf/SimplicityStudio/DK3650_tftprintf.slsproj,../hardware/kit/EFM32LG_DK3650/examples/tftprintf/arm/tftprintf.uvprojx,../hardware/kit/EFM32LG_DK3650/examples/tftprintf/iar/tftprintf.eww"/>
    <properties key="core.boardCompatibility" value="brd3601a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/tftprintf.c"/>
  </descriptors>
  <descriptors label="DK3650_touch" description="&lt;h1&gt;&lt;b&gt;Touchscreen example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example demonstrate use of the resistive touchscreen on the&#xD;&#xA;EFM32LG_DK3650 kit's TFT-display.&#xD;&#xA;&#xD;&#xA;Touchscreen X and Y positions are obtained using the ADC. Two ADC readouts&#xD;&#xA;are performed, one for X position and one for Y position.&#xD;&#xA;&#xD;&#xA;The example allows freehand drawing and calibration. After starting the example&#xD;&#xA;make sure that the EFM32 control the display (use AEM button to toggle).&#xD;&#xA;&#xD;&#xA;The calibrations algorithm used is from an article in EETimes 5/31/2002 by&#xD;&#xA;Carlos E. Vidales.&#xD;&#xA;&#xD;&#xA;Initial touchscreen calibration is &quot;off&quot; on purpose to demonstrate that&#xD;&#xA;calibration takes effect.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG-DK3650 Development Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3650 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32LG_DK3650/examples/touch/SimplicityStudio/DK3650_touch.slsproj,../hardware/kit/EFM32LG_DK3650/examples/touch/arm/touch.uvprojx,../hardware/kit/EFM32LG_DK3650/examples/touch/iar/touch.eww"/>
    <properties key="core.boardCompatibility" value="brd3601a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="DK3650_ucos2" description="&lt;h1&gt;&lt;b&gt;uC/OS-II RTOS on EFM32 using example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This is a port of the uC/OS-II RTOS from Micrium Inc, http://www.micrium.com&#xD;&#xA;&#xD;&#xA;The port has been adapted by Silicon Labs for use with our Development&#xD;&#xA;Kit. It requires the standard EFM32 CMSIS package (including emlib).&#xD;&#xA;&#xD;&#xA;The example has three tasks:&#xD;&#xA; - Task1: LED blink task&#xD;&#xA; - Task2: Receives characters from serial port and posts message to Task3&#xD;&#xA; - Task3: Receives message from Task2 and writes it on TFT display&#xD;&#xA;&#xD;&#xA;Standard output is redirected to TFT display and standard input is UART1.&#xD;&#xA;&#xD;&#xA;uC/OS-II is provided in source form for FREE evaluation, for educational use&#xD;&#xA;or for peaceful research.&#xD;&#xA;&#xD;&#xA;If you plan on using uC/OS-II in a commercial product you need to contact&#xD;&#xA;Micrium to properly license its use in your product. We provide ALL the&#xD;&#xA;source code for your convenience and to help you experience uC/OS-II.&#xD;&#xA;The fact that the source is provided does NOT mean that you can use it without&#xD;&#xA;paying a licensing fee.&#xD;&#xA;&#xD;&#xA;For commercial use, contact Micrium, http://www.micrium.com for details.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG_DK3650 Starter Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3650 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32LG_DK3650/examples/ucos2_port/arm/ucos2.uvprojx,../hardware/kit/EFM32LG_DK3650/examples/ucos2_port/iar/ucos2.eww"/>
    <properties key="core.boardCompatibility" value="brd3601a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/app/app.c"/>
  </descriptors>
  <descriptors label="DK3650_ucos3" description="&lt;h1&gt;&lt;b&gt;uC/OS-III RTOS on EFM32 using example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This is a port of the uC/OS-III RTOS from Micrium Inc, http://www.micrium.com&#xD;&#xA;&#xD;&#xA;The port has been adapted by Silicon Labs for use with our Development Kit..&#xD;&#xA;It requires the standard EFM32 CMSIS package (including emlib).&#xD;&#xA;&#xD;&#xA;The example has three tasks:&#xD;&#xA; - Task1: LED blink task&#xD;&#xA; - Task2: Receives characters from serial port and posts message to Task3&#xD;&#xA; - Task3: Receives message from Task2 and writes it on TFT display&#xD;&#xA;&#xD;&#xA;Standard output is redirected to TFT display and standard input is UART1.&#xD;&#xA;&#xD;&#xA;uC/OS-III is provided in source form for FREE evaluation, for educational use&#xD;&#xA;or for peaceful research.&#xD;&#xA;&#xD;&#xA;If you plan on using uC/OS-III in a commercial product you need to contact&#xD;&#xA;Micrium to properly license its use in your product. We provide ALL the&#xD;&#xA;source code for your convenience and to help you experience uC/OS-III.&#xD;&#xA;The fact that the source is provided does NOT mean that you can use it without&#xD;&#xA;paying a licensing fee.&#xD;&#xA;&#xD;&#xA;For commercial use, contact Micrium, http://www.micrium.com for details.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG_DK3650 Starter Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3650 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32LG_DK3650/examples/ucos3_port/arm/ucos3.uvprojx,../hardware/kit/EFM32LG_DK3650/examples/ucos3_port/iar/ucos3.eww"/>
    <properties key="core.boardCompatibility" value="brd3601a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/app/app.c"/>
  </descriptors>
  <descriptors label="DK3650_usbdcdc" description="&lt;h1&gt;&lt;b&gt;USB CDC virtual COM port example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use the EFM32 USB Device protocol stack&#xD;&#xA;and implements an USB CDC based virtual COM port.&#xD;&#xA;&#xD;&#xA;UART1 on the DK is used as the physical COM port.&#xD;&#xA;Any data sent to the virtual CDC COM port is transmitted on UART1.&#xD;&#xA;Any data received on UART1 is transmitted to the virtual port.&#xD;&#xA;&#xD;&#xA;When connecting the mcu plugin boards USB port to a Windows host PC,&#xD;&#xA;the new hardware &quot;Wizard&quot; may or may not prompt you to provide a driver&#xD;&#xA;installation file (.inf file) depending on your Windows version.&#xD;&#xA;&#xD;&#xA;Manually direct Windows to look for drivers in the directory where you have&#xD;&#xA;unpacked your copy of the Silabs-CDC_Install.zip driver file.&#xD;&#xA;This can be done with the new device &quot;Wizard&quot; which might pop up after device&#xD;&#xA;insertion, or you can open &quot;Device Manager&quot;, left click on the new device and&#xD;&#xA;select &quot;Update Driver Software...&quot;.&#xD;&#xA;&#xD;&#xA;Some versions of Windows wont allow you to install unsigned drivers. If you&#xD;&#xA;suspect this, reboot the PC into &quot;Disable Driver Signature Enforcement&quot; mode.&#xD;&#xA;Win7:&#xD;&#xA;Repeatedly push F8 during boot until the boot menu appears.&#xD;&#xA;Select the &quot;Disable Driver Signature Enforcement&quot; option.&#xD;&#xA;Win10:&#xD;&#xA;Start Menu-&gt;Power button-&gt;Hold Shift key down and select Restart.&#xD;&#xA;When computer has restarted into the options menu, select:&#xD;&#xA;Troubleshoot-&gt;Advanced Option-&gt;Startup Settings-&gt;Restart-&gt;Disable driver signature enforcement&#xD;&#xA;You should now be able to install an unsigned driver.&#xD;&#xA;&#xD;&#xA;When a driver is succesfully installed, the device will be listed as a &quot;Ports&quot;&#xD;&#xA;device in Device Manager, double-click it, select the &quot;Port Settings&quot; tab and&#xD;&#xA;maybe the &quot;Advanced...&quot; button to set serial port properties.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG-DK3650 Development Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3650 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32LG_DK3650/examples/usbdcdc/SimplicityStudio/DK3650_usbdcdc.slsproj,../hardware/kit/EFM32LG_DK3650/examples/usbdcdc/arm/usbdcdc.uvprojx,../hardware/kit/EFM32LG_DK3650/examples/usbdcdc/iar/usbdcdc.eww"/>
    <properties key="core.boardCompatibility" value="brd3601a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="DK3650_usbdcomposite" description="&lt;h1&gt;&lt;b&gt;USB Composite Device example, MSD + CDC + Vendor unique functions.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use the EFM32 USB Device protocol stack&#xD;&#xA;to implement a composite USB device with tree functions:&#xD;&#xA;&#xD;&#xA; - Mass storage class device (MSD) implementing a 4MB disk&#xD;&#xA; - Communication device class (CDC) implementing a USB&lt;-&gt;UART bridge&#xD;&#xA; - Vendor Unique Device similar to the usbdvud example (control DK leds).&#xD;&#xA;&#xD;&#xA;As the CDC function has two interface, the CDC function use an Interface&#xD;&#xA;Association Descriptor (IAD). A composite device which use IAD's must be&#xD;&#xA;implemented using bDeviceClass=0xEF, bDeviceSubClass=2 and bDeviceProtocol=1.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;The vendor unique function (VUD).&#xD;&#xA;=================================&#xD;&#xA;Toggles user LED's 0-4 when receiving vendor unique class setup commands.&#xD;&#xA;Intended to be used together with the &quot;libusb&quot; device driver, and host&#xD;&#xA;application EFM32-LedApp.exe (a Windows application).&#xD;&#xA;You will find libusb and EFM32-LedApp.exe in the &quot;host&quot; folder of the usbdvud&#xD;&#xA;example. Check EFM32_Vendor_Unique_Device.inf to see how both the usbdvud&#xD;&#xA;example VID_10C4&amp;PID_0001 and this composite example VID_10C4&amp;PID_0008&amp;MI_00&#xD;&#xA;are specified.&#xD;&#xA;&#xD;&#xA;The CDC COM port function.&#xD;&#xA;==========================&#xD;&#xA;Implements an USB CDC based virtual COM port. UART1 on the DK is used as the&#xD;&#xA;physical COM port. Any data sent to the virtual CDC COM port is transmitted on&#xD;&#xA;UART1. Any data received on UART1 is transmitted to the virtual port.&#xD;&#xA;&#xD;&#xA;USB Mass Storage Device function.&#xD;&#xA;=================================&#xD;&#xA;Implements a Mass Storage Class device (MSD) with 4MByte in external PSRAM.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Windows driver installation.&#xD;&#xA;============================&#xD;&#xA;The first time the composite USB device is connected to the host, Windows must&#xD;&#xA;install drivers for the VUD and CDC functions.&#xD;&#xA;&#xD;&#xA;To control the VUD function with EFM32-LedApp.exe you need to install &quot;libusb&quot;&#xD;&#xA;device driver. Manually direct Windows to look for this driver in the &quot;host&quot;&#xD;&#xA;folder of the usbdvud example.&#xD;&#xA;This can be done with the new device &quot;Wizard&quot; which might pop up after device&#xD;&#xA;insertion, or you can open &quot;Device Manager&quot;, left click on one of functions&#xD;&#xA;of the new composite device (marked with yellow exclamation mark) and&#xD;&#xA;select &quot;Update Driver Software...&quot;.&#xD;&#xA;After libusb is installed you can start EFM32-LedApp.exe to control leds on&#xD;&#xA;the DK.&#xD;&#xA;&#xD;&#xA;Similarly for the CDC function, direct Windows to look for a driver in the&#xD;&#xA;folder where you have unpacked your copy of the Silabs-CDC_Install.zip driver&#xD;&#xA;file.&#xD;&#xA;This can be done with the new device &quot;Wizard&quot; which might pop up after device&#xD;&#xA;insertion, or you can open &quot;Device Manager&quot;, left click on the new device and&#xD;&#xA;select &quot;Update Driver Software...&quot;. Note how the .inf file specifies interface&#xD;&#xA;number 2, VID_10C4&amp;PID_0008&amp;MI_02.&#xD;&#xA;When the serial port driver is succesfully installed, the device will be listed&#xD;&#xA;as a &quot;Ports&quot; device in Device Manager, double-click it, select the&#xD;&#xA;&quot;Port Settings&quot; tab and maybe the &quot;Advanced...&quot; button to set serial port&#xD;&#xA;properties.&#xD;&#xA;&#xD;&#xA;Some versions of Windows wont allow you to install unsigned drivers. If you&#xD;&#xA;suspect this, reboot the PC into &quot;Disable Driver Signature Enforcement&quot; mode.&#xD;&#xA;Win7:&#xD;&#xA;Repeatedly push F8 during boot until the boot menu appears.&#xD;&#xA;Select the &quot;Disable Driver Signature Enforcement&quot; option.&#xD;&#xA;Win10:&#xD;&#xA;Start Menu-&gt;Power button-&gt;Hold Shift key down and select Restart.&#xD;&#xA;When computer has restarted into the options menu, select:&#xD;&#xA;Troubleshoot-&gt;Advanced Option-&gt;Startup Settings-&gt;Restart-&gt;Disable driver signature enforcement&#xD;&#xA;You should now be able to install an unsigned driver.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG-DK3650 Development Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3650 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32LG_DK3650/examples/usbdcomposite/SimplicityStudio/DK3650_usbdcomposite.slsproj,../hardware/kit/EFM32LG_DK3650/examples/usbdcomposite/arm/usbdcomposite.uvprojx,../hardware/kit/EFM32LG_DK3650/examples/usbdcomposite/iar/usbdcomposite.eww"/>
    <properties key="core.boardCompatibility" value="brd3601a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="DK3650_usbdheadphone" description="&lt;h1&gt;&lt;b&gt;USB audio headphone device example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example implements a USB connected headphone device. The device enumerates&#xD;&#xA;as a device supporting stereo 16bit PCM encoded audio at a samplerate of&#xD;&#xA;44.1 kHz (the standard audio CD rate). The samples are sent directly to the I2S&#xD;&#xA;DAC on the mainboard and audio is available on the &quot;AUDIO OUT&quot; jack.&#xD;&#xA;&#xD;&#xA;The USB device is modelled as the HT1 (Headphone Topology 1) described in&#xD;&#xA;USB-IF document &quot;Universal Serial Bus Audio Device Class Specification for&#xD;&#xA;Basic Audio Devices&quot;, Release 1.0, November 24th, 2009.&#xD;&#xA;&#xD;&#xA;The I2S DAC is fed at a samplerate of 44.118 kHz, so additional audio samples&#xD;&#xA;are occasionally inserted to ensure that the data streams (USB and DAC) stay&#xD;&#xA;synchronized.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG-DK3650 Development Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3650 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32LG_DK3650/examples/usbdheadphone/SimplicityStudio/DK3650_usbdheadphone.slsproj,../hardware/kit/EFM32LG_DK3650/examples/usbdheadphone/arm/usbdheadphone.uvprojx,../hardware/kit/EFM32LG_DK3650/examples/usbdheadphone/iar/usbdheadphone.eww"/>
    <properties key="core.boardCompatibility" value="brd3601a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="DK3650_usbdhidkbd" description="&lt;h1&gt;&lt;b&gt;USB HID keyboard example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use the EFM32 USB Device protocol stack&#xD;&#xA;and implements an USB HID class keyboard device (one button !).&#xD;&#xA;&#xD;&#xA;SW1 is the keyboard button. Pressing this button will succesively write&#xD;&#xA;&quot;Silicon Labs - &quot;.&#xD;&#xA;&#xD;&#xA;User LED's 0-3 is used as a &quot;heart-beat&quot; counting pattern. The count rate&#xD;&#xA;reflects the scan rate of the onebutton keypad.&#xD;&#xA;&#xD;&#xA;User LED 8 reflects hosts NumLock status.&#xD;&#xA;User LED 9 reflects hosts CapsLock status.&#xD;&#xA;User LED 10 reflects hosts ScrollLock status.&#xD;&#xA;User LED 15 reflects the status of the keyboard pushbutton.&#xD;&#xA;&#xD;&#xA;It is also possible to make a buspowered device:&#xD;&#xA; - Enable #define BUSPOWERED in usbconfig.h&#xD;&#xA; - Program the MCU plugin module, remove it fron the DK.&#xD;&#xA; - Connect a pushbutton from PORTE bit 0 to GND (optional keyboard button).&#xD;&#xA; - Connect &quot;USB VREGO&quot; and &quot;VMCU&quot; together.&#xD;&#xA; - Optionally connect &quot;USB VREGO&quot; and &quot;3.3V&quot; together to enable an activity LED&#xD;&#xA;   (the blue LED labeled &quot;STATUS).&#xD;&#xA;   Note: This will cause the device suspend current to exceed 2.5 mA.&#xD;&#xA;&#xD;&#xA; - NOTE !!! Do NOT insert the plugin module back on the DK with &quot;USB VREGO&quot;,&#xD;&#xA;   &quot;3.3V&quot; and &quot;VMCU&quot; connected together !!!.&#xD;&#xA;&#xD;&#xA;This example will output useful info on the DK serial port (115.200 8N1).&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG-DK3650 Development Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3650 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32LG_DK3650/examples/usbdhidkbd/SimplicityStudio/DK3650_usbdhidkbd.slsproj,../hardware/kit/EFM32LG_DK3650/examples/usbdhidkbd/arm/usbdhidkbd.uvprojx,../hardware/kit/EFM32LG_DK3650/examples/usbdhidkbd/iar/usbdhidkbd.eww"/>
    <properties key="core.boardCompatibility" value="brd3601a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="DK3650_usbdmicrophone" description="&lt;h1&gt;&lt;b&gt;USB audio microphone device example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example implements a USB connected microphone device. The device enumerates&#xD;&#xA;as a device supporting stereo 16bit PCM encoded audio at a samplerate of&#xD;&#xA;44.1 kHz (the standard audio CD rate). The samples are aquired using the ADC&#xD;&#xA;which is routed to the &quot;AUDIO IN&quot; jack on the mainboard. The example can be&#xD;&#xA;compiled in &quot;tone generator&quot; mode, where the device produce a 1kHz sine.&#xD;&#xA;&#xD;&#xA;The USB device is modelled as the MT (Microphone Topology) described in&#xD;&#xA;USB-IF document &quot;Universal Serial Bus Audio Device Class Specification for&#xD;&#xA;Basic Audio Devices&quot;, Release 1.0, November 24th, 2009.&#xD;&#xA;&#xD;&#xA;The ADC is sampling at a rate of 44.118 kHz, so additional audio samples&#xD;&#xA;are occasionally inserted or removed from the data sent to host to ensure that&#xD;&#xA;the data streams (USB and ADC) stay synchronized. This gives reasonable audio&#xD;&#xA;quality when listening to music, but produce noticeable artifacts when&#xD;&#xA;listening to a pure sinewave or when the example is compiled in &quot;tone generator&quot;&#xD;&#xA;mode.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG-DK3650 Development Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3650 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32LG_DK3650/examples/usbdmicrophone/SimplicityStudio/DK3650_usbdmicrophone.slsproj,../hardware/kit/EFM32LG_DK3650/examples/usbdmicrophone/arm/usbdmicrophone.uvprojx,../hardware/kit/EFM32LG_DK3650/examples/usbdmicrophone/iar/usbdmicrophone.eww"/>
    <properties key="core.boardCompatibility" value="brd3601a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="DK3650_usbdmsd" description="&lt;h1&gt;&lt;b&gt;USB Mass Storage Device example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use the EFM32 USB Device protocol stack&#xD;&#xA;to implement a device Mass Storage Class device (MSD).&#xD;&#xA;&#xD;&#xA;The example provides five different MSD types.&#xD;&#xA;&#xD;&#xA; - A 96KByte &quot;disk&quot; in internal SRAM&#xD;&#xA; - A 4MByte &quot;disk&quot; in external PSRAM&#xD;&#xA; - A disk implemented with a micro SD-Card&#xD;&#xA; - An internal FLASH &quot;disk&quot; (disksize is internal FLASH size minus 64K)&#xD;&#xA; - A 16MB external NORFLASH &quot;disk&quot;&#xD;&#xA;&#xD;&#xA;Select mediatype in msddmedia.h (#define MSD_MEDIA)&#xD;&#xA;&#xD;&#xA;It is also possible to make a buspowered device:&#xD;&#xA; - Enable #define BUSPOWERED in usbconfig.h (only valid for SRAM and FLASH media)&#xD;&#xA; - Program the MCU plugin module, remove it from the DK.&#xD;&#xA; - Connect &quot;USB VREGO&quot; and &quot;VMCU&quot; together.&#xD;&#xA; - Optionally connect &quot;USB VREGO&quot; and &quot;3.3V&quot; together to enable an activity LED&#xD;&#xA;   (the blue LED labeled &quot;STATUS&quot;).&#xD;&#xA;   Note: This will cause the device suspend current to exceed 2.5 mA.&#xD;&#xA;&#xD;&#xA; - NOTE !!! Do NOT insert the plugin module back on the DK with &quot;USB VREGO&quot;,&#xD;&#xA;   &quot;3.3V&quot; and &quot;VMCU&quot; connected together !!!.&#xD;&#xA;&#xD;&#xA;The example will output some info on the DK serial port (115.200 8N1).&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG-DK3650 Development Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3650 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32LG_DK3650/examples/usbdmsd/SimplicityStudio/DK3650_usbdmsd.slsproj,../hardware/kit/EFM32LG_DK3650/examples/usbdmsd/arm/usbdmsd.uvprojx,../hardware/kit/EFM32LG_DK3650/examples/usbdmsd/iar/usbdmsd.eww"/>
    <properties key="core.boardCompatibility" value="brd3601a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="DK3650_usbdtouch" description="&lt;h1&gt;&lt;b&gt;USB Bitmap transfer using USB drive functionality.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example demonstrate use several functionalities:&#xD;&#xA;1. Creation of virtual drive in system with FAT FS,&#xD;&#xA;2. Mounting the drive on PC and file transfer,&#xD;&#xA;3. Bitmap file creation based on TFT frame buffer content,&#xD;&#xA;4. Resistive touch panel interaction.&#xD;&#xA;&#xD;&#xA;On system startup initial drive is created and &#xD;&#xA;formatted using FAT FS then simple readme.txt file &#xD;&#xA;is put on file system. Every time user press PB4 key&#xD;&#xA;new file, containing TFT frame buffer in bitmap format&#xD;&#xA;is added. All files could be retrieved after connecting&#xD;&#xA;board to PC by means of USB. For this connection use&#xD;&#xA;small USB socket located on Leopard Gecko CPU board, not&#xD;&#xA;the big one on development kit.&#xD;&#xA;&#xD;&#xA;If new files doesn't appear on drive after pressing PB4,&#xD;&#xA;try to reconnect the board to PC.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG-DK3650 Development Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3650 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32LG_DK3650/examples/usbdtouch/SimplicityStudio/DK3650_usbdtouch.slsproj,../hardware/kit/EFM32LG_DK3650/examples/usbdtouch/arm/usbdtouch.uvprojx,../hardware/kit/EFM32LG_DK3650/examples/usbdtouch/iar/usbdtouch.eww"/>
    <properties key="core.boardCompatibility" value="brd3601a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="DK3650_usbdvud" description="&lt;h1&gt;&lt;b&gt;USB Vendor Unique Device example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use the EFM32 USB Device protocol stack&#xD;&#xA;and implements an USB Vendor Unique Device.&#xD;&#xA;&#xD;&#xA;The example will toggle User LED's 0-4 when receiving vendor unique class&#xD;&#xA;setup commands.&#xD;&#xA;&#xD;&#xA;This example is intended to be used together with the &quot;libusb&quot; device driver,&#xD;&#xA;and host application EFM32-LedApp.exe (a Windows application).&#xD;&#xA;&#xD;&#xA;The first time the USB device is connected to the host, you must tell the host&#xD;&#xA;OS to install the &quot;libusb&quot; device driver.&#xD;&#xA;&#xD;&#xA;On Windows, you can follow this procedure:&#xD;&#xA;Insert the device, and manually direct Windows to look for drivers in the&#xD;&#xA;directory where you have your copy of the &quot;EFM32_Vendor_Unique_Device.inf&quot; file.&#xD;&#xA;This can be done with the new device &quot;Wizard&quot; which might pop up after device&#xD;&#xA;insertion, or you can open &quot;Device Manager&quot;, left click on the new device and&#xD;&#xA;select &quot;Update Driver Software...&quot;.&#xD;&#xA;&#xD;&#xA;Some versions of Windows wont allow you to install unsigned drivers. If you&#xD;&#xA;suspect this, reboot the PC into &quot;Disable Driver Signature Enforcement&quot; mode.&#xD;&#xA;Win7:&#xD;&#xA;Repeatedly push F8 during boot until the boot menu appears.&#xD;&#xA;Select the &quot;Disable Driver Signature Enforcement&quot; option.&#xD;&#xA;Win10:&#xD;&#xA;Start Menu-&gt;Power button-&gt;Hold Shift key down and select Restart.&#xD;&#xA;When computer has restarted into the options menu, select:&#xD;&#xA;Troubleshoot-&gt;Advanced Option-&gt;Startup Settings-&gt;Restart-&gt;Disable driver signature enforcement&#xD;&#xA;You should now be able to install an unsigned driver.&#xD;&#xA;&#xD;&#xA;After libusb is installed, start EFM32-LedApp.exe.&#xD;&#xA;&#xD;&#xA;This example will output some info on the DK serial port (115.200 8N1).&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG-DK3650 Development Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3650 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32LG_DK3650/examples/usbdvud/SimplicityStudio/DK3650_usbdvud.slsproj,../hardware/kit/EFM32LG_DK3650/examples/usbdvud/arm/usbdvud.uvprojx,../hardware/kit/EFM32LG_DK3650/examples/usbdvud/iar/usbdvud.eww"/>
    <properties key="core.boardCompatibility" value="brd3601a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="DK3650_usbhenum" description="&lt;h1&gt;&lt;b&gt;USB device enumerator example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the USB host stack to implement&#xD;&#xA;a simple device enumerator.&#xD;&#xA;&#xD;&#xA;Connect a terminal to the DK UART port (115.200, N, 8, 1) and&#xD;&#xA;then connect any USB device to the USB port of the MCU plug-in module.&#xD;&#xA;&#xD;&#xA;Info about the VID/PID and some string descriptors will be output on&#xD;&#xA;the serial port. The connected USB device will not be configured.&#xD;&#xA;&#xD;&#xA;Note that USB disk drives may fail, as some of them draw too much current&#xD;&#xA;when attached.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG-DK3650 Development Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3650 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32LG_DK3650/examples/usbhenum/SimplicityStudio/DK3650_usbhenum.slsproj,../hardware/kit/EFM32LG_DK3650/examples/usbhenum/arm/usbhenum.uvprojx,../hardware/kit/EFM32LG_DK3650/examples/usbhenum/iar/usbhenum.eww"/>
    <properties key="core.boardCompatibility" value="brd3601a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="DK3650_usbhhidkbd" description="&lt;h1&gt;&lt;b&gt;USB Host HID keyboard example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the USB host stack to implement&#xD;&#xA;support for USB HID Keyboards.&#xD;&#xA;&#xD;&#xA;Connect a terminal to the DK UART port (115.200, N, 8, 1) and&#xD;&#xA;then connect a USB keyboard to the USB port of the MCU plug-in module.&#xD;&#xA;&#xD;&#xA;The example will flash keyboard leds (numlock, scrollock and capslock)&#xD;&#xA;with a binary counting pattern.&#xD;&#xA;&#xD;&#xA;Keyboard entry will be echoed on the UART serial port.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG-DK3650 Development Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3650 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32LG_DK3650/examples/usbhhidkbd/SimplicityStudio/DK3650_usbhhidkbd.slsproj,../hardware/kit/EFM32LG_DK3650/examples/usbhhidkbd/arm/usbhhidkbd.uvprojx,../hardware/kit/EFM32LG_DK3650/examples/usbhhidkbd/iar/usbhhidkbd.eww"/>
    <properties key="core.boardCompatibility" value="brd3601a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="DK3650_usbhmsdfatcon" description="&lt;h1&gt;&lt;b&gt;USB Host mass storage device example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the USB host and the MSD modules in the&#xD;&#xA;drivers directory to implement support for Mass Storage Device's (MSD).&#xD;&#xA;&#xD;&#xA;Connect a terminal to the DK UART port (115.200, N, 8, 1) and&#xD;&#xA;then connect a memory stick the USB port of the MCU plug-in module.&#xD;&#xA;&#xD;&#xA;Info about the MSD device will be output on the serial port. When a MSD&#xD;&#xA;device is connected and detected as a valid, you can issue commands at the&#xD;&#xA;serial port console to list all files on the device (ls), type the content&#xD;&#xA;of a file (cat) and append test to a file (echo).&#xD;&#xA;&#xD;&#xA;Note that USB disk drives may fail, as some of them draw too much current&#xD;&#xA;when attached.&#xD;&#xA;&#xD;&#xA;NOTE:&#xD;&#xA;This example is too large to be built with IDEs with 32KB size limits.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG-DK3650 Development Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3650 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32LG_DK3650/examples/usbhmsdfatcon/SimplicityStudio/DK3650_usbhmsdfatcon.slsproj,../hardware/kit/EFM32LG_DK3650/examples/usbhmsdfatcon/arm/usbhmsdfatcon.uvprojx,../hardware/kit/EFM32LG_DK3650/examples/usbhmsdfatcon/iar/usbhmsdfatcon.eww"/>
    <properties key="core.boardCompatibility" value="brd3601a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="DK3650_wavplayer" description="&lt;h1&gt;&lt;b&gt;Audio .WAV format player.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS including DK BSP (board support&#xD;&#xA;package) and demonstrates how to play a wav file from the SD-card.&#xD;&#xA;&#xD;&#xA;The wav file must be named &quot;sweet1.wav&quot; and must be encoded with 16-bit&#xD;&#xA;PCM audio sampling.&#xD;&#xA;&#xD;&#xA;The output volume level is adjusted with kit pushbuttons PB1 and PB2.&#xD;&#xA;Output level is indicated by the 14 leftmost user LEDs.&#xD;&#xA;Push the AEM button on the kit until &quot;EFM&quot; shows in the upper right&#xD;&#xA;corner of the TFT display to activate PB1 and PB2 pushbuttons.&#xD;&#xA;&#xD;&#xA;The example can be build for using the I2S dac or onchip DAC0.&#xD;&#xA;Look for #define USE_I2S near top of file wavplayer.c&#xD;&#xA;&#xD;&#xA;It sets up access to DVK registers, and supports fat-filesystem on the&#xD;&#xA;sd-card.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG-DK3650 Development Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3650 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32LG_DK3650/examples/wavplayer/SimplicityStudio/DK3650_wavplayer.slsproj,../hardware/kit/EFM32LG_DK3650/examples/wavplayer/arm/wavplayer.uvprojx,../hardware/kit/EFM32LG_DK3650/examples/wavplayer/iar/wavplayer.eww"/>
    <properties key="core.boardCompatibility" value="brd3601a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/wavplayer.c"/>
  </descriptors>
  <descriptors label="DK3650_webserver" description="&lt;h1&gt;&lt;b&gt;Webserver example&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;==================&#xD;&#xA;&#xD;&#xA;This example shows how to use the EFM32LG-DK3650 to run a http server with a&#xD;&#xA;static web page. This example is using the lwip network stack to provide the&#xD;&#xA;necessary protocol implementations and it's using the ksz8851snl ethernet&#xD;&#xA;controller on the development kit to send and receive packets.&#xD;&#xA;&#xD;&#xA;Web page&#xD;&#xA;=========&#xD;&#xA;&#xD;&#xA;To view the static web page open your browser to http://&lt;dk-ip&gt;/ .&#xD;&#xA;&#xD;&#xA;You can find the source code for the static web page under the html directory.&#xD;&#xA;These source files are converted into the fsdata_custom.c file that the lwip&#xD;&#xA;http module knows how to read. This conversion is done by the makefsdata tool.&#xD;&#xA;&#xD;&#xA;To customize your own web pages, you can use the makefsdata tool to generate&#xD;&#xA;your own fsdata_custom.c file. The makefsdata tool is provided as part of lwip,&#xD;&#xA;and you can find the C source file for it in the lwip-&#xD;&#xA;contrib/apps/httpserver_raw/makefsdata folder (Don't use the makefsdata perl&#xD;&#xA;script, it is outdated). This is an example of how you can generate the&#xD;&#xA;fsdata_custom.c file using makefsdata.exe.&#xD;&#xA;&#xD;&#xA;makefsdata.exe html -l1 -f:fsdata_custom.c&#xD;&#xA;&#xD;&#xA;Output&#xD;&#xA;=======&#xD;&#xA;&#xD;&#xA;When a network interface is up and running the IP address of the server is&#xD;&#xA;displayed on the LCD display together with rx/tx packet statistics. If you want&#xD;&#xA;to view the lwip trace output you can open a serial connection to the&#xD;&#xA;development kit using baud rate 115200.&#xD;&#xA;&#xD;&#xA;IP Configuration&#xD;&#xA;=================&#xD;&#xA;&#xD;&#xA;By default this example is configured to use DHCP to fetch an ip address. If you&#xD;&#xA;want to use static ip address instead then follow these steps.&#xD;&#xA;&#xD;&#xA;1. open lwipopts.h&#xD;&#xA;2. edit the LWIP_DHCP option to be&#xD;&#xA;&#xD;&#xA;#define LWIP_DHCP                       0&#xD;&#xA;&#xD;&#xA;3. edit the STATIC_* options to match your desired ip address, subnet mask,&#xD;&#xA;default gateway. This is an example of how to configure these static ip&#xD;&#xA;addresses.&#xD;&#xA;&#xD;&#xA;ip: 192.168.0.12&#xD;&#xA;sn: 255.255.255.0&#xD;&#xA;gw: 192.168.0.1&#xD;&#xA;&#xD;&#xA;#define STATIC_IPADDR0                  192&#xD;&#xA;#define STATIC_IPADDR1                  168&#xD;&#xA;#define STATIC_IPADDR2                  0&#xD;&#xA;#define STATIC_IPADDR3                  12&#xD;&#xA;&#xD;&#xA;#define STATIC_NET_MASK0                255&#xD;&#xA;#define STATIC_NET_MASK1                255&#xD;&#xA;#define STATIC_NET_MASK2                255&#xD;&#xA;#define STATIC_NET_MASK3                0&#xD;&#xA;&#xD;&#xA;#define STATIC_GW_IPADDR0               192&#xD;&#xA;#define STATIC_GW_IPADDR1               168&#xD;&#xA;#define STATIC_GW_IPADDR2               0&#xD;&#xA;#define STATIC_GW_IPADDR3               1&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;ksz8851snl interface&#xD;&#xA;=====================&#xD;&#xA;&#xD;&#xA;The ksz8851snl ethernet controller is using an spi interface, and this is&#xD;&#xA;connected to one of the EFM32 USARTs. See the kit user-manual for the actual&#xD;&#xA;pins. This example also shows how to use the provided ksz8851snl drivers to&#xD;&#xA;operate the ethernet controller. These are the main files that are used when&#xD;&#xA;interfacing with the ksz8851snl.&#xD;&#xA;&#xD;&#xA;drivers/ksz8851snl.c&#xD;&#xA;&#xD;&#xA;This is the hardware abstraction layer for the ksz8851snl. This file contains&#xD;&#xA;functionality like enable and initialize the chip.&#xD;&#xA;&#xD;&#xA;drivers/ksz8851snl_spi.c&#xD;&#xA;&#xD;&#xA;This contains the spi communication functions for the ksz8851snl. We provide the&#xD;&#xA;low level operations like read/write register as well as read/write fifo in this&#xD;&#xA;file.&#xD;&#xA;&#xD;&#xA;&lt;lwip-contrib&gt;/ports/efm32/ksz8851snl_driver.c&#xD;&#xA;&#xD;&#xA;This is the lwip driver that interfaces between the lwip stack and our&#xD;&#xA;ksz8851snl.c hardware abstraction layer.&#xD;&#xA;&#xD;&#xA;Interrupt Handling&#xD;&#xA;===================&#xD;&#xA;&#xD;&#xA;The ksz8851snl has an interrupt pin that is routed through the board controller&#xD;&#xA;and into a GPIO pin on the EFM32. When the ethernet interrupt is enabled. This&#xD;&#xA;interrupt pin is active low. The ksz8851snl will trigger an interrupt if the&#xD;&#xA;link status has changed or if an ethernet frame has been received or&#xD;&#xA;transmitted. In this example the GPIO is configured to trigger an interrupt on a&#xD;&#xA;falling edge of the ethernet interrupt pin.&#xD;&#xA;&#xD;&#xA;The interrupts of the ksz8851snl are not serviced directly from the GPIO&#xD;&#xA;interrupt handler. What we do instead is to signal to the application that an&#xD;&#xA;interrupt is pending and let the main application eventually call the interrupt&#xD;&#xA;service routine within the ksz8851snl driver. The reason for doing this is&#xD;&#xA;because we want to minimize the amount of time inside the interrupt handler.&#xD;&#xA;When a received frame interrupt is triggered the ksz8851snl driver will have to&#xD;&#xA;allocate buffer and transfer a large amount of data from the controller to ram,&#xD;&#xA;and then pass this buffer into the lwip stack.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG-DK3650 Development Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3650 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32LG_DK3650/examples/webserver/SimplicityStudio/DK3650_webserver.slsproj,../hardware/kit/EFM32LG_DK3650/examples/webserver/arm/webserver.uvprojx,../hardware/kit/EFM32LG_DK3650/examples/webserver/iar/webserver.eww"/>
    <properties key="core.boardCompatibility" value="brd3601a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/webserver.c"/>
  </descriptors>
  <descriptors label="STK3600_blink" description="&lt;h1&gt;&lt;b&gt;Blink example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use EFM32 CMSIS and the emlib peripheral library to&#xD;&#xA;demonstrate the use of the LED's on the starter kit. This example is intended as&#xD;&#xA;a skeleton for new projects.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG_STK3600 Starter Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3600 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32LG_STK3600/examples/blink/SimplicityStudio/STK3600_blink.slsproj,../hardware/kit/EFM32LG_STK3600/examples/blink/arm/blink.uvprojx,../hardware/kit/EFM32LG_STK3600/examples/blink/iar/blink.eww"/>
    <properties key="core.boardCompatibility" value="brd2201a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/blink.c"/>
  </descriptors>
  <descriptors label="STK3600_burtc" description="&lt;h1&gt;&lt;b&gt;Backup power domain RTC example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example demonstrate use of the backup power domain and the&#xD;&#xA;backup real time clock (BURTC).&#xD;&#xA;&#xD;&#xA;Start the example with the Power Source Selector switch in the &quot;DBG&quot; position.&#xD;&#xA;When the clock is running you can adjust time by pressing pushbuttons&#xD;&#xA;PB0 and PB1.&#xD;&#xA;When you move the Power Source Selector switch to the &quot;USB&quot; position, the&#xD;&#xA;EFM is turned off and the BURTC peripheral runs on power from the BU capacitor.&#xD;&#xA;(See User manual for EFM32LG-STK3600 starter kit for details on the hardware).&#xD;&#xA;When you move the Power Source Selector switch back to the &quot;DBG&quot; position, you&#xD;&#xA;can verify that time has been recorded correctly.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG-STK3600 Starter Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3600 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32LG_STK3600/examples/burtc/SimplicityStudio/STK3600_burtc.slsproj,../hardware/kit/EFM32LG_STK3600/examples/burtc/arm/burtc.uvprojx,../hardware/kit/EFM32LG_STK3600/examples/burtc/iar/burtc.eww"/>
    <properties key="core.boardCompatibility" value="brd2201a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3600_clock" description="&lt;h1&gt;&lt;b&gt;Wall Clock example using the segment LCD.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS  and demonstrates  the use of&#xD;&#xA;the LCD controller, RTC (real time counter), VCMP, GPIO and various&#xD;&#xA;Energy Modes (EM).&#xD;&#xA;&#xD;&#xA;The RTC is set up to wake the EFM32 from EM2 every minute. During this&#xD;&#xA;interval, the LCD is updated to reflect the current time. The animation&#xD;&#xA;feature is used to show the seconds. This is done by using the frame&#xD;&#xA;event counter to drive the animation feature every second.&#xD;&#xA;&#xD;&#xA;Time is set with pushbuttons PB0 and PB1.&#xD;&#xA; - Pushing PB0 increments minute count.&#xD;&#xA; - Pushing PB1 increments hour count.&#xD;&#xA;&#xD;&#xA;The VCMP is used to measure the input voltage on every wakeup. If the&#xD;&#xA;voltage drops too low, voltage boost is enabled on the LCD. This makes&#xD;&#xA;the LCD clear and readable even when running on low batteries.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG_STK3600 Development Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3600 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32LG_STK3600/examples/clock/SimplicityStudio/STK3600_clock.slsproj,../hardware/kit/EFM32LG_STK3600/examples/clock/arm/clock.uvprojx,../hardware/kit/EFM32LG_STK3600/examples/clock/iar/clock.eww"/>
    <properties key="core.boardCompatibility" value="brd2201a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/clock.c"/>
  </descriptors>
  <descriptors label="STK3600_cpt007b_demo" description="&lt;h1&gt;&lt;b&gt;CPT007B Demo&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This demo demonstrates the capacitive button function of CPT007B fixed function&#xD;&#xA;board. This demo runs on the EFM32 STK, and communicates with CPT007B through&#xD;&#xA;the GPIO pins on the EXP header. Virtual buttons on STK's LCD screen indicate&#xD;&#xA;whether the capacitive sensing buttons on CPT007B are pressed or released.&#xD;&#xA;This demo supports up to 7 capacitive buttons on CPT007B&#xD;&#xA; &#xD;&#xA;Board:  Silicon Labs EFM32LG_STK3600 Starter Kit and CPT007B Evaluation Board&#xD;&#xA;Device: EFM32LG990F256&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3600 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32LG_STK3600/examples/cpt007b/SimplicityStudio/STK3600_cpt007b_demo.slsproj,../hardware/kit/EFM32LG_STK3600/examples/cpt007b/arm/cpt007b_demo.uvprojx,../hardware/kit/EFM32LG_STK3600/examples/cpt007b/iar/cpt007b_demo.eww"/>
    <properties key="core.boardCompatibility" value="brd2201a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/cpt007b_demo.c"/>
  </descriptors>
  <descriptors label="STK3600_cslib" description="&lt;h1&gt;&lt;b&gt;CSLIB example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the capacitive sensing firmware library to sample&#xD;&#xA;capacitive sensing buttons on the STK.  Real-time sample information, touch&#xD;&#xA;qualification status, and other state variables can be displayed and examined&#xD;&#xA;in the Capacitive Sensing Profiler tool.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG_STK3600 Starter Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3600 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32LG_STK3600/examples/cslib/SimplicityStudio/STK3600_cslib.slsproj,../hardware/kit/EFM32LG_STK3600/examples/cslib/arm/cslib.uvprojx,../hardware/kit/EFM32LG_STK3600/examples/cslib/iar/cslib.eww"/>
    <properties key="core.boardCompatibility" value="brd2201a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="cslib/SimplicityStudio/workspace/STK3700_cslib/app/main.c"/>
  </descriptors>
  <descriptors label="STK3600_emlcd" description="&lt;h1&gt;&lt;b&gt;Energy Modes with segment LCD example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use EFM32 CMSIS and the emlib peripheral library to&#xD;&#xA;demonstrate the use of the LCD controller, RTC (real time counter), GPIO and&#xD;&#xA;various Energy Modes (EM) on the starter kit.&#xD;&#xA;&#xD;&#xA;EM2 is used for delays in between refreshing the LCD display, and a lot of&#xD;&#xA;&quot;eye candy&quot; are present to show off the MCU module's LCD display.&#xD;&#xA;&#xD;&#xA;The LCD controller drives the display down to EM2. In the demo, EM2 is used&#xD;&#xA;for &quot;most&quot; delays to show off this feature. The user can press PB0 or PB1 to&#xD;&#xA;activate EM3 and EM4. EM4 requires a system reset, while PB0 again will wake&#xD;&#xA;up the system  from Energy Mode 3.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32STG_STK3600 Starter Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3600 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32LG_STK3600/examples/emlcd/SimplicityStudio/STK3600_emlcd.slsproj,../hardware/kit/EFM32LG_STK3600/examples/emlcd/arm/emlcd.uvprojx,../hardware/kit/EFM32LG_STK3600/examples/emlcd/iar/emlcd.eww"/>
    <properties key="core.boardCompatibility" value="brd2201a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/emlcd.c"/>
  </descriptors>
  <descriptors label="STK3600_emode" description="&lt;h1&gt;&lt;b&gt;Select a single energy mode, and stay there.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 emlib and demonstrates the use of&#xD;&#xA;the LCD controller, RTC (real time counter), GPIO and various Energy&#xD;&#xA;Modes (EM).&#xD;&#xA;&#xD;&#xA;The user can press the push buttons PB0 and PB1 to select which energy&#xD;&#xA;mode to demonstrate.&#xD;&#xA;&#xD;&#xA;This demo application has been made to give a quick demo of the&#xD;&#xA;energyAware Profiler from Silicon Labs and to reproduce the different &#xD;&#xA;energy modes seen in the EFM32 datasheet current consumption table. &#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG_STK3600 Development Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3600 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32LG_STK3600/examples/emode/SimplicityStudio/STK3600_emode.slsproj,../hardware/kit/EFM32LG_STK3600/examples/emode/arm/emode.uvprojx,../hardware/kit/EFM32LG_STK3600/examples/emode/iar/emode.eww"/>
    <properties key="core.boardCompatibility" value="brd2201a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3600_energy" description="&lt;h1&gt;&lt;b&gt;Board Support Package API demo for voltage and current readout.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS and demonstrates the use of&#xD;&#xA;the STK BSP.&#xD;&#xA;&#xD;&#xA;The BSP is used to read out the current consumption and VMCU voltage level&#xD;&#xA;from the board controller. The readings are printed to the display.&#xD;&#xA;&#xD;&#xA;The BSP use a 115800-N-1 UART to communicate with the board controller,&#xD;&#xA;if you do not need the board support functions, there is no need to&#xD;&#xA;include the BSP in your project. Currently, the UART communication with&#xD;&#xA;16x oversampling is used, limiting the communication channel to high&#xD;&#xA;frequencies for the peripheral clock.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG-STK3600 Development Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3600 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32LG_STK3600/examples/energy/SimplicityStudio/STK3600_energy.slsproj,../hardware/kit/EFM32LG_STK3600/examples/energy/arm/energy.uvprojx,../hardware/kit/EFM32LG_STK3600/examples/energy/iar/energy.eww"/>
    <properties key="core.boardCompatibility" value="brd2201a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/energy.c"/>
  </descriptors>
  <descriptors label="STK3600_freertos_blink" description="&lt;h1&gt;&lt;b&gt;FreeRTOS - Blink example&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the FreeRTOS, and gives a basic demonstration of using two tasks to blink the LEDs on the board. &#xD;&#xA;It also shows how to use idle with different energy saving modes ( from EM1 to EM3 - configured in FreeRTOSConfig.h file).&#xD;&#xA;This example is intended as a skeleton for new projects using FreeRTOS.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG_STK3600 Starter Kit&#xD;&#xA;Device: EFM32LG990F256&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3600 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32LG_STK3600/examples/freertos_blink/SimplicityStudio/STK3600_freertos_blink.slsproj,../hardware/kit/EFM32LG_STK3600/examples/freertos_blink/arm/freertos_blink.uvprojx,../hardware/kit/EFM32LG_STK3600/examples/freertos_blink/iar/freertos_blink.eww"/>
    <properties key="core.boardCompatibility" value="brd2201a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3600_freertos_tickless" description="&lt;h1&gt;&lt;b&gt;FreeRTOS - Tickless example&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the FreeRTOS, and gives a basic demonstration of using two tasks,&#xD;&#xA;one sender generating number and one receiver that displays the number on the LCD. The FreeRTOS is &#xD;&#xA;configured in tickless mode, going into EM2 when no tasks are active.&#xD;&#xA;&#xD;&#xA;EM3 mode cannot be used in this example because the LCD driver and timer are not available in EM3.&#xD;&#xA;For more details, see the configuraiton in FreeRTOSConfig.h file.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG_STK3600 Starter Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3600 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32LG_STK3600/examples/freertos_tickless/SimplicityStudio/STK3600_freertos_tickless.slsproj,../hardware/kit/EFM32LG_STK3600/examples/freertos_tickless/arm/freertos_tickless.uvprojx,../hardware/kit/EFM32LG_STK3600/examples/freertos_tickless/iar/freertos_tickless.eww"/>
    <properties key="core.boardCompatibility" value="brd2201a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3600_gpiointerrupt" description="&lt;h1&gt;&lt;b&gt;Gpio interrupt example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use EFM32 CMSIS and gpio interrupt dispatcher driver to show&#xD;&#xA;how to handle multiple GPIO interrupts. Buttons pressing toggles LEDs.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG_STK3600 Starter Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3600 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32LG_STK3600/examples/gpiointerrupt/SimplicityStudio/STK3600_gpiointerrupt.slsproj,../hardware/kit/EFM32LG_STK3600/examples/gpiointerrupt/arm/gpiointerrupt.uvprojx,../hardware/kit/EFM32LG_STK3600/examples/gpiointerrupt/iar/gpiointerrupt.eww"/>
    <properties key="core.boardCompatibility" value="brd2201a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3600_inttemp" description="&lt;h1&gt;&lt;b&gt;Internal temperature sensor example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS and emlib to demonstrate&#xD;&#xA;the usage of the internal temperature sensor on EFM32 Leopard Gecko&#xD;&#xA;devices.&#xD;&#xA;&#xD;&#xA;Note: EFM32 devices with production ID lower than 18 may measure inaccurate&#xD;&#xA;temperatures due to a sensor calibration bug.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG_STK3600 Starter Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3600 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32LG_STK3600/examples/inttemp/SimplicityStudio/STK3600_inttemp.slsproj,../hardware/kit/EFM32LG_STK3600/examples/inttemp/arm/inttemp.uvprojx,../hardware/kit/EFM32LG_STK3600/examples/inttemp/iar/inttemp.eww"/>
    <properties key="core.boardCompatibility" value="brd2201a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/inttemp.c"/>
  </descriptors>
  <descriptors label="STK3600_lcd" description="&lt;h1&gt;&lt;b&gt;Segment LCD controller example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS and emlib peripheral library and&#xD;&#xA;demonstrates the use of the segment LCD controller.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG_STK3600 Starter Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3600 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32LG_STK3600/examples/lcd/SimplicityStudio/STK3600_lcd.slsproj,../hardware/kit/EFM32LG_STK3600/examples/lcd/arm/lcd.uvprojx,../hardware/kit/EFM32LG_STK3600/examples/lcd/iar/lcd.eww"/>
    <properties key="core.boardCompatibility" value="brd2201a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="emlib/lcd.c"/>
  </descriptors>
  <descriptors label="STK3600_lcsense" description="&lt;h1&gt;&lt;b&gt;LC sense example using LESENSE.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS and demonstrates the use of &#xD;&#xA;the LESENSE peripheral on the board.&#xD;&#xA;&#xD;&#xA;This demo has two different modes.&#xD;&#xA;To change between them, press PB1. In Mode0 (default). The LESENSE&#xD;&#xA;module will wake up whenever a metal object is passed above the LC&#xD;&#xA;sensor in the bottom right of the STK. In Mode 1, the EFM32 will only&#xD;&#xA;wake up every fifth time the metal object is passed over the sensor.&#xD;&#xA;&#xD;&#xA;Board: Silicon Labs EFM32LG_STK3600 Development Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3600 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32LG_STK3600/examples/lcsense/SimplicityStudio/STK3600_lcsense.slsproj,../hardware/kit/EFM32LG_STK3600/examples/lcsense/arm/lcsense.uvprojx,../hardware/kit/EFM32LG_STK3600/examples/lcsense/iar/lcsense.eww"/>
    <properties key="core.boardCompatibility" value="brd2201a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="Main/lcsense.c"/>
  </descriptors>
  <descriptors label="STK3600_leuart" description="&lt;h1&gt;&lt;b&gt;LEUART/DMA in Energy mode2 output example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project reads and sends the data back to terminal using LEUART&#xD;&#xA;while staying in EM2.&#xD;&#xA;&#xD;&#xA;It uses the EFM32 CMSIS and emlib, to demonstrate the&#xD;&#xA;use of LEUART communication using DMA under the EM2 on the &#xD;&#xA;EFM32LG_STK3600 Starter Kit.&#xD;&#xA;&#xD;&#xA;The LEUART is configured to be used with DMA under EM2.&#xD;&#xA;The terminal configuration is 9600-8-N-1.&#xD;&#xA;The DMA is configured to handle read and write data bytes from LEUART under EM2.&#xD;&#xA;&#xD;&#xA;Testing:&#xD;&#xA;1. Use the expansion header to connect the LEUART to your PC.&#xD;&#xA;2. Pin Configuration:&#xD;&#xA;	2.1. Pin-12 (PD4) LEUART0_TX&#xD;&#xA;	2.2. Pin-14 (PD5) LEUART0_RX&#xD;&#xA;	2.3. Pin-1 Gnd&#xD;&#xA;&#xD;&#xA;3. Configure terminal to 9600-8-N-1.&#xD;&#xA;4. Enter characters from your keyboard and see if you receive the echo on the terminal.&#xD;&#xA;5. Check the average current consumption is equal to EM2 on Energy Profiler.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG_STK3600 Starter Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3600 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32LG_STK3600/examples/leuart/SimplicityStudio/STK3600_leuart.slsproj,../hardware/kit/EFM32LG_STK3600/examples/leuart/arm/leuart.uvprojx,../hardware/kit/EFM32LG_STK3600/examples/leuart/iar/leuart.eww"/>
    <properties key="core.boardCompatibility" value="brd2201a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3600_lightsense" description="&lt;h1&gt;&lt;b&gt;Lightsensor example using LESENSE.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS&#xD;&#xA;and demonstrates the use of the LESENSE peripheral on the board.&#xD;&#xA;&#xD;&#xA;This demo has two different modes.&#xD;&#xA;To change between them, press PB0. In Mode0 (default). The LESENSE&#xD;&#xA;module will wake up whenever a &quot;dark&quot; event is detected by the light sensor&#xD;&#xA;below the &quot;EFM32&quot; sign on the right from the LCD on the STK. In Mode 1,&#xD;&#xA;EFM32 will only wake up on every fifth &quot;dark&quot; event.&#xD;&#xA;&#xD;&#xA;Board: Silicon Labs EFM32LG_STK3600 Development Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3600 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32LG_STK3600/examples/lightsense/SimplicityStudio/STK3600_lightsense.slsproj,../hardware/kit/EFM32LG_STK3600/examples/lightsense/arm/lightsense.uvprojx,../hardware/kit/EFM32LG_STK3600/examples/lightsense/iar/lightsense.eww"/>
    <properties key="core.boardCompatibility" value="brd2201a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="Main/lightsense.c"/>
  </descriptors>
  <descriptors label="STK3600_mpu" description="&lt;h1&gt;&lt;b&gt;Memory Protection Unit example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS including STK BSP (board&#xD;&#xA;support package).&#xD;&#xA;&#xD;&#xA;It sets up the MPU to demonstrate usage of MPU to catch memory access&#xD;&#xA;violations. STK pushbuttons are used generate MPU faults.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG_STK3600 Development Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3600 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32LG_STK3600/examples/mpu/SimplicityStudio/STK3600_mpu.slsproj,../hardware/kit/EFM32LG_STK3600/examples/mpu/arm/mpu.uvprojx,../hardware/kit/EFM32LG_STK3600/examples/mpu/iar/mpu.eww"/>
    <properties key="core.boardCompatibility" value="brd2201a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="emlib/mpu.c"/>
  </descriptors>
  <descriptors label="STK3600_nandflash" description="&lt;h1&gt;&lt;b&gt;Nandflash example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example demonstrates use of the NANDFLASH driver.&#xD;&#xA;&#xD;&#xA;Connect a terminal to the TTL-level serialport (115200-N-8-1) on EXP port pins&#xD;&#xA;4 and 6.&#xD;&#xA;Operations on the flash are initiated by issuing commands on the terminal.&#xD;&#xA;Command &quot;h&quot; will print a help screen on the terminal :&#xD;&#xA;&#xD;&#xA;    Available commands:&#xD;&#xA;        fi         : Show NAND flash device information&#xD;&#xA;        h          : Show this help&#xD;&#xA;        rp &lt;n&gt;     : Read page &lt;n&gt;&#xD;&#xA;        bp &lt;n&gt;     : Blankcheck page &lt;n&gt;&#xD;&#xA;        bd         : Blankcheck entire device&#xD;&#xA;        bb         : Check bad-block info&#xD;&#xA;        mb &lt;n&gt;     : Mark block &lt;n&gt; as bad&#xD;&#xA;        wp &lt;n&gt;     : Write page &lt;n&gt;&#xD;&#xA;        eb &lt;n&gt;     : Erase block &lt;n&gt;&#xD;&#xA;        ecc &lt;n&gt;    : Check ECC algorithm, uses page &lt;n&gt; and &lt;n+1&gt;&#xD;&#xA;        cp &lt;m&gt; &lt;n&gt; : Copy page &lt;m&gt; to page &lt;n&gt;&#xD;&#xA;&#xD;&#xA;Note that the nandflash device used on this kit has 32 pages per block, so&#xD;&#xA;pages 0-31 belongs to block 0.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG-STK3600 Development Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3600 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32LG_STK3600/examples/nandflash/SimplicityStudio/STK3600_nandflash.slsproj,../hardware/kit/EFM32LG_STK3600/examples/nandflash/arm/nandflash.uvprojx,../hardware/kit/EFM32LG_STK3600/examples/nandflash/iar/nandflash.eww"/>
    <properties key="core.boardCompatibility" value="brd2201a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3600_nvm_simple" description="&lt;h1&gt;&lt;b&gt;nvm_simple - non-volatile memory driver usage simple example&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example shows simple usage of NVM module.&#xD;&#xA;&#xD;&#xA;It stores object (32bit word in this case) into flash region declared &#xD;&#xA;as non-volatile memory area. It uses wear leveling and demonstrates &#xD;&#xA;simple use of the NVM driver. There are two types of pages: &quot;normal&quot; &#xD;&#xA;dedicated for storing multiple objects which doesn't change often &#xD;&#xA;and &quot;wear&quot; which can store single object (but this could be structure&#xD;&#xA;containing many fields) that can often change. In this example on two pages &#xD;&#xA;same object is stored but NVM could handle multiple pages with different objects.&#xD;&#xA;&#xD;&#xA;PB0 - short press recalls data from &quot;normal&quot; page&#xD;&#xA;PB0 - long press store data to &quot;normal&quot; page&#xD;&#xA;PB1 - counts up, and after releasing stores data to &quot;wear&quot; page&#xD;&#xA;&#xD;&#xA;RESET - resets CPU and if there were valid data in NVM recovers last data value.&#xD;&#xA;&#xD;&#xA;LED1 - signals writing to flash&#xD;&#xA;LED0 - signals reading from flash (invisible due to short time)&#xD;&#xA;&#xD;&#xA;In case of fatal error LED0 blinks showing place in code that caused it.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG-STK3600 Development Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3600 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32LG_STK3600/examples/nvm_simple/SimplicityStudio/STK3600_nvm_simple.slsproj,../hardware/kit/EFM32LG_STK3600/examples/nvm_simple/arm/nvm_simple.uvprojx,../hardware/kit/EFM32LG_STK3600/examples/nvm_simple/iar/nvm_simple.eww"/>
    <properties key="core.boardCompatibility" value="brd2201a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3600_powertest" description="&lt;h1&gt;&lt;b&gt;Power test example, running demonstration of energy modes.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use EFM32 CMSIS and the emlib peripheral library&#xD;&#xA;to demonstrate the use of the various Energy Modes available on the&#xD;&#xA;EFM32LG990F256. When running this example, the EnergyAware Profiler tool&#xD;&#xA;in Simplicity Studio can be used to show the power consumption of each&#xD;&#xA;energy mode.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG-STK3600 Development Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3600 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32LG_STK3600/examples/powertest/SimplicityStudio/STK3600_powertest.slsproj,../hardware/kit/EFM32LG_STK3600/examples/powertest/arm/powertest.uvprojx,../hardware/kit/EFM32LG_STK3600/examples/powertest/iar/powertest.eww"/>
    <properties key="core.boardCompatibility" value="brd2201a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3600_rtx_blink" description="&lt;h1&gt;&lt;b&gt;Keil RTX RTOS - Blink example&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the Keil RTX RTOS, and gives a basic demonstration of using two tasks to blink the LEDs on the board.&#xD;&#xA;This example is intended as a skeleton for new projects using Keil RTX.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG-STK3600&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3600 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32LG_STK3600/examples/rtx_blink/SimplicityStudio/STK3600_rtx_blink.slsproj,../hardware/kit/EFM32LG_STK3600/examples/rtx_blink/arm/rtx_blink.uvprojx,../hardware/kit/EFM32LG_STK3600/examples/rtx_blink/iar/rtx_blink.eww"/>
    <properties key="core.boardCompatibility" value="brd2201a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/rtx_blink.c"/>
  </descriptors>
  <descriptors label="STK3600_rtx_tickless" description="&lt;h1&gt;&lt;b&gt;Keil RTX RTOS - tick-less example&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the Keil RTX RTOS, and gives a basic demonstration&#xD;&#xA;of using two tasks; one sender generating number and one receiver that displays&#xD;&#xA;the number on LCD. The RTX is configured in tick-less mode, going into EM2 when&#xD;&#xA;no tasks are active. This example is intended as a skeleton for new projects&#xD;&#xA;using Keil RTX for energy aware applications.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG-STK3600&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3600 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32LG_STK3600/examples/rtx_tickless/SimplicityStudio/STK3600_rtx_tickless.slsproj,../hardware/kit/EFM32LG_STK3600/examples/rtx_tickless/arm/rtx_tickless.uvprojx,../hardware/kit/EFM32LG_STK3600/examples/rtx_tickless/iar/rtx_tickless.eww"/>
    <properties key="core.boardCompatibility" value="brd2201a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/rtx_tickless.c"/>
  </descriptors>
  <descriptors label="STK3600_rtx_tickless_nolcd" description="&lt;h1&gt;&lt;b&gt;Keil RTX RTOS - tick-less example with LCD off.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example is modification of rtx_tickless to demonstrate ultra low power consumption &#xD;&#xA;of Gecko processors in connection with RTX RTOS. Comparing to previous example it has LCD&#xD;&#xA;turned off. There is also possible to disable part of RAM to lower power even further.&#xD;&#xA;Low frequency crystal oscillator was disabled and low frequency RC oscillator used instead&#xD;&#xA;to lower energy consumption even more.&#xD;&#xA;&#xD;&#xA;project uses the Keil RTX RTOS, and gives a basic demonstration&#xD;&#xA;of using two tasks; one sender generating number and one receiver.&#xD;&#xA;The RTX is configured in tick-less mode, going into EM2 when&#xD;&#xA;no tasks are active. This example is intended as a skeleton for new projects&#xD;&#xA;using Keil RTX for energy aware applications.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG-STK3600&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3600 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32LG_STK3600/examples/rtx_tickless_nolcd/SimplicityStudio/STK3600_rtx_tickless_nolcd.slsproj,../hardware/kit/EFM32LG_STK3600/examples/rtx_tickless_nolcd/arm/rtx_tickless_nolcd.uvprojx,../hardware/kit/EFM32LG_STK3600/examples/rtx_tickless_nolcd/iar/rtx_tickless_nolcd.eww"/>
    <properties key="core.boardCompatibility" value="brd2201a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/rtx_tickless.c"/>
  </descriptors>
  <descriptors label="STK3600_touch" description="&lt;h1&gt;&lt;b&gt;Capactive touch example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example demonstrates the capacitive touch capability of the EFM32 and the&#xD;&#xA;Tiny Gecko STK. This is a port of the EFM32_G8xx_STK capacitive touch demo.&#xD;&#xA;&#xD;&#xA;It demonstrates the use of LESENSE, ACMP, VCMP, LCD, and EMU.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG_STK3600&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3600 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32LG_STK3600/examples/touch/SimplicityStudio/STK3600_touch.slsproj,../hardware/kit/EFM32LG_STK3600/examples/touch/arm/touch.uvprojx,../hardware/kit/EFM32LG_STK3600/examples/touch/iar/touch.eww"/>
    <properties key="core.boardCompatibility" value="brd2201a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/touchdemo.c"/>
  </descriptors>
  <descriptors label="STK3600_ucos2" description="&lt;h1&gt;&lt;b&gt;uC/OS-II RTOS on EFM32 using example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This is a port of the uC/OS-II RTOS from Micrium Inc, http://www.micrium.com&#xD;&#xA;&#xD;&#xA;The port has been adapted by Silicon Labs for use with our Development&#xD;&#xA;Kit. It requires the standard EFM32 CMSIS package (including emlib).&#xD;&#xA;&#xD;&#xA;The example has three tasks:&#xD;&#xA; - Task1: LED blink task&#xD;&#xA; - Task2: Receives characters from serial port and posts message to Task3&#xD;&#xA; - Task3: Receives message from Task2 and writes it on LCD and serial port&#xD;&#xA;&#xD;&#xA;Serial port can be chosen between:&#xD;&#xA;USART1 - location 1 is used, GPIO port D pins 0 and 1, baudrate 115200-8-N-1.&#xD;&#xA;LEUART0 - location 0 is used, GPIO port D pins 4 and 5, baudrate 9600-8-N-1.&#xD;&#xA;&#xD;&#xA;These USARTs are by default not connected to any serial port, so this needs&#xD;&#xA;to be connected to external RS232 ports to be usable.&#xD;&#xA;&#xD;&#xA;uC/OS-II is provided in source form for FREE evaluation, for educational use&#xD;&#xA;or for peaceful research.&#xD;&#xA;&#xD;&#xA;If you plan on using uC/OS-II in a commercial product you need to contact&#xD;&#xA;Micrium to properly license its use in your product. We provide ALL the&#xD;&#xA;source code for your convenience and to help you experience uC/OS-II.&#xD;&#xA;The fact that the source is provided does NOT mean that you can use it without&#xD;&#xA;paying a licensing fee.&#xD;&#xA;&#xD;&#xA;For commercial use, contact Micrium, http://www.micrium.com for details.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG_STK3600 Starter Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3600 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32LG_STK3600/examples/ucos2_port/arm/ucos2.uvprojx,../hardware/kit/EFM32LG_STK3600/examples/ucos2_port/iar/ucos2.eww"/>
    <properties key="core.boardCompatibility" value="brd2201a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/app/app.c"/>
  </descriptors>
  <descriptors label="STK3600_ucos3" description="&lt;h1&gt;&lt;b&gt;uC/OS-III RTOS on EFM32 using example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This is a port of the uC/OS-III RTOS from Micrium Inc, http://www.micrium.com&#xD;&#xA;&#xD;&#xA;The port has been adapted by Silicon Labs for use with our Development Kit..&#xD;&#xA;It requires the standard EFM32 CMSIS package (including emlib).&#xD;&#xA;&#xD;&#xA;The example has three tasks:&#xD;&#xA; - Task1: LED blink task&#xD;&#xA; - Task2: Receives characters from serial port and posts message to Task3&#xD;&#xA; - Task3: Receives message from Task2 and writes it on LCD and serial port&#xD;&#xA;&#xD;&#xA;Serial port can be chosen between:&#xD;&#xA;USART1 - location 1 is used, GPIO port D pins 0 and 1, baudrate 115200-8-N-1.&#xD;&#xA;LEUART0 - location 0 is used, GPIO port D pins 4 and 5, baudrate 9600-8-N-1.&#xD;&#xA;&#xD;&#xA;These USARTs are by default not connected to any serial port, so this needs&#xD;&#xA;to be connected to external RS232 ports to be usable.&#xD;&#xA;&#xD;&#xA;uC/OS-III is provided in source form for FREE evaluation, for educational use&#xD;&#xA;or for peaceful research.&#xD;&#xA;&#xD;&#xA;If you plan on using uC/OS-III in a commercial product you need to contact&#xD;&#xA;Micrium to properly license its use in your product. We provide ALL the&#xD;&#xA;source code for your convenience and to help you experience uC/OS-III.&#xD;&#xA;The fact that the source is provided does NOT mean that you can use it without&#xD;&#xA;paying a licensing fee.&#xD;&#xA;&#xD;&#xA;For commercial use, contact Micrium, http://www.micrium.com for details.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG_STK3600 Starter Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3600 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32LG_STK3600/examples/ucos3_port/arm/ucos3.uvprojx,../hardware/kit/EFM32LG_STK3600/examples/ucos3_port/iar/ucos3.eww"/>
    <properties key="core.boardCompatibility" value="brd2201a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/app/app.c"/>
  </descriptors>
  <descriptors label="STK3600_usbdcomposite" description="&lt;h1&gt;&lt;b&gt;USB Composite Device example, MSD + CDC + Vendor unique functions.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use the EFM32 USB Device protocol stack&#xD;&#xA;to implement a composite USB device with tree functions:&#xD;&#xA;&#xD;&#xA; - Mass storage class device (MSD) implementing a disk in internal flash memory.&#xD;&#xA; - Communication device class (CDC) implementing a USB&lt;-&gt;UART bridge&#xD;&#xA; - Vendor Unique Device similar to the usbdvud example (control STK leds).&#xD;&#xA;&#xD;&#xA;As the CDC function has two interface, the CDC function use an Interface&#xD;&#xA;Association Descriptor (IAD). A composite device which use IAD's must be&#xD;&#xA;implemented using bDeviceClass=0xEF, bDeviceSubClass=2 and bDeviceProtocol=1.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;The vendor unique function (VUD).&#xD;&#xA;=================================&#xD;&#xA;Toggles user LED's 0 and 1 when receiving vendor unique class setup commands.&#xD;&#xA;Intended to be used together with the &quot;libusb&quot; device driver, and host&#xD;&#xA;application EFM32-LedApp.exe (a Windows application).&#xD;&#xA;You will find libusb and EFM32-LedApp.exe in the &quot;host&quot; folder of the usbdvud&#xD;&#xA;example. Check EFM32_Vendor_Unique_Device.inf to see how both the usbdvud&#xD;&#xA;example VID_10C4&amp;PID_0001 and this composite example VID_10C4&amp;PID_0008&amp;MI_00&#xD;&#xA;are specified.&#xD;&#xA;&#xD;&#xA;The CDC COM port function.&#xD;&#xA;==========================&#xD;&#xA;Implements an USB CDC based virtual COM port. USART1 on the STK is used as the&#xD;&#xA;physical COM port. Any data sent to the virtual CDC COM port is transmitted on&#xD;&#xA;USART1. Any data received on USART1 is transmitted to the virtual port.&#xD;&#xA;USART1 is available on the STK EXT port. EXT pin 4 is Tx, pin 6 is Rx.&#xD;&#xA;NOTE: This is a TTL level USART, DO NOT CONNECT DIRECTLY TO RS232 PORTS !&#xD;&#xA;&#xD;&#xA;USB Mass Storage Device function.&#xD;&#xA;=================================&#xD;&#xA;Implements a Mass Storage Class device (MSD) with 4MByte in external PSRAM.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Windows driver installation.&#xD;&#xA;============================&#xD;&#xA;The first time the composite USB device is connected to the host, Windows must&#xD;&#xA;install drivers for the VUD and CDC functions.&#xD;&#xA;&#xD;&#xA;To control the VUD function with EFM32-LedApp.exe you need to install &quot;libusb&quot;&#xD;&#xA;device driver. Manually direct Windows to look for this driver in the &quot;host&quot;&#xD;&#xA;folder of the usbdvud example.&#xD;&#xA;This can be done with the new device &quot;Wizard&quot; which might pop up after device&#xD;&#xA;insertion, or you can open &quot;Device Manager&quot;, left click on one of functions&#xD;&#xA;of the new composite device (marked with yellow exclamation mark) and&#xD;&#xA;select &quot;Update Driver Software...&quot;.&#xD;&#xA;After libusb is installed you can start EFM32-LedApp.exe to control leds on&#xD;&#xA;the STK.&#xD;&#xA;&#xD;&#xA;Similarly for the CDC function, direct Windows to look for a driver in the&#xD;&#xA;folder where you have your copy of the &quot;EFM32-Cdc.inf&quot; file (same folder as&#xD;&#xA;this readme file, unzip the Silabs-CDC_Install.zip).&#xD;&#xA;Note how the .inf file specifies interface number 2, VID_10C4&amp;PID_0008&amp;MI_02.&#xD;&#xA;When the serial port driver is succesfully installed, the device will be listed&#xD;&#xA;as a &quot;Ports&quot; device in Device Manager, double-click it, select the&#xD;&#xA;&quot;Port Settings&quot; tab and maybe the &quot;Advanced...&quot; button to set serial port&#xD;&#xA;properties.&#xD;&#xA;&#xD;&#xA;Some versions of Windows wont allow you to install unsigned drivers. If you&#xD;&#xA;suspect this, reboot the PC into &quot;Disable Driver Signature Enforcement&quot; mode.&#xD;&#xA;Win7:&#xD;&#xA;Repeatedly push F8 during boot until the boot menu appears.&#xD;&#xA;Select the &quot;Disable Driver Signature Enforcement&quot; option.&#xD;&#xA;Win10:&#xD;&#xA;Start Menu-&gt;Power button-&gt;Hold Shift key down and select Restart.&#xD;&#xA;When computer has restarted into the options menu, select:&#xD;&#xA;Troubleshoot-&gt;Advanced Option-&gt;Startup Settings-&gt;Restart-&gt;Disable driver signature enforcement&#xD;&#xA;You should now be able to install an unsigned driver.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG-STK3600 Development Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3600 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32LG_STK3600/examples/usbdcomposite/SimplicityStudio/STK3600_usbdcomposite.slsproj,../hardware/kit/EFM32LG_STK3600/examples/usbdcomposite/arm/usbdcomposite.uvprojx,../hardware/kit/EFM32LG_STK3600/examples/usbdcomposite/iar/usbdcomposite.eww"/>
    <properties key="core.boardCompatibility" value="brd2201a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3600_usbdhidkbd" description="&lt;h1&gt;&lt;b&gt;USB HID keyboard example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use the EFM32 USB Device protocol stack&#xD;&#xA;and implements an USB HID class keyboard device (one button !).&#xD;&#xA;&#xD;&#xA;PB0 is the keyboard button. Pressing this button will succesively write&#xD;&#xA;&quot;Silicon Labs - &quot;.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG-STK3600 Development Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3600 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32LG_STK3600/examples/usbdhidkbd/SimplicityStudio/STK3600_usbdhidkbd.slsproj,../hardware/kit/EFM32LG_STK3600/examples/usbdhidkbd/arm/usbdhidkbd.uvprojx,../hardware/kit/EFM32LG_STK3600/examples/usbdhidkbd/iar/usbdhidkbd.eww"/>
    <properties key="core.boardCompatibility" value="brd2201a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3600_usbdmsd" description="&lt;h1&gt;&lt;b&gt;USB Mass Storage Device example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use the EFM32 USB Device protocol stack&#xD;&#xA;to implement a device Mass Storage Class device (MSD).&#xD;&#xA;&#xD;&#xA;The example provides two different MSD types.&#xD;&#xA;&#xD;&#xA; - A 96KByte &quot;disk&quot; in internal SRAM (on devices with 128 kByte or larger SRAM)&#xD;&#xA; - An internal FLASH &quot;disk&quot; (disksize is internal FLASH size minus 64K)&#xD;&#xA;&#xD;&#xA;Select mediatype in msddmedia.h (#define MSD_MEDIA)&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG_STK3600 Development Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3600 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32LG_STK3600/examples/usbdmsd/SimplicityStudio/STK3600_usbdmsd.slsproj,../hardware/kit/EFM32LG_STK3600/examples/usbdmsd/arm/usbdmsd.uvprojx,../hardware/kit/EFM32LG_STK3600/examples/usbdmsd/iar/usbdmsd.eww"/>
    <properties key="core.boardCompatibility" value="brd2201a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3600_usbdvud" description="&lt;h1&gt;&lt;b&gt;USB Vendor Unique Device example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use the EFM32 USB Device protocol stack&#xD;&#xA;and implements an USB Vendor Unique Device.&#xD;&#xA;&#xD;&#xA;The example will toggle LED's 0 and 1 when receiving vendor unique class&#xD;&#xA;setup commands.&#xD;&#xA;&#xD;&#xA;This example is intended to be used together with the &quot;libusb&quot; device driver,&#xD;&#xA;and host application EFM32-LedApp.exe (a Windows application).&#xD;&#xA;&#xD;&#xA;The first time the USB device is connected to the host, you must tell the host&#xD;&#xA;OS to install the &quot;libusb&quot; device driver.&#xD;&#xA;&#xD;&#xA;On Windows, you can follow this procedure:&#xD;&#xA;Insert the device, and manually direct Windows to look for drivers in the&#xD;&#xA;directory where you have your copy of the &quot;EFM32_Vendor_Unique_Device.inf&quot; file.&#xD;&#xA;This can be done with the new device &quot;Wizard&quot; which might pop up after device&#xD;&#xA;insertion, or you can open &quot;Device Manager&quot;, left click on the new device and&#xD;&#xA;select &quot;Update Driver Software...&quot;.&#xD;&#xA;&#xD;&#xA;Some versions of Windows wont allow you to install unsigned drivers. If you&#xD;&#xA;suspect this, reboot the PC into &quot;Disable Driver Signature Enforcement&quot; mode.&#xD;&#xA;Win7:&#xD;&#xA;Repeatedly push F8 during boot until the boot menu appears.&#xD;&#xA;Select the &quot;Disable Driver Signature Enforcement&quot; option.&#xD;&#xA;Win10:&#xD;&#xA;Start Menu-&gt;Power button-&gt;Hold Shift key down and select Restart.&#xD;&#xA;When computer has restarted into the options menu, select:&#xD;&#xA;Troubleshoot-&gt;Advanced Option-&gt;Startup Settings-&gt;Restart-&gt;Disable driver signature enforcement&#xD;&#xA;You should now be able to install an unsigned driver.&#xD;&#xA;&#xD;&#xA;After libusb is installed, start EFM32-LedApp.exe.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG-STK3600 Development Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3600 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32LG_STK3600/examples/usbdvud/SimplicityStudio/STK3600_usbdvud.slsproj,../hardware/kit/EFM32LG_STK3600/examples/usbdvud/arm/usbdvud.uvprojx,../hardware/kit/EFM32LG_STK3600/examples/usbdvud/iar/usbdvud.eww"/>
    <properties key="core.boardCompatibility" value="brd2201a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3600_usbhenum" description="&lt;h1&gt;&lt;b&gt;USB device enumerator example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the USB host stack to implement&#xD;&#xA;a simple device enumerator. When a device is attached its descriptors are read&#xD;&#xA;and the vendor and product id's (VID/PID) are displayed on the LCD.&#xD;&#xA;The device attached will not be configured.&#xD;&#xA;&#xD;&#xA;Note that USB disk drives may fail, as some of them draw too much current&#xD;&#xA;when attached.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG-STK3600 Development Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3600 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32LG_STK3600/examples/usbhenum/SimplicityStudio/STK3600_usbhenum.slsproj,../hardware/kit/EFM32LG_STK3600/examples/usbhenum/arm/usbhenum.uvprojx,../hardware/kit/EFM32LG_STK3600/examples/usbhenum/iar/usbhenum.eww"/>
    <properties key="core.boardCompatibility" value="brd2201a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3600_usbxpress_echo" description="&lt;h1&gt;&lt;b&gt;USBXpress Echo example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project demonstrates the EFM32 USBXpress firmware library.&#xD;&#xA;It echoes all received data back to the host that sent it.&#xD;&#xA;&#xD;&#xA;The host-side application is the usbxpress_echo.py Python script found in the&#xD;&#xA;USBXpress SDK at Examples/Echo/Host. The USBXpress SDK is available for download&#xD;&#xA;at www.silabs.com/products/mcu/Pages/USBXpress.aspx.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG_STK3600 Development Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3600 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32LG_STK3600/examples/usbxpress_echo/SimplicityStudio/STK3600_usbxpress_echo.slsproj,../hardware/kit/EFM32LG_STK3600/examples/usbxpress_echo/arm/usbxpress_echo.uvprojx,../hardware/kit/EFM32LG_STK3600/examples/usbxpress_echo/iar/usbxpress_echo.eww"/>
    <properties key="core.boardCompatibility" value="brd2201a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3600_usbxpress_test_panel" description="&lt;h1&gt;&lt;b&gt;USBXpress Test Panel example&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project demonstrates the EFM32 USBXpress firmware library.&#xD;&#xA;It communicates with the TestPanel host application to send and receive data.&#xD;&#xA;TestPanel is included in the USBXpress SDK, available for download at:&#xD;&#xA;&#xD;&#xA;https://www.silabs.com/products/mcu/Pages/USBXpress.aspx&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG_STK3600 Development Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3600 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32LG_STK3600/examples/usbxpress_test_panel/SimplicityStudio/STK3600_usbxpress_test_panel.slsproj,../hardware/kit/EFM32LG_STK3600/examples/usbxpress_test_panel/arm/usbxpress_test_panel.uvprojx,../hardware/kit/EFM32LG_STK3600/examples/usbxpress_test_panel/iar/usbxpress_test_panel.eww"/>
    <properties key="core.boardCompatibility" value="brd2201a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3600_userpage" description="&lt;h1&gt;&lt;b&gt;Progamming and use of user flash page for data.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS  and demonstrates the programming of&#xD;&#xA;the user page in flash. The page can be used for data such as keys, serial&#xD;&#xA;numbers and other information that should not be deleted by a device erase.&#xD;&#xA;&#xD;&#xA;PB0 increases the main counter&#xD;&#xA;PB1 saves the main counter value to the userpage, and displays how many writes&#xD;&#xA;have been issued.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG_STK3600 Development Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3600 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32LG_STK3600/examples/userpage/SimplicityStudio/STK3600_userpage.slsproj,../hardware/kit/EFM32LG_STK3600/examples/userpage/arm/userpage.uvprojx,../hardware/kit/EFM32LG_STK3600/examples/userpage/iar/userpage.eww"/>
    <properties key="core.boardCompatibility" value="brd2201a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/userpage.c"/>
  </descriptors>
  <descriptors label="STK3300_blink" description="&lt;h1&gt;&lt;b&gt;Blink example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use EFM32 CMSIS and the emlib peripheral library to&#xD;&#xA;demonstrate the use of the LED on the starter kit. This example is intended as&#xD;&#xA;a skeleton for new projects.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32TG_STK3300 Starter Kit&#xD;&#xA;Device: EFM32TG840F32&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Tiny Gecko 3300 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32TG_STK3300/examples/blink/SimplicityStudio/STK3300_blink.slsproj,../hardware/kit/EFM32TG_STK3300/examples/blink/arm/blink.uvprojx,../hardware/kit/EFM32TG_STK3300/examples/blink/iar/blink.eww"/>
    <properties key="core.boardCompatibility" value="brd2100a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.tg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/blink.c"/>
  </descriptors>
  <descriptors label="STK3300_clock" description="&lt;h1&gt;&lt;b&gt;Wall Clock example using the segment LCD.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS  and demonstrates  the use of &#xD;&#xA;the LCD controller, RTC (real time counter), VCMP, GPIO and various &#xD;&#xA;Energy Modes (EM).&#xD;&#xA;&#xD;&#xA;The RTC is set up to wake the EFM32 from EM2 every minute. During this &#xD;&#xA;interval, the LCD is updated to reflect the current time. The animation &#xD;&#xA;feature is used to show the seconds. This is done by using the frame &#xD;&#xA;event counter to drive the animation feature every second.&#xD;&#xA;&#xD;&#xA;The VCMP is used to measure the input voltage on every wakeup. If the &#xD;&#xA;voltage drops too low, voltage boost is enabled on the LCD. This makes &#xD;&#xA;the LCD clear and readable even when running on low batteries.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32TG_STK2100 Development Kit&#xD;&#xA;Device: EFM32TG840F32 with LCD &#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Tiny Gecko 3300 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32TG_STK3300/examples/clock/SimplicityStudio/STK3300_clock.slsproj,../hardware/kit/EFM32TG_STK3300/examples/clock/arm/clock.uvprojx,../hardware/kit/EFM32TG_STK3300/examples/clock/iar/clock.eww"/>
    <properties key="core.boardCompatibility" value="brd2100a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.tg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/clock.c"/>
  </descriptors>
  <descriptors label="STK3300_cpt007b_demo" description="&lt;h1&gt;&lt;b&gt;CPT007B Demo&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This demo demonstrates the capacitive button function of CPT007B fixed function&#xD;&#xA;board. This demo runs on the EFM32 STK, and communicates with CPT007B through&#xD;&#xA;the GPIO pins on the EXP header. Virtual buttons on STK's LCD screen indicate&#xD;&#xA;whether the capacitive sensing buttons on CPT007B are pressed or released.&#xD;&#xA;This demo supports up to 7 capacitive buttons on CPT007B&#xD;&#xA; &#xD;&#xA;Board:  Silicon Labs EFM32TG_STK3300 Starter Kit and CPT007B Evaluation Board&#xD;&#xA;Device: EFM32TG840F32&lt;/pre&gt;">
    <properties key="template.category" value="Tiny Gecko 3300 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32TG_STK3300/examples/cpt007b/SimplicityStudio/STK3300_cpt007b_demo.slsproj,../hardware/kit/EFM32TG_STK3300/examples/cpt007b/arm/cpt007b_demo.uvprojx,../hardware/kit/EFM32TG_STK3300/examples/cpt007b/iar/cpt007b_demo.eww"/>
    <properties key="core.boardCompatibility" value="brd2100a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.tg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/cpt007b_demo.c"/>
  </descriptors>
  <descriptors label="STK3300_emlcd" description="&lt;h1&gt;&lt;b&gt;Energy Mode rolling demo, with segment LCD.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use EFM32 CMSIS and the emlib peripheral library to&#xD;&#xA;demonstrate the use of the LCD controller, RTC (real time counter), GPIO and&#xD;&#xA;various Energy Modes (EM) on the starter kit.&#xD;&#xA;&#xD;&#xA;EM2 is used for delays in between refreshing the LCD display, and a lot of&#xD;&#xA;&quot;eye candy&quot; are present to show off the MCU module's LCD display.&#xD;&#xA;&#xD;&#xA;The LCD controller drives the display down to EM2. In the demo, EM2 is used&#xD;&#xA;for &quot;most&quot; delays to show off this feature. The user can press PB0 or PB1 to&#xD;&#xA;activate EM3 and EM4. EM4 requires a system reset, while PB0 again will wake&#xD;&#xA;up the system  from Energy Mode 3.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32TG_STK3300 Starter Kit&#xD;&#xA;Device: EFM32TG840F32&#xD;&#xA;&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Tiny Gecko 3300 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32TG_STK3300/examples/emlcd/SimplicityStudio/STK3300_emlcd.slsproj,../hardware/kit/EFM32TG_STK3300/examples/emlcd/arm/emlcd.uvprojx,../hardware/kit/EFM32TG_STK3300/examples/emlcd/iar/emlcd.eww"/>
    <properties key="core.boardCompatibility" value="brd2100a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.tg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/emlcd.c"/>
  </descriptors>
  <descriptors label="STK3300_emode" description="&lt;h1&gt;&lt;b&gt;Select a single energy mode, and stay there.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 emlib and demonstrates the use of the LCD &#xD;&#xA;controller, RTC (real time counter), GPIO and various Energy Modes (EM).&#xD;&#xA;&#xD;&#xA;The user can press the pushbuttons PB0 and PB1 to select which energy mode to &#xD;&#xA;demonstrate.&#xD;&#xA;&#xD;&#xA;This demo application has been made to give a quick demo of the&#xD;&#xA;energyAware Profiler from Silicon Labs and to reproduce the different &#xD;&#xA;energy modes seen in the EFM32 datasheet current consumption table. &#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32TG_STK3300 Development Kit&#xD;&#xA;Device: EFM32TG840F32&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Tiny Gecko 3300 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32TG_STK3300/examples/emode/SimplicityStudio/STK3300_emode.slsproj,../hardware/kit/EFM32TG_STK3300/examples/emode/arm/emode.uvprojx,../hardware/kit/EFM32TG_STK3300/examples/emode/iar/emode.eww"/>
    <properties key="core.boardCompatibility" value="brd2100a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.tg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3300_energy" description="&lt;h1&gt;&lt;b&gt;Board Support Package API example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use EFM32 CMSIS and the emlib peripheral library to&#xD;&#xA;demonstrate the use of the EFM32TG_STK3300 Binary Support Package (BSP).&#xD;&#xA;&#xD;&#xA;The BSP is used to read out the current uA measurement and VMCU voltage level&#xD;&#xA;from the board controller.&#xD;&#xA;&#xD;&#xA;The BSP use a 115800-N-1 UART to communicate with the board controller, if you&#xD;&#xA;do not need the board support functions, there is no need to include the BSP&#xD;&#xA;in your project. Currently, the UART communication with 16 x oversampling is&#xD;&#xA;used, limiting the communication channel to high frequencies for the peripheral&#xD;&#xA;clock.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32TG_STK3300 Starter Kit&#xD;&#xA;Device: EFM32TG840F32&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Tiny Gecko 3300 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32TG_STK3300/examples/energy/SimplicityStudio/STK3300_energy.slsproj,../hardware/kit/EFM32TG_STK3300/examples/energy/arm/energy.uvprojx,../hardware/kit/EFM32TG_STK3300/examples/energy/iar/energy.eww"/>
    <properties key="core.boardCompatibility" value="brd2100a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.tg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/energy.c"/>
  </descriptors>
  <descriptors label="STK3300_freertos_blink" description="&lt;h1&gt;&lt;b&gt;FreeRTOS - Blink example&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the FreeRTOS, and gives a basic demonstration of using two tasks to blink the LEDs on the board. &#xD;&#xA;It also shows how to use idle mode with different energy saving modes ( from EM1 to EM2 - configured in FreeRTOSConfig.h file).&#xD;&#xA;This example is intended as a skeleton for new projects using FreeRTOS.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32TG_STK3300 Starter Kit&#xD;&#xA;Device: EFM32TG840F32&lt;/pre&gt;">
    <properties key="template.category" value="Tiny Gecko 3300 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32TG_STK3300/examples/freertos_blink/SimplicityStudio/STK3300_freertos_blink.slsproj,../hardware/kit/EFM32TG_STK3300/examples/freertos_blink/iar/freertos_blink.eww"/>
    <properties key="core.boardCompatibility" value="brd2100a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.tg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3300_freertos_tickless" description="&lt;h1&gt;&lt;b&gt;FreeRTOS - Tickless example&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the FreeRTOS, and gives a basic demonstration of using two tasks,&#xD;&#xA;one sender generating number and one receiver that displays the number on the LCD. The FreeRTOS is &#xD;&#xA;configured in tickless mode, going into EM2 when no tasks are active.&#xD;&#xA;&#xD;&#xA;EM3 mode cannot be used in this example because the LCD driver and timer are not available in EM3.&#xD;&#xA;For more details, see the configuraiton in FreeRTOSConfig.h file.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32TG_STK3300 Starter Kit&#xD;&#xA;Device: EFM32TG840F32&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Tiny Gecko 3300 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32TG_STK3300/examples/freertos_tickless/SimplicityStudio/STK3300_freertos_tickless.slsproj,../hardware/kit/EFM32TG_STK3300/examples/freertos_tickless/arm/freertos_tickless.uvprojx,../hardware/kit/EFM32TG_STK3300/examples/freertos_tickless/iar/freertos_tickless.eww"/>
    <properties key="core.boardCompatibility" value="brd2100a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.tg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3300_gpiointerrupt" description="&lt;h1&gt;&lt;b&gt;Gpio interrupt example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use EFM32 CMSIS and gpio interrupt dispatcher driver to show&#xD;&#xA;how to handle multiple GPIO interrupts. Button PB1 sets LED on and PB0 unsets it.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32TG_STK3300 Starter Kit&#xD;&#xA;Device: EFM32TG840F32&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Tiny Gecko 3300 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32TG_STK3300/examples/gpiointerrupt/SimplicityStudio/STK3300_gpiointerrupt.slsproj,../hardware/kit/EFM32TG_STK3300/examples/gpiointerrupt/arm/gpiointerrupt.uvprojx,../hardware/kit/EFM32TG_STK3300/examples/gpiointerrupt/iar/gpiointerrupt.eww"/>
    <properties key="core.boardCompatibility" value="brd2100a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.tg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3300_inttemp" description="&lt;h1&gt;&lt;b&gt;Internal temperature sensor example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS and emlib to demonstrate&#xD;&#xA;the usage of the internal temperature sensor on Tiny Gecko devices.&#xD;&#xA;&#xD;&#xA;Note: EFM32 devices with production ID lower than 18 may measure inaccurate&#xD;&#xA;temperatures due to a sensor calibration bug.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32TG_STK3300 Starter Kit&#xD;&#xA;Device: EFM32TG840F32&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Tiny Gecko 3300 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32TG_STK3300/examples/inttemp/SimplicityStudio/STK3300_inttemp.slsproj,../hardware/kit/EFM32TG_STK3300/examples/inttemp/arm/inttemp.uvprojx,../hardware/kit/EFM32TG_STK3300/examples/inttemp/iar/inttemp.eww"/>
    <properties key="core.boardCompatibility" value="brd2100a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.tg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/inttemp.c"/>
  </descriptors>
  <descriptors label="STK3300_lcsense" description="&lt;h1&gt;&lt;b&gt;LC sense example using LESENSE.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS and demonstrates the use of &#xD;&#xA;the LESENSE peripheral on the board.&#xD;&#xA;&#xD;&#xA;This demo has two different modes.&#xD;&#xA;To change between them, press PB0. In Mode0 (default). The LESENSE&#xD;&#xA;module will wake up whenever a metal object is passed above the LC&#xD;&#xA;sensor in the bottom right of the STK. In Mode 1, the EFM32 will only&#xD;&#xA;wake up every fifth time the metal object is passed over the sensor.&#xD;&#xA;&#xD;&#xA;Board: Silicon Labs EFM32TG_STK3300 Development Kit&#xD;&#xA;Device: EFM32TG840F32&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Tiny Gecko 3300 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32TG_STK3300/examples/lcsense/SimplicityStudio/STK3300_lcsense.slsproj,../hardware/kit/EFM32TG_STK3300/examples/lcsense/arm/lcsense.uvprojx,../hardware/kit/EFM32TG_STK3300/examples/lcsense/iar/lcsense.eww"/>
    <properties key="core.boardCompatibility" value="brd2100a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.tg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/lcsense.c"/>
  </descriptors>
  <descriptors label="STK3300_leuart" description="&lt;h1&gt;&lt;b&gt;LEUART/DMA in Energy mode2 output example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project reads and sends the data back to terminal using LEUART&#xA;while staying in EM2.&#xA;&#xA;It uses the EFM32 CMSIS and emlib, to demonstrate the&#xA;use of LEUART communication using DMA under the EM2 on the &#xA;EFM32TG_STK3300 Starter Kit.&#xA;&#xA;The LEUART is configured to be used with DMA under EM2.&#xA;The terminal configuration is 9600-8-N-1.&#xA;The DMA is configured to handle read and write data bytes from LEUART under EM2.&#xA;&#xA;Testing:&#xA;1. Use the expansion header to connect the LEUART to your PC.&#xA;2. Pin Configuration:&#xA;	2.1. Pin-12 (PD4) LEUART0_TX&#xA;	2.2. Pin-14 (PD5) LEUART0_RX&#xA;	2.3. Pin-1 Gnd&#xA;&#xA;3. Configure terminal to 9600-8-N-1.&#xA;4. Enter characters from your keyboard and see if you receive the echo on the terminal.&#xA;5. Check the average current consumption is equal to EM2 on Energy Profiler.&#xA;&#xA;Board:  Silicon Labs EFM32TG_STK3300 Starter Kit&#xA;Device: EFM32TG840F32&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Tiny Gecko 3300 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32TG_STK3300/examples/leuart/SimplicityStudio/STK3300_leuart.slsproj,../hardware/kit/EFM32TG_STK3300/examples/leuart/arm/leuart.uvprojx,../hardware/kit/EFM32TG_STK3300/examples/leuart/iar/leuart.eww"/>
    <properties key="core.boardCompatibility" value="brd2100a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.tg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3300_lightsense" description="&lt;h1&gt;&lt;b&gt;Lightsensor example using LESENSE.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS and demonstrates the use of &#xD;&#xA;the LESENSE peripheral on the board.&#xD;&#xA;&#xD;&#xA;This demo has two different modes.&#xD;&#xA;To change between them, press PB0. In Mode0 (default). The LESENSE&#xD;&#xA;module will wake up whenever a &quot;dark&quot; event is detected by the light sensor&#xD;&#xA;below the &quot;EFM32&quot; sign on the right from the LCD on the STK. In Mode 1, &#xD;&#xA;EFM32 will only wake up on every fifth &quot;dark&quot; event.&#xD;&#xA;&#xD;&#xA;Board: Silicon Labs EFM32TG_STK3300 Development Kit&#xD;&#xA;Device: EFM32TG840F32&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Tiny Gecko 3300 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32TG_STK3300/examples/lightsense/SimplicityStudio/STK3300_lightsense.slsproj,../hardware/kit/EFM32TG_STK3300/examples/lightsense/arm/lightsense.uvprojx,../hardware/kit/EFM32TG_STK3300/examples/lightsense/iar/lightsense.eww"/>
    <properties key="core.boardCompatibility" value="brd2100a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.tg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/lightsense.c"/>
  </descriptors>
  <descriptors label="STK3300_nvm_simple" description="&lt;h1&gt;&lt;b&gt;nvm_simple - non-volatile memory driver usage simple example&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example shows simple usage of NVM module.&#xD;&#xA;&#xD;&#xA;It stores object (32bit word in this case) into flash region declared &#xD;&#xA;as non-volatile memory area. It uses wear leveling and demonstrates &#xD;&#xA;simple use of the NVM driver. There are two types of pages: &quot;normal&quot; &#xD;&#xA;dedicated for storing multiple objects which doesn't change often &#xD;&#xA;and &quot;wear&quot; which can store single object (but this could be structure&#xD;&#xA;containing many fields) that can often change. In this example on two pages &#xD;&#xA;same object is stored but NVM could handle multiple pages with different objects.&#xD;&#xA;&#xD;&#xA;PB0 - short press recalls data from &quot;normal&quot; page&#xD;&#xA;PB0 - long press store data to &quot;normal&quot; page&#xD;&#xA;PB1 - counts up, and after releasing stores data to &quot;wear&quot; page&#xD;&#xA;&#xD;&#xA;RESET - resets CPU and if there were valid data in NVM recovers last data value.&#xD;&#xA;&#xD;&#xA;LED1 - signals writing to flash&#xD;&#xA;LED0 - signals reading from flash (invisible due to short time)&#xD;&#xA;&#xD;&#xA;In case of fatal error LED0 blinks showing place in code that caused it.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32GG-STK3300 Development Kit&#xD;&#xA;Device: EFM32TG840F32&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Tiny Gecko 3300 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32TG_STK3300/examples/nvm_simple/SimplicityStudio/STK3300_nvm_simple.slsproj,../hardware/kit/EFM32TG_STK3300/examples/nvm_simple/arm/nvm_simple.uvprojx,../hardware/kit/EFM32TG_STK3300/examples/nvm_simple/iar/nvm_simple.eww"/>
    <properties key="core.boardCompatibility" value="brd2100a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.tg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3300_powertest" description="&lt;h1&gt;&lt;b&gt;Power test example, running demonstration of energy modes.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use EFM32 CMSIS and the emlib peripheral library&#xD;&#xA;to demonstrate the use of the various Energy Modes available on the&#xD;&#xA;EFM32TG840F32. When running this example, the EnergyAware Profiler tool&#xD;&#xA;in Simplicity Studio can be used to show the power consumption of each &#xD;&#xA;energy mode.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32TG-STK3300 Development Kit&#xD;&#xA;Device: EFM32TG840F32&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Tiny Gecko 3300 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32TG_STK3300/examples/powertest/SimplicityStudio/STK3300_powertest.slsproj,../hardware/kit/EFM32TG_STK3300/examples/powertest/arm/powertest.uvprojx,../hardware/kit/EFM32TG_STK3300/examples/powertest/iar/powertest.eww"/>
    <properties key="core.boardCompatibility" value="brd2100a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.tg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3300_rtx_blink" description="&lt;h1&gt;&lt;b&gt;Keil RTX RTOS - Blink example&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the Keil RTX RTOS, and gives a basic demonstration&#xD;&#xA;of using two tasks to blink the LEDs on the board.&#xD;&#xA;This example is intended as a skeleton for new projects using Keil RTX.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32TG-STK3300 Development Kit&#xD;&#xA;Device: EFM32TG840F32&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Tiny Gecko 3300 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32TG_STK3300/examples/rtx_blink/SimplicityStudio/STK3300_rtx_blink.slsproj,../hardware/kit/EFM32TG_STK3300/examples/rtx_blink/arm/rtx_blink.uvprojx,../hardware/kit/EFM32TG_STK3300/examples/rtx_blink/iar/rtx_blink.eww"/>
    <properties key="core.boardCompatibility" value="brd2100a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.tg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/rtx_blink.c"/>
  </descriptors>
  <descriptors label="STK3300_rtx_tickless" description="&lt;h1&gt;&lt;b&gt;Keil RTX RTOS - tick-less example&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the Keil RTX RTOS, and gives a basic demonstration&#xD;&#xA;of using two tasks; one sender generating number and one receiver that displays&#xD;&#xA;the number on LCD. The RTX is configured in tick-less mode, going into EM2 when&#xD;&#xA;no tasks are active. This example is intended as a skeleton for new projects&#xD;&#xA;using Keil RTX for energy aware applications.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32TG-STK3300&#xD;&#xA;Device: EFM32TG840F32&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Tiny Gecko 3300 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32TG_STK3300/examples/rtx_tickless/SimplicityStudio/STK3300_rtx_tickless.slsproj,../hardware/kit/EFM32TG_STK3300/examples/rtx_tickless/arm/rtx_tickless.uvprojx,../hardware/kit/EFM32TG_STK3300/examples/rtx_tickless/iar/rtx_tickless.eww"/>
    <properties key="core.boardCompatibility" value="brd2100a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.tg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/rtx_tickless.c"/>
  </descriptors>
  <descriptors label="STK3300_rtx_tickless_nolcd" description="&lt;h1&gt;&lt;b&gt;Keil RTX RTOS - tick-less example with LCD off&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example is modification of rtx_tickless to demonstrate ultra low power consumption &#xD;&#xA;of Gecko processors in connection with RTX RTOS. Comparing to previous example it has LCD&#xD;&#xA;turned off. Low frequency crystal oscillator was disabled and low frequency RC oscillator&#xD;&#xA;used instead to lower energy consumption even more.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;This example project uses the Keil RTX RTOS, and gives a basic demonstration&#xD;&#xA;of using two tasks; one sender generating number and one receiver.&#xD;&#xA;The RTX is configured in tick-less mode, going into EM2 when&#xD;&#xA;no tasks are active. This example is intended as a skeleton for new projects&#xD;&#xA;using Keil RTX for energy aware applications.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32TG-STK3300&#xD;&#xA;Device: EFM32TG840F32&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Tiny Gecko 3300 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32TG_STK3300/examples/rtx_tickless_nolcd/SimplicityStudio/STK3300_rtx_tickless_nolcd.slsproj,../hardware/kit/EFM32TG_STK3300/examples/rtx_tickless_nolcd/arm/rtx_tickless_nolcd.uvprojx,../hardware/kit/EFM32TG_STK3300/examples/rtx_tickless_nolcd/iar/rtx_tickless_nolcd.eww"/>
    <properties key="core.boardCompatibility" value="brd2100a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.tg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/rtx_tickless.c"/>
  </descriptors>
  <descriptors label="STK3300_touch" description="&lt;h1&gt;&lt;b&gt;Capactive touch example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example demonstrates the capacitive touch capability of the EFM32 and the&#xD;&#xA;Tiny Gecko STK. This is a port of the EFM32_G8xx_STK capacitive touch demo.&#xD;&#xA;&#xD;&#xA;It demonstrates the use of LESENSE, ACMP, VCMP, LCD, and EMU.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32TG_STK3300&#xD;&#xA;Device: EFM32G840F32&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Tiny Gecko 3300 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32TG_STK3300/examples/touch/SimplicityStudio/STK3300_touch.slsproj,../hardware/kit/EFM32TG_STK3300/examples/touch/arm/touch.uvprojx,../hardware/kit/EFM32TG_STK3300/examples/touch/iar/touch.eww"/>
    <properties key="core.boardCompatibility" value="brd2100a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.tg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/touchdemo.c"/>
  </descriptors>
  <descriptors label="STK3300_ucos2" description="&lt;h1&gt;&lt;b&gt;uC/OS-II RTOS on EFM32 using example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This is a port of the uC/OS-II RTOS from Micrium Inc, http://www.micrium.com&#xD;&#xA;&#xD;&#xA;The port has been adapted by Silicon Labs for use with our Development&#xD;&#xA;Kit. It requires the standard EFM32 CMSIS package (including emlib).&#xD;&#xA;&#xD;&#xA;The example has three tasks:&#xD;&#xA; - Task1: LED blink task&#xD;&#xA; - Task2: Receives characters from serial port and posts message to Task3&#xD;&#xA; - Task3: Receives message from Task2 and writes it on LCD and serial port&#xD;&#xA;&#xD;&#xA;Serial port can be chosen between:&#xD;&#xA;USART1 - location 1 is used, GPIO port D pins 0 and 1, baudrate 115200-8-N-1.&#xD;&#xA;LEUART0 - location 0 is used, GPIO port D pins 4 and 5, baudrate 9600-8-N-1.&#xD;&#xA;&#xD;&#xA;These USARTs are by default not connected to any serial port, so this needs&#xD;&#xA;to be connected to external RS232 ports to be usable.&#xD;&#xA;&#xD;&#xA;uC/OS-II is provided in source form for FREE evaluation, for educational use&#xD;&#xA;or for peaceful research.&#xD;&#xA;&#xD;&#xA;If you plan on using uC/OS-II in a commercial product you need to contact&#xD;&#xA;Micrium to properly license its use in your product. We provide ALL the&#xD;&#xA;source code for your convenience and to help you experience uC/OS-II.&#xD;&#xA;The fact that the source is provided does NOT mean that you can use it without&#xD;&#xA;paying a licensing fee.&#xD;&#xA;&#xD;&#xA;For commercial use, contact Micrium, http://www.micrium.com for details.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32TG_STK3300 Starter Kit&#xD;&#xA;Device: EFM32TG840F32&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Tiny Gecko 3300 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32TG_STK3300/examples/ucos2_port/arm/ucos2.uvprojx,../hardware/kit/EFM32TG_STK3300/examples/ucos2_port/iar/ucos2.eww"/>
    <properties key="core.boardCompatibility" value="brd2100a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.tg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/app/app.c"/>
  </descriptors>
  <descriptors label="STK3300_userpage" description="&lt;h1&gt;&lt;b&gt;Progamming and use of user flash page for data.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS  and demonstrates the programming of&#xD;&#xA;the user page in flash. The page can be used for data such as keys, serial&#xD;&#xA;numbers and other information that should not be deleted by a device erase.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32-TG-STK3300 Development Kit&#xD;&#xA;Device: EFM32TG840QF32&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Tiny Gecko 3300 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32TG_STK3300/examples/userpage/SimplicityStudio/STK3300_userpage.slsproj,../hardware/kit/EFM32TG_STK3300/examples/userpage/arm/userpage.uvprojx,../hardware/kit/EFM32TG_STK3300/examples/userpage/iar/userpage.eww"/>
    <properties key="core.boardCompatibility" value="brd2100a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.tg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/userpage.c"/>
  </descriptors>
  <descriptors label="STK3300_weatherstation" description="&lt;h1&gt;&lt;b&gt;Weatherstation using the Sensor add-on board on the EFM32TG-STK3300.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses the EFM32 CMSIS including emlib and the&#xA;board support package support functions/drivers to demonstrate driving&#xA;the LCD display on the EFM32TG_STK3300 kit. In addition, it&#xA;demonstrates the use of Silabs I2C based sensors on the expansion board&#xA;header.&#xA;&#xA;You must have a Silabs Sensor add-on board to make use of this demo.&#xA;Once the demo is started, hold your hand over the gesture sensor. Once&#xA;the sensor detects your hand the display will become active.&#xA;&#xA;Swipe left and right over the sensor to scroll through temperature, humidity&#xA;and UV index. On the temperature screen, you can swipe up or down to change&#xA;between Fahrenheit or Celcius.&#xA;&#xA;Note: Due to the size of this example, you might need to enable compiler &#xA;optimizations to be able to fit the entire binary in the 32k of flash!&#xA;&#xA;Board:  Silicon Labs EFM32TG-STK3300 Development Kit and Sensor Add-on board&#xA;Device: EFM32TG840F32&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Tiny Gecko 3300 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32TG_STK3300/examples/weatherstation/SimplicityStudio/STK3300_weatherstation.slsproj,../hardware/kit/EFM32TG_STK3300/examples/weatherstation/arm/weatherstation.uvprojx,../hardware/kit/EFM32TG_STK3300/examples/weatherstation/iar/weatherstation.eww"/>
    <properties key="core.boardCompatibility" value="brd2100a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.tg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/weatherstation.c"/>
  </descriptors>
  <descriptors label="DK3850_blink" description="&lt;h1&gt;&lt;b&gt;Blink example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use EFM32 CMSIS and the emlib peripheral library&#xD;&#xA;to demonstrate the use of the LED on the EFM32WG-DK3850 development kit.&#xD;&#xA;This example is intended as a skeleton for new projects.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG-DK3850 Development Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3850 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32WG_DK3850/examples/blink/SimplicityStudio/DK3850_blink.slsproj,../hardware/kit/EFM32WG_DK3850/examples/blink/arm/blink.uvprojx,../hardware/kit/EFM32WG_DK3850/examples/blink/iar/blink.eww"/>
    <properties key="core.boardCompatibility" value="brd3800a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/blink.c"/>
  </descriptors>
  <descriptors label="DK3850_eeprom" description="&lt;h1&gt;&lt;b&gt;I2C eeprom example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS and emlib including DK BSP&#xD;&#xA;(board support package) and demonstrates the use of the I2C bus&#xD;&#xA;accessing the EEPROM on the DK.&#xD;&#xA;&#xD;&#xA;The first 3 bytes of the EEPROM is displayed on the TFT screen (this&#xD;&#xA;will normally be FFFFFF first time.) Since stored in EEPROM, the data&#xD;&#xA;survives resets and power cycles.&#xD;&#xA;&#xD;&#xA;The following usage is possible:&#xD;&#xA;&#xD;&#xA;- Joystick up/down will increment/decrement the first byte (Byte0) in&#xD;&#xA;  the EEPROM. Byte1 is then set to Byte0+1, and Byte2 is set to Byte1+1.&#xD;&#xA;- Press SW4 button to reset 3 first bytes to 0xFF.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG-DK3850 Development Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3850 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32WG_DK3850/examples/eeprom/SimplicityStudio/DK3850_eeprom.slsproj,../hardware/kit/EFM32WG_DK3850/examples/eeprom/arm/eeprom.uvprojx,../hardware/kit/EFM32WG_DK3850/examples/eeprom/iar/eeprom.eww"/>
    <properties key="core.boardCompatibility" value="brd3800a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/eepromtest.c"/>
  </descriptors>
  <descriptors label="DK3850_emode" description="&lt;h1&gt;&lt;b&gt;Energy Mode 0-4 example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project for the EFM32WG-DK3850 development kit, illustrates the&#xD;&#xA;various energy saving modes of the EFM32WG990F256.&#xD;&#xA;&#xD;&#xA;Use joystick Up and Down to select the demo, after pressing the kit AEM &#xD;&#xA;button to enable the display to be driven from the Wonder Gecko.&#xD;&#xA;&#xD;&#xA;When the correct demo has been selected, press PB1 to activate it. &#xD;&#xA;After this, you need to use the kit's AEM button again to go back to the&#xD;&#xA;energy mesaurement display. A new press on the AEM button will not bring&#xD;&#xA;back the original screen, as the Wonder Gecko will be in a sleep mode. You&#xD;&#xA;need to restart to test another demo.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG-DK3850 Development Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3850 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32WG_DK3850/examples/emode/SimplicityStudio/DK3850_emode.slsproj,../hardware/kit/EFM32WG_DK3850/examples/emode/arm/emode.uvprojx,../hardware/kit/EFM32WG_DK3850/examples/emode/iar/emode.eww"/>
    <properties key="core.boardCompatibility" value="brd3800a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/emode.c"/>
  </descriptors>
  <descriptors label="DK3850_fatcon" description="&lt;h1&gt;&lt;b&gt;FAT File System console example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use EFM32 CMSIS and the emlib peripheral library&#xD;&#xA;to demonstrate SPI-access to the Micro-SD card on the EFM32WG-DK3850&#xD;&#xA;development kit. The application gives a small &quot;console&quot; on the serial&#xD;&#xA;port which can be used to view and list contents of the file system.&#xD;&#xA;Serial configuration 115200-8-N-1 is used.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG-DK3850 Development Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3850 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32WG_DK3850/examples/fatcon/SimplicityStudio/DK3850_fatcon.slsproj,../hardware/kit/EFM32WG_DK3850/examples/fatcon/arm/fatcon.uvprojx,../hardware/kit/EFM32WG_DK3850/examples/fatcon/iar/fatcon.eww"/>
    <properties key="core.boardCompatibility" value="brd3800a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/fatcon.c"/>
  </descriptors>
  <descriptors label="DK3850_freertos_blink" description="&lt;h1&gt;&lt;b&gt;FreeRTOS - Blink example&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the FreeRTOS, and gives a basic demonstration of using two tasks to blink the LEDs on the board. &#xD;&#xA;It also shows how to use idle with different energy saving modes with or without ticless mode( from EM1 to EM3 - configured in FreeRTOSConfig.h file).&#xD;&#xA;This example is intended as a skeleton for new projects using FreeRTOS.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG-DK3850 Development Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3850 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32WG_DK3850/examples/freertos_blink/SimplicityStudio/DK3850_freertos_blink.slsproj,../hardware/kit/EFM32WG_DK3850/examples/freertos_blink/arm/freertos_blink.uvprojx,../hardware/kit/EFM32WG_DK3850/examples/freertos_blink/iar/freertos_blink.eww"/>
    <properties key="core.boardCompatibility" value="brd3800a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="DK3850_graphxy" description="&lt;h1&gt;&lt;b&gt;emWin example - XY Graph demonstration.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the emWin library.&#xD;&#xA;&#xD;&#xA;Control using touch panel or joystick.&#xD;&#xA;On application startup there is possibility to&#xD;&#xA;perform touch panel calibration.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG-DK3850 Development Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3850 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32WG_DK3850/examples/graphxy/SimplicityStudio/DK3850_graphxy.slsproj,../hardware/kit/EFM32WG_DK3850/examples/graphxy/arm/graphxy.uvprojx,../hardware/kit/EFM32WG_DK3850/examples/graphxy/iar/graphxy.eww"/>
    <properties key="core.boardCompatibility" value="brd3800a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/WIDGET_GraphXY.c"/>
  </descriptors>
  <descriptors label="DK3850_graphxy_mm" description="&lt;h1&gt;&lt;b&gt;emWin example - XY Graph demonstration - energy efficient.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the emWin library maintaining&#xD;&#xA;low power consumption.&#xD;&#xA;&#xD;&#xA;TFT driver is controlled in so called &quot;Memory Map&quot;&#xD;&#xA;configuration, where internal RAM of TFT controller &#xD;&#xA;is used. There is no additional framebuffer needed&#xD;&#xA;so this example could be run in small RAM footprint &#xD;&#xA;systems. The code fits 128kB flash and uses less &#xD;&#xA;than 32kB RAM.&#xD;&#xA;&#xD;&#xA;In idle mode (where no user interaction is required)&#xD;&#xA;EM2 mode is enabled, allowing reducing power consuption&#xD;&#xA;down to ~4uA.&#xD;&#xA;&#xD;&#xA;Control using touch panel or joystick.&#xD;&#xA;On application startup there is possibility to&#xD;&#xA;perform touch panel calibration.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG-DK3850 Development Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3850 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32WG_DK3850/examples/graphxy_mm/SimplicityStudio/DK3850_graphxy_mm.slsproj,../hardware/kit/EFM32WG_DK3850/examples/graphxy_mm/arm/graphxy_mm.uvprojx,../hardware/kit/EFM32WG_DK3850/examples/graphxy_mm/iar/graphxy_mm.eww"/>
    <properties key="core.boardCompatibility" value="brd3800a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/WIDGET_GraphXY.c"/>
  </descriptors>
  <descriptors label="DK3850_guidemo" description="&lt;h1&gt;&lt;b&gt;emWin example - show gui functionality&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the emWin library.&#xD;&#xA;&#xD;&#xA;Simple application showing different visual effects&#xD;&#xA;which could be achieved by means of emWin&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG-DK3850 Development Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3850 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32WG_DK3850/examples/guidemo/SimplicityStudio/DK3850_guidemo.slsproj,../hardware/kit/EFM32WG_DK3850/examples/guidemo/arm/guidemo.uvprojx,../hardware/kit/EFM32WG_DK3850/examples/guidemo/iar/guidemo.eww"/>
    <properties key="core.boardCompatibility" value="brd3800a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="guidemo.c"/>
  </descriptors>
  <descriptors label="DK3850_guidemo_mm" description="&lt;h1&gt;&lt;b&gt;emWin example - show gui functionality - energy efficient.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the emWin library maintaining&#xD;&#xA;low power consumption.&#xD;&#xA;&#xD;&#xA;TFT driver is controlled in so called &quot;Memory Map&quot;&#xD;&#xA;configuration, where internal RAM of TFT controller &#xD;&#xA;is used. There is no additional framebuffer needed &#xD;&#xA;so this example could be run in small RAM footprint &#xD;&#xA;systems.&#xD;&#xA;&#xD;&#xA;Simple application showing different visual effects&#xD;&#xA;which could be achieved by means of emWin.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG-DK3850 Development Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3850 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32WG_DK3850/examples/guidemo_mm/SimplicityStudio/DK3850_guidemo_mm.slsproj,../hardware/kit/EFM32WG_DK3850/examples/guidemo_mm/arm/guidemo_mm.uvprojx,../hardware/kit/EFM32WG_DK3850/examples/guidemo_mm/iar/guidemo_mm.eww"/>
    <properties key="core.boardCompatibility" value="brd3800a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/GUIDEMO.c"/>
  </descriptors>
  <descriptors label="DK3850_hardfault" description="&lt;h1&gt;&lt;b&gt;Hardfault handler example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project demonstrates the use of the hard fault handler, and&#xD;&#xA;how to install and use another HardFault exception handler to provide&#xD;&#xA;useful information when these types of errors occurs.&#xD;&#xA;The information is transmitted on the kit UART port, serial configuration&#xD;&#xA;115200-8-N-1 is used.&#xD;&#xA;&#xD;&#xA;Three function calls for triggering software errors to be trapped is&#xD;&#xA;provided, comment them in and out to select between them.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG-DK3850 Development Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3850 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32WG_DK3850/examples/hardfault/SimplicityStudio/DK3850_hardfault.slsproj,../hardware/kit/EFM32WG_DK3850/examples/hardfault/iar/hardfault.eww"/>
    <properties key="core.boardCompatibility" value="brd3800a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="DK3850_inttemp" description="&lt;h1&gt;&lt;b&gt;Internal temperature sensor example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS and emlib including DK BSP&#xD;&#xA;(board support package) and demonstrates the use of the internal&#xD;&#xA;temperature sensor and ADC on the EFM32.&#xD;&#xA;&#xD;&#xA;Note: EFM32 devices with production ID lower than 18 may measure inaccurate&#xD;&#xA;temperatures due to a sensor calibration bug.&#xD;&#xA;&#xD;&#xA;The following configuration is possible:&#xD;&#xA;&#xD;&#xA;- Joystick push toggles between Fahrenheit and Celsius display mode.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG-DK3850 Development Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3850 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32WG_DK3850/examples/inttemp/SimplicityStudio/DK3850_inttemp.slsproj,../hardware/kit/EFM32WG_DK3850/examples/inttemp/arm/inttemp.uvprojx,../hardware/kit/EFM32WG_DK3850/examples/inttemp/iar/inttemp.eww"/>
    <properties key="core.boardCompatibility" value="brd3800a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/inttemp.c"/>
  </descriptors>
  <descriptors label="DK3850_joystick" description="&lt;h1&gt;&lt;b&gt;Kit joystick control example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use EFM32 CMSIS and the emlib peripheral library to&#xD;&#xA;demonstrate the joystick control API of the development kit. Please note that&#xD;&#xA;you need to configure the AEM-state to &quot;EFM&quot; to be able to operate this&#xD;&#xA;example. The example also shows how to enable and use a GPIO interrupt.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG-DK3850 Development Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3850 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32WG_DK3850/examples/joystick/SimplicityStudio/DK3850_joystick.slsproj,../hardware/kit/EFM32WG_DK3850/examples/joystick/arm/joystick.uvprojx,../hardware/kit/EFM32WG_DK3850/examples/joystick/iar/joystick.eww"/>
    <properties key="core.boardCompatibility" value="brd3800a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/joystick.c"/>
  </descriptors>
  <descriptors label="DK3850_leuart" description="&lt;h1&gt;&lt;b&gt;LEUART/DMA in Energy mode2 output example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project reads and sends the data back to terminal using LEUART&#xD;&#xA;while staying in EM2.&#xD;&#xA;&#xD;&#xA;It uses the EFM32 CMSIS and emlib, to demonstrate the&#xD;&#xA;use of LEUART communication using DMA under the EM2 on the &#xD;&#xA;EFM32WG_DK3850 development kit.&#xD;&#xA;&#xD;&#xA;The LEUART is configured to be used with DMA under EM2.&#xD;&#xA;The terminal configuration is 9600-8-N-1.&#xD;&#xA;The DMA is configured to handle read and write data bytes from LEUART under EM2.&#xD;&#xA;&#xD;&#xA;Testing:&#xD;&#xA;1. Use the LEUART serial port header to connect the LEUART to your PC.&#xD;&#xA;2. Configure terminal to 9600-8-N-1.&#xD;&#xA;3. Enter characters from your keyboard and see if you receive the echo on the terminal.&#xD;&#xA;4. Check the average current consumption is equal to EM2 on Energy Profiler.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG_DK3850 Development Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3850 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32WG_DK3850/examples/leuart/SimplicityStudio/DK3850_leuart.slsproj,../hardware/kit/EFM32WG_DK3850/examples/leuart/arm/leuart.uvprojx,../hardware/kit/EFM32WG_DK3850/examples/leuart/iar/leuart.eww"/>
    <properties key="core.boardCompatibility" value="brd3800a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="DK3850_life" description="&lt;h1&gt;&lt;b&gt;Conway's game of life, TFT direct drive example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example demonstrate driving the EFM32GG_DK37850 kit's TFT-display &#xD;&#xA;from the EFM32 Wonder Gecko.&#xD;&#xA;&#xD;&#xA;This example is driving the display in &quot;direct drive&quot; (or mode generic in &#xD;&#xA;SSD2119 terms). Using this mode, the framebuffer resides in the external&#xD;&#xA;PSRAM memory of the development kit. This can be accessed directly to &#xD;&#xA;modify the screen contents.&#xD;&#xA;&#xD;&#xA;This demo demonstrates the use of frame buffer control, and implements&#xD;&#xA;Conway's Game of Life, with triple buffering support. Triple buffering&#xD;&#xA;works the following way&#xD;&#xA;  &#xD;&#xA; We have 3 frame buffers, A, B and C.&#xD;&#xA;&#xD;&#xA; Buffer A, is currently being displayed on the screen&#xD;&#xA; Buffer B, is being updated with graphics&#xD;&#xA;&#xD;&#xA; When B is finished - B is set to be displayed on the next frame update&#xD;&#xA;                      C is set to be updated with new graphics&#xD;&#xA;&#xD;&#xA; When C is finished - C is set to be displayed on the next frame update &#xD;&#xA;                      A is set to be updated with new graphics&#xD;&#xA;&#xD;&#xA;WARNING:&#xD;&#xA;SD2119 driver and GLIB graphics library are not intended for production &#xD;&#xA;purposes, and are included here to illustrate TFT display driving only.&#xD;&#xA;&#xD;&#xA;These components are subject to changes in API/usage and there will be &#xD;&#xA;no effort to keep compatibility, or to support this software in any way.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG-DK3850 Development Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3850 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32WG_DK3850/examples/life/SimplicityStudio/DK3850_life.slsproj,../hardware/kit/EFM32WG_DK3850/examples/life/arm/life.uvprojx,../hardware/kit/EFM32WG_DK3850/examples/life/iar/life.eww"/>
    <properties key="core.boardCompatibility" value="brd3800a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/life.c"/>
  </descriptors>
  <descriptors label="DK3850_lines" description="&lt;h1&gt;&lt;b&gt;Lines TFT Direct Drive example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example demonstrate driving the EFM32GG_DK37850 kit's TFT-display&#xD;&#xA;from the EFM32 Wonder Gecko in &quot;direct drive&quot; (or mode generic in&#xD;&#xA;SSD2119 terms). Using this mode, the framebuffer resides in the external&#xD;&#xA;PSRAM memory of the development kit. This can be accessed directly to&#xD;&#xA;modify the screen contents.&#xD;&#xA;&#xD;&#xA;In this mode, the display is configured for having 16-bits per pixel,&#xD;&#xA;RGB with 5-6-5 bits color components of each. The framebuffer is located&#xD;&#xA;at EBI bank 2, offset address 0x88000000. This demo simply draws some&#xD;&#xA;alternating, coloured lines over the entire display.&#xD;&#xA;&#xD;&#xA;WARNING:&#xD;&#xA;SD2119 driver and GLIB graphics library are not intended for production &#xD;&#xA;purposes, and are included here to illustrate TFT display driving only.&#xD;&#xA;&#xD;&#xA;These components are subject to changes in API/usage and there will be &#xD;&#xA;no effort to keep compatibility, or to support this software in any way.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG-DK3850 Development Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3850 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32WG_DK3850/examples/lines/SimplicityStudio/DK3850_lines.slsproj,../hardware/kit/EFM32WG_DK3850/examples/lines/arm/lines.uvprojx,../hardware/kit/EFM32WG_DK3850/examples/lines/iar/lines.eww"/>
    <properties key="core.boardCompatibility" value="brd3800a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/lines.c"/>
  </descriptors>
  <descriptors label="DK3850_mandel" description="&lt;h1&gt;&lt;b&gt;Mandelbrot image zoom example, using TFT direct drive.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example demonstrate driving the EFM32GG_DK37850 kit's TFT-display &#xD;&#xA;from the EFM32 Wonder Gecko.&#xD;&#xA;&#xD;&#xA;The example is driving the display in &quot;direct drive&quot; (or mode generic in &#xD;&#xA;SSD2119 terms). Using this mode, the framebuffer resides in the external&#xD;&#xA;PSRAM memory of the development kit. This can be accessed directly to &#xD;&#xA;modify the screen contents.&#xD;&#xA;&#xD;&#xA;This example makes a simple mandelbrot fractal zoomer, using up most &#xD;&#xA;of the external 4MB PSRAM to store the various images, where the screens&#xD;&#xA;are being flipped around in the interrupt routine.&#xD;&#xA;&#xD;&#xA;WARNING:&#xD;&#xA;SD2119 driver and GLIB graphics library are not intended for production &#xD;&#xA;purposes, and are included here to illustrate TFT display driving only.&#xD;&#xA;These components are subject to changes in API/usage and there will be &#xD;&#xA;no effort to keep compatibility, or to support this software in any way.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG-DK3850 Development Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3850 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32WG_DK3850/examples/mandel/SimplicityStudio/DK3850_mandel.slsproj,../hardware/kit/EFM32WG_DK3850/examples/mandel/arm/mandel.uvprojx,../hardware/kit/EFM32WG_DK3850/examples/mandel/iar/mandel.eww"/>
    <properties key="core.boardCompatibility" value="brd3800a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/mandel.c"/>
  </descriptors>
  <descriptors label="DK3850_norflash" description="&lt;h1&gt;&lt;b&gt;Norflash example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example demonstrates use of the NORFLASH driver.&#xD;&#xA;&#xD;&#xA;Connect a terminal to the serialport of the DK (115200-N-8-1).&#xD;&#xA;Operations on the flash are initiated by issuing commands on the terminal.&#xD;&#xA;Command &quot;h&quot; will print a help screen on the terminal :&#xD;&#xA;&#xD;&#xA;    Available commands:&#xD;&#xA;        fi        : Show flash information&#xD;&#xA;        h         : Show this help&#xD;&#xA;        dump &lt;n&gt;  : Show first 16 bytes of sector &lt;n&gt;&#xD;&#xA;        dumps &lt;n&gt; : Show entire sector &lt;n&gt; content&#xD;&#xA;        blc &lt;n&gt;   : Blankcheck sector &lt;n&gt;&#xD;&#xA;        bld       : Blankcheck entire device&#xD;&#xA;        erase &lt;n&gt; : Erase sector &lt;n&gt;&#xD;&#xA;        eraseall  : Erase entire device&#xD;&#xA;        prog &lt;n&gt;  : Program first 16 bytes of sector &lt;n&gt; with byte pattern&#xD;&#xA;        exec &lt;n&gt;  : Execute &quot;blink&quot; from sector &lt;n&gt;&#xD;&#xA;        misc      : Test misc. NORFLASH API functions&#xD;&#xA;        rspeed    : Measure flash read speed&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG-DK3850 Development Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3850 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32WG_DK3850/examples/norflash/SimplicityStudio/DK3850_norflash.slsproj,../hardware/kit/EFM32WG_DK3850/examples/norflash/arm/norflash.uvprojx,../hardware/kit/EFM32WG_DK3850/examples/norflash/iar/norflash.eww"/>
    <properties key="core.boardCompatibility" value="brd3800a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="DK3850_peripherals" description="&lt;h1&gt;&lt;b&gt;Peripheral control example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use EFM32 CMSIS and the emlib peripheral library to&#xD;&#xA;demonstrate how to enable the access to various on-board peripherals. To&#xD;&#xA;reduce leakage current, the EFM32WG-DK3850 board has several analog switches, and to&#xD;&#xA;enable extended functionality there are multiplexers which need to be&#xD;&#xA;configured correctly for most of the kit peripherals.&#xD;&#xA;&#xD;&#xA;The on-board LEDs will light up according to the configured state of the&#xD;&#xA;peripherals.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG-DK3850 Development Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3850 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32WG_DK3850/examples/peripherals/SimplicityStudio/DK3850_peripherals.slsproj,../hardware/kit/EFM32WG_DK3850/examples/peripherals/arm/peripherals.uvprojx,../hardware/kit/EFM32WG_DK3850/examples/peripherals/iar/peripherals.eww"/>
    <properties key="core.boardCompatibility" value="brd3800a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/periph.c"/>
  </descriptors>
  <descriptors label="DK3850_powertest" description="&lt;h1&gt;&lt;b&gt;Power test example, running demonstration of energy modes.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use EFM32 CMSIS and the emlib peripheral library&#xD;&#xA;to demonstrate the use of the various Energy Modes available on the&#xD;&#xA;EFM32WG990F256. When running this example, the EnergyAware Profiler tool&#xD;&#xA;in Simplicity Studio can be used to show the power consumption of each&#xD;&#xA;energy mode.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG-DK3850 Development Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3850 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32WG_DK3850/examples/powertest/SimplicityStudio/DK3850_powertest.slsproj,../hardware/kit/EFM32WG_DK3850/examples/powertest/arm/powertest.uvprojx,../hardware/kit/EFM32WG_DK3850/examples/powertest/iar/powertest.eww"/>
    <properties key="core.boardCompatibility" value="brd3800a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="DK3850_radialmenu" description="&lt;h1&gt;&lt;b&gt;emWin example - radial menu demonstartion.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the emWin library.&#xD;&#xA;&#xD;&#xA;Control using touch panel or joystick.&#xD;&#xA;If touch panel misaligned, there is possibility to&#xD;&#xA;perform touch panel calibration, just press PB4.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG-DK3850 Development Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3850 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32WG_DK3850/examples/radialmenu/SimplicityStudio/DK3850_radialmenu.slsproj,../hardware/kit/EFM32WG_DK3850/examples/radialmenu/arm/radialmenu.uvprojx,../hardware/kit/EFM32WG_DK3850/examples/radialmenu/iar/radialmenu.eww"/>
    <properties key="core.boardCompatibility" value="brd3800a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/WM_RadialMenu.c"/>
  </descriptors>
  <descriptors label="DK3850_realtime" description="&lt;h1&gt;&lt;b&gt;emWin example - dynamic graph update.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the emWin library.&#xD;&#xA;&#xD;&#xA;Control using touch panel.&#xD;&#xA;On application startup there is possibility to&#xD;&#xA;perform touch panel calibration.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG-DK3850 Development Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3850 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32WG_DK3850/examples/realtime/SimplicityStudio/DK3850_realtime.slsproj,../hardware/kit/EFM32WG_DK3850/examples/realtime/arm/realtime.uvprojx,../hardware/kit/EFM32WG_DK3850/examples/realtime/iar/realtime.eww"/>
    <properties key="core.boardCompatibility" value="brd3800a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/VSCREEN_RealTime.c"/>
  </descriptors>
  <descriptors label="DK3850_reversi" description="&lt;h1&gt;&lt;b&gt;emWin example - reversi game.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the emWin library.&#xD;&#xA;&#xD;&#xA;Control using touch pad or joystick. If there&#xD;&#xA;is misalignment when using touch pad please&#xD;&#xA;do calibration select from menu:&#xD;&#xA;Options-&gt;Touch Panel calibration.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG-DK3850 Development Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3850 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32WG_DK3850/examples/reversi/SimplicityStudio/DK3850_reversi.slsproj,../hardware/kit/EFM32WG_DK3850/examples/reversi/arm/reversi.uvprojx,../hardware/kit/EFM32WG_DK3850/examples/reversi/iar/reversi.eww"/>
    <properties key="core.boardCompatibility" value="brd3800a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/reversi.c"/>
  </descriptors>
  <descriptors label="DK3850_reversi_mm" description="&lt;h1&gt;&lt;b&gt;emWin example - reversi game - energy efficient.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the emWin library maintaining&#xD;&#xA;low power consumption.&#xD;&#xA;&#xD;&#xA;TFT driver is controlled in so called &quot;Memory Map&quot;&#xD;&#xA;configuration, where internal RAM of TFT controller &#xD;&#xA;is used. There is no additional framebuffer needed&#xD;&#xA;so this example could be run in small RAM footprint &#xD;&#xA;systems. The code fits 128kB flash and uses less &#xD;&#xA;than 32kB RAM.&#xD;&#xA;&#xD;&#xA;In idle mode (where no user interaction is required)&#xD;&#xA;EM2 mode is enabled, allowing reducing power consumption&#xD;&#xA;down to 4uA.&#xD;&#xA;&#xD;&#xA;The game is controlled using touch pad or joystick. &#xD;&#xA;If there is misalignment when using touch pad please&#xD;&#xA;do calibration - from menu select:&#xD;&#xA;Options-&gt;Touch Panel calibration.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG-DK3850 Development Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3850 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32WG_DK3850/examples/reversi_mm/SimplicityStudio/DK3850_reversi_mm.slsproj,../hardware/kit/EFM32WG_DK3850/examples/reversi_mm/arm/reversi_mm.uvprojx,../hardware/kit/EFM32WG_DK3850/examples/reversi_mm/iar/reversi_mm.eww"/>
    <properties key="core.boardCompatibility" value="brd3800a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/reversi.c"/>
  </descriptors>
  <descriptors label="DK3850_rs232" description="&lt;h1&gt;&lt;b&gt;RS232/UART output example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS and emlib, to demonstrates the&#xD;&#xA;use of UART and LEUART communication on the EFM32WG-DK3850 development kit.&#xD;&#xA;&#xD;&#xA;For the default UART communication, serial configuration 115200-8-N-1 is used.&#xD;&#xA;If LEUART mode is configured by defining &quot;RETARGET_LEUART1&quot; as a build option,&#xD;&#xA;terminal configuration is 9600-8-N-1.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG-DK3850 Development Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3850 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32WG_DK3850/examples/rs232/SimplicityStudio/DK3850_rs232.slsproj,../hardware/kit/EFM32WG_DK3850/examples/rs232/arm/rs232.uvprojx,../hardware/kit/EFM32WG_DK3850/examples/rs232/iar/rs232.eww"/>
    <properties key="core.boardCompatibility" value="brd3800a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="DK3850_scroller" description="&lt;h1&gt;&lt;b&gt;Horizontal single pixel text scroller example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example demonstrate driving the EFM32WG_DK3850 kit's TFT-display&#xD;&#xA;from the EFM32 Wonder Gecko.&#xD;&#xA;&#xD;&#xA;This example is driving the display in &quot;direct drive&quot; (or mode generic in&#xD;&#xA;SSD2119 terms). Using this mode, the framebuffer resides in the external&#xD;&#xA;PSRAM memory of the development kit. This can be accessed directly to&#xD;&#xA;modify the screen contents.&#xD;&#xA;&#xD;&#xA;This demo demonstrates the use of frame buffer control, and implements&#xD;&#xA;a horizontal scroller and shows the hardware assisted masking and&#xD;&#xA;blending capabilities.&#xD;&#xA;&#xD;&#xA;The horizontal scroller is implemented by using a large framebuffer,&#xD;&#xA;which is shifted right one pixel for each horizontal scan line, using&#xD;&#xA;the horizontal sync interrupt, and frame base sync trigger  capability&#xD;&#xA;of the Wonder Gecko devices.&#xD;&#xA;&#xD;&#xA;The masking and blending is hardware assisted. The geckos being drawn&#xD;&#xA;on screen are using the same software procedure, only adding mask and&#xD;&#xA;enable configurations.&#xD;&#xA;&#xD;&#xA;WARNING:&#xD;&#xA;SD2119 driver and GLIB graphics library are not intended for production&#xD;&#xA;purposes, and are included here to illustrate TFT display driving only.&#xD;&#xA;This component are subject to changes in API/usage and there will be&#xD;&#xA;no effort to keep compatibility, or to support this software in any way.&#xD;&#xA;&#xD;&#xA;NOTE:&#xD;&#xA;This example is too large to be built with IDEs with 32KB size limits.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG-DK3850 Development Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3850 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32WG_DK3850/examples/scroller/SimplicityStudio/DK3850_scroller.slsproj,../hardware/kit/EFM32WG_DK3850/examples/scroller/arm/scroller.uvprojx,../hardware/kit/EFM32WG_DK3850/examples/scroller/iar/scroller.eww"/>
    <properties key="core.boardCompatibility" value="brd3800a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/scroller.c"/>
  </descriptors>
  <descriptors label="DK3850_slideshow" description="&lt;h1&gt;&lt;b&gt;Slideshow example using microSD.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example uses the FatFS library for accssing a filesystem on a &#xD;&#xA;microSD card. It will loop through the files present on the card. &#xD;&#xA;BMP files with a resolution less than the resolution of the screen&#xD;&#xA;(320x240) will be displayed on the TFT.&#xD;&#xA;&#xD;&#xA;The demo has two modes of operation. If a file called &quot;files.txt&quot; is &#xD;&#xA;present on the root of the microSD card, this file will be read. The&#xD;&#xA;BMP files will then be displayed in the order they are listed in the&#xD;&#xA;file.&#xD;&#xA;&#xD;&#xA;If this file is not present, all files on the root of tile SD card is &#xD;&#xA;looped through and displayed. If the BMP decoder cannot display a &#xD;&#xA;certain file, an error message is displayed.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;WARNING:&#xD;&#xA;SD2119 driver and GLIB graphics library are not intended for production &#xD;&#xA;purposes, and are included here to illustrate TFT display driving only.&#xD;&#xA;This components are subject to changes in API/usage and there will be &#xD;&#xA;no effort to keep compatibility, or to support this software in any way.&#xD;&#xA;&#xD;&#xA;NOTE:&#xD;&#xA;This example is too large to be built with IDEs with 32KB size limits.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG-DK3850 Development Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3850 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32WG_DK3850/examples/slideshow/SimplicityStudio/DK3850_slideshow.slsproj,../hardware/kit/EFM32WG_DK3850/examples/slideshow/arm/slideshow.uvprojx,../hardware/kit/EFM32WG_DK3850/examples/slideshow/iar/slideshow.eww"/>
    <properties key="core.boardCompatibility" value="brd3800a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/slideshow.c"/>
  </descriptors>
  <descriptors label="DK3850_temperature" description="&lt;h1&gt;&lt;b&gt;I2C temperature sensor example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS and emlib including DK BSP&#xD;&#xA;(board support package) to demonstrate the use of the I2C bus and &#xD;&#xA;the temperature sensor on the DK.&#xD;&#xA;&#xD;&#xA;Note: On some DK boards the temperature sensor is placed too close &#xD;&#xA;to components that generate significant heat. The sensor may therefore&#xD;&#xA;read a temperature 2-4 degrees Celsius higher than the ambient temperature.&#xD;&#xA;&#xD;&#xA;The following configuration is possible:&#xD;&#xA;&#xD;&#xA;- Joystick push toggles between Fahrenheit and Celsius display mode.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG-DK3850 Development Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3850 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32WG_DK3850/examples/temperature/SimplicityStudio/DK3850_temperature.slsproj,../hardware/kit/EFM32WG_DK3850/examples/temperature/arm/temperature.uvprojx,../hardware/kit/EFM32WG_DK3850/examples/temperature/iar/temperature.eww"/>
    <properties key="core.boardCompatibility" value="brd3800a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/temperature.c"/>
  </descriptors>
  <descriptors label="DK3850_tft" description="&lt;h1&gt;&lt;b&gt;TFT Addressed map coloured blocks example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS including emlib and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the kit's TFT-display from the EFM32 Wonder Gecko.&#xD;&#xA;&#xD;&#xA;This example is driving the display in what is called &quot;address mapped&#xD;&#xA;mode&quot; (or mode 8080). Using this mode, the framebuffer resides in the&#xD;&#xA;memory of the SSD2119 controller chip.&#xD;&#xA;&#xD;&#xA;WARNING:&#xD;&#xA;SD2119 driver and GLIB graphics library are not intended for production&#xD;&#xA;purposes, and are included here to illustrate TFT display driving only.&#xD;&#xA;&#xD;&#xA;These components are subject to changes in API/usage and there will be&#xD;&#xA;no effort to keep compatibility, or to support this software in any way.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG-DK3850 Development Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3850 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32WG_DK3850/examples/tft/SimplicityStudio/DK3850_tft.slsproj,../hardware/kit/EFM32WG_DK3850/examples/tft/arm/tft.uvprojx,../hardware/kit/EFM32WG_DK3850/examples/tft/iar/tft.eww"/>
    <properties key="core.boardCompatibility" value="brd3800a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/tft.c"/>
  </descriptors>
  <descriptors label="DK3850_tftprintf" description="&lt;h1&gt;&lt;b&gt;Printf output on TFT-LCD.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS including emlib and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the kit's TFT-display from the EFM32 Wonder Gecko. In this case the&#xD;&#xA;display is used as output from a regular printf in the application, as&#xD;&#xA;an alternative to the RS232 port.&#xD;&#xA;&#xD;&#xA;This example is driving the display in what is called &quot;address mapped&#xD;&#xA;mode&quot; (or mode 8080). Using this mode, the framebuffer resides in the&#xD;&#xA;memory of the SSD2119 controller chip of the URT TFT-LCD display.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG-DK3850 Development Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3850 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32WG_DK3850/examples/tftprintf/SimplicityStudio/DK3850_tftprintf.slsproj,../hardware/kit/EFM32WG_DK3850/examples/tftprintf/arm/tftprintf.uvprojx,../hardware/kit/EFM32WG_DK3850/examples/tftprintf/iar/tftprintf.eww"/>
    <properties key="core.boardCompatibility" value="brd3800a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/tftprintf.c"/>
  </descriptors>
  <descriptors label="DK3850_touch" description="&lt;h1&gt;&lt;b&gt;Touchscreen example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example demonstrate use of the resistive touchscreen on the&#xD;&#xA;EFM32WG_DK3850 kit's TFT-display.&#xD;&#xA;&#xD;&#xA;Touchscreen X and Y positions are obtained using the ADC. Two ADC readouts&#xD;&#xA;are performed, one for X position and one for Y position.&#xD;&#xA;&#xD;&#xA;The example allows freehand drawing and calibration. After starting the example&#xD;&#xA;make sure that the EFM32 control the display (use AEM button to toggle).&#xD;&#xA;&#xD;&#xA;The calibrations algorithm used is from an article in EETimes 5/31/2002 by&#xD;&#xA;Carlos E. Vidales.&#xD;&#xA;&#xD;&#xA;Initial touchscreen calibration is &quot;off&quot; on purpose to demonstrate that&#xD;&#xA;calibration takes effect.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG-DK3850 Development Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3850 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32WG_DK3850/examples/touch/SimplicityStudio/DK3850_touch.slsproj,../hardware/kit/EFM32WG_DK3850/examples/touch/arm/touch.uvprojx,../hardware/kit/EFM32WG_DK3850/examples/touch/iar/touch.eww"/>
    <properties key="core.boardCompatibility" value="brd3800a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="DK3850_usbdcdc" description="&lt;h1&gt;&lt;b&gt;USB CDC virtual COM port example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use the EFM32 USB Device protocol stack&#xD;&#xA;and implements an USB CDC based virtual COM port.&#xD;&#xA;&#xD;&#xA;UART1 on the DK is used as the physical COM port.&#xD;&#xA;Any data sent to the virtual CDC COM port is transmitted on UART1.&#xD;&#xA;Any data received on UART1 is transmitted to the virtual port.&#xD;&#xA;&#xD;&#xA;When connecting the mcu plugin boards USB port to a Windows host PC,&#xD;&#xA;the new hardware &quot;Wizard&quot; may or may not prompt you to provide a driver&#xD;&#xA;installation file (.inf file) depending on your Windows version.&#xD;&#xA;&#xD;&#xA;Manually direct Windows to look for drivers in the directory where you have&#xD;&#xA;unpacked your copy of the Silabs-CDC_Install.zip driver file.&#xD;&#xA;This can be done with the new device &quot;Wizard&quot; which might pop up after device&#xD;&#xA;insertion, or you can open &quot;Device Manager&quot;, left click on the new device and&#xD;&#xA;select &quot;Update Driver Software...&quot;.&#xD;&#xA;&#xD;&#xA;Some versions of Windows wont allow you to install unsigned drivers. If you&#xD;&#xA;suspect this, reboot the PC into &quot;Disable Driver Signature Enforcement&quot; mode.&#xD;&#xA;Win7:&#xD;&#xA;Repeatedly push F8 during boot until the boot menu appears.&#xD;&#xA;Select the &quot;Disable Driver Signature Enforcement&quot; option.&#xD;&#xA;Win10:&#xD;&#xA;Start Menu-&gt;Power button-&gt;Hold Shift key down and select Restart.&#xD;&#xA;When computer has restarted into the options menu, select:&#xD;&#xA;Troubleshoot-&gt;Advanced Option-&gt;Startup Settings-&gt;Restart-&gt;Disable driver signature enforcement&#xD;&#xA;You should now be able to install an unsigned driver.&#xD;&#xA;&#xD;&#xA;When a driver is succesfully installed, the device will be listed as a &quot;Ports&quot;&#xD;&#xA;device in Device Manager, double-click it, select the &quot;Port Settings&quot; tab and&#xD;&#xA;maybe the &quot;Advanced...&quot; button to set serial port properties.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG-DK3850 Development Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3850 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32WG_DK3850/examples/usbdcdc/SimplicityStudio/DK3850_usbdcdc.slsproj,../hardware/kit/EFM32WG_DK3850/examples/usbdcdc/arm/usbdcdc.uvprojx,../hardware/kit/EFM32WG_DK3850/examples/usbdcdc/iar/usbdcdc.eww"/>
    <properties key="core.boardCompatibility" value="brd3800a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="DK3850_usbdcomposite" description="&lt;h1&gt;&lt;b&gt;USB Composite Device example, MSD + CDC + Vendor unique functions.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use the EFM32 USB Device protocol stack&#xD;&#xA;to implement a composite USB device with tree functions:&#xD;&#xA;&#xD;&#xA; - Mass storage class device (MSD) implementing a 4MB disk&#xD;&#xA; - Communication device class (CDC) implementing a USB&lt;-&gt;UART bridge&#xD;&#xA; - Vendor Unique Device similar to the usbdvud example (control DK leds).&#xD;&#xA;&#xD;&#xA;As the CDC function has two interface, the CDC function use an Interface&#xD;&#xA;Association Descriptor (IAD). A composite device which use IAD's must be&#xD;&#xA;implemented using bDeviceClass=0xEF, bDeviceSubClass=2 and bDeviceProtocol=1.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;The vendor unique function (VUD).&#xD;&#xA;=================================&#xD;&#xA;Toggles user LED's 0-4 when receiving vendor unique class setup commands.&#xD;&#xA;Intended to be used together with the &quot;libusb&quot; device driver, and host&#xD;&#xA;application EFM32-LedApp.exe (a Windows application).&#xD;&#xA;You will find libusb and EFM32-LedApp.exe in the &quot;host&quot; folder of the usbdvud&#xD;&#xA;example. Check EFM32_Vendor_Unique_Device.inf to see how both the usbdvud&#xD;&#xA;example VID_10C4&amp;PID_0001 and this composite example VID_10C4&amp;PID_0008&amp;MI_00&#xD;&#xA;are specified.&#xD;&#xA;&#xD;&#xA;The CDC COM port function.&#xD;&#xA;==========================&#xD;&#xA;Implements an USB CDC based virtual COM port. UART1 on the DK is used as the&#xD;&#xA;physical COM port. Any data sent to the virtual CDC COM port is transmitted on&#xD;&#xA;UART1. Any data received on UART1 is transmitted to the virtual port.&#xD;&#xA;&#xD;&#xA;USB Mass Storage Device function.&#xD;&#xA;=================================&#xD;&#xA;Implements a Mass Storage Class device (MSD) with 4MByte in external PSRAM.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Windows driver installation.&#xD;&#xA;============================&#xD;&#xA;The first time the composite USB device is connected to the host, Windows must&#xD;&#xA;install drivers for the VUD and CDC functions.&#xD;&#xA;&#xD;&#xA;To control the VUD function with EFM32-LedApp.exe you need to install &quot;libusb&quot;&#xD;&#xA;device driver. Manually direct Windows to look for this driver in the &quot;host&quot;&#xD;&#xA;folder of the usbdvud example.&#xD;&#xA;This can be done with the new device &quot;Wizard&quot; which might pop up after device&#xD;&#xA;insertion, or you can open &quot;Device Manager&quot;, left click on one of functions&#xD;&#xA;of the new composite device (marked with yellow exclamation mark) and&#xD;&#xA;select &quot;Update Driver Software...&quot;.&#xD;&#xA;After libusb is installed you can start EFM32-LedApp.exe to control leds on&#xD;&#xA;the DK.&#xD;&#xA;&#xD;&#xA;Similarly for the CDC function, direct Windows to look for a driver in the&#xD;&#xA;folder where you have unpacked your copy of the Silabs-CDC_Install.zip driver&#xD;&#xA;file.&#xD;&#xA;This can be done with the new device &quot;Wizard&quot; which might pop up after device&#xD;&#xA;insertion, or you can open &quot;Device Manager&quot;, left click on the new device and&#xD;&#xA;select &quot;Update Driver Software...&quot;. Note how the .inf file specifies interface&#xD;&#xA;number 2, VID_10C4&amp;PID_0008&amp;MI_02.&#xD;&#xA;When the serial port driver is succesfully installed, the device will be listed&#xD;&#xA;as a &quot;Ports&quot; device in Device Manager, double-click it, select the&#xD;&#xA;&quot;Port Settings&quot; tab and maybe the &quot;Advanced...&quot; button to set serial port&#xD;&#xA;properties.&#xD;&#xA;&#xD;&#xA;Some versions of Windows wont allow you to install unsigned drivers. If you&#xD;&#xA;suspect this, reboot the PC into &quot;Disable Driver Signature Enforcement&quot; mode.&#xD;&#xA;Win7:&#xD;&#xA;Repeatedly push F8 during boot until the boot menu appears.&#xD;&#xA;Select the &quot;Disable Driver Signature Enforcement&quot; option.&#xD;&#xA;Win10:&#xD;&#xA;Start Menu-&gt;Power button-&gt;Hold Shift key down and select Restart.&#xD;&#xA;When computer has restarted into the options menu, select:&#xD;&#xA;Troubleshoot-&gt;Advanced Option-&gt;Startup Settings-&gt;Restart-&gt;Disable driver signature enforcement&#xD;&#xA;You should now be able to install an unsigned driver.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG-DK3850 Development Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3850 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32WG_DK3850/examples/usbdcomposite/SimplicityStudio/DK3850_usbdcomposite.slsproj,../hardware/kit/EFM32WG_DK3850/examples/usbdcomposite/arm/usbdcomposite.uvprojx,../hardware/kit/EFM32WG_DK3850/examples/usbdcomposite/iar/usbdcomposite.eww"/>
    <properties key="core.boardCompatibility" value="brd3800a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="DK3850_usbdheadphone" description="&lt;h1&gt;&lt;b&gt;USB audio headphone device example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example implements a USB connected headphone device. The device enumerates&#xD;&#xA;as a device supporting stereo 16bit PCM encoded audio at a samplerate of&#xD;&#xA;44.1 kHz (the standard audio CD rate). The samples are sent directly to the I2S&#xD;&#xA;DAC on the mainboard and audio is available on the &quot;AUDIO OUT&quot; jack.&#xD;&#xA;&#xD;&#xA;The USB device is modelled as the HT1 (Headphone Topology 1) described in&#xD;&#xA;USB-IF document &quot;Universal Serial Bus Audio Device Class Specification for&#xD;&#xA;Basic Audio Devices&quot;, Release 1.0, November 24th, 2009.&#xD;&#xA;&#xD;&#xA;The I2S DAC is fed at a samplerate of 44.118 kHz, so additional audio samples&#xD;&#xA;are occasionally inserted to ensure that the data streams (USB and DAC) stay&#xD;&#xA;synchronized.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG-DK3850 Development Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3850 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32WG_DK3850/examples/usbdheadphone/SimplicityStudio/DK3850_usbdheadphone.slsproj,../hardware/kit/EFM32WG_DK3850/examples/usbdheadphone/arm/usbdheadphone.uvprojx,../hardware/kit/EFM32WG_DK3850/examples/usbdheadphone/iar/usbdheadphone.eww"/>
    <properties key="core.boardCompatibility" value="brd3800a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="DK3850_usbdhidkbd" description="&lt;h1&gt;&lt;b&gt;USB HID keyboard example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use the EFM32 USB Device protocol stack&#xD;&#xA;and implements an USB HID class keyboard device (one button !).&#xD;&#xA;&#xD;&#xA;SW1 is the keyboard button. Pressing this button will succesively write&#xD;&#xA;&quot;Silicon Labs - &quot;.&#xD;&#xA;&#xD;&#xA;User LED's 0-3 is used as a &quot;heart-beat&quot; counting pattern. The count rate&#xD;&#xA;reflects the scan rate of the onebutton keypad.&#xD;&#xA;&#xD;&#xA;User LED 8 reflects hosts NumLock status.&#xD;&#xA;User LED 9 reflects hosts CapsLock status.&#xD;&#xA;User LED 10 reflects hosts ScrollLock status.&#xD;&#xA;User LED 15 reflects the status of the keyboard pushbutton.&#xD;&#xA;&#xD;&#xA;It is also possible to make a buspowered device:&#xD;&#xA; - Enable #define BUSPOWERED in usbconfig.h&#xD;&#xA; - Program the MCU plugin module, remove it fron the DK.&#xD;&#xA; - Connect a pushbutton from PORTE bit 0 to GND (optional keyboard button).&#xD;&#xA; - Connect &quot;USB VREGO&quot; and &quot;VMCU&quot; together.&#xD;&#xA; - Optionally connect &quot;USB VREGO&quot; and &quot;3.3V&quot; together to enable an activity LED&#xD;&#xA;   (the blue LED labeled &quot;STATUS).&#xD;&#xA;   Note: This will cause the device suspend current to exceed 2.5 mA.&#xD;&#xA;&#xD;&#xA; - NOTE !!! Do NOT insert the plugin module back on the DK with &quot;USB VREGO&quot;,&#xD;&#xA;   &quot;3.3V&quot; and &quot;VMCU&quot; connected together !!!.&#xD;&#xA;&#xD;&#xA;This example will output useful info on the DK serial port (115.200 8N1).&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG-DK3850 Development Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3850 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32WG_DK3850/examples/usbdhidkbd/SimplicityStudio/DK3850_usbdhidkbd.slsproj,../hardware/kit/EFM32WG_DK3850/examples/usbdhidkbd/arm/usbdhidkbd.uvprojx,../hardware/kit/EFM32WG_DK3850/examples/usbdhidkbd/iar/usbdhidkbd.eww"/>
    <properties key="core.boardCompatibility" value="brd3800a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="DK3850_usbdmicrophone" description="&lt;h1&gt;&lt;b&gt;USB audio microphone device example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example implements a USB connected microphone device. The device enumerates&#xD;&#xA;as a device supporting stereo 16bit PCM encoded audio at a samplerate of&#xD;&#xA;44.1 kHz (the standard audio CD rate). The samples are aquired using the ADC&#xD;&#xA;which is routed to the &quot;AUDIO IN&quot; jack on the mainboard. The example can be&#xD;&#xA;compiled in &quot;tone generator&quot; mode, where the device produce a 1kHz sine.&#xD;&#xA;&#xD;&#xA;The USB device is modelled as the MT (Microphone Topology) described in&#xD;&#xA;USB-IF document &quot;Universal Serial Bus Audio Device Class Specification for&#xD;&#xA;Basic Audio Devices&quot;, Release 1.0, November 24th, 2009.&#xD;&#xA;&#xD;&#xA;The ADC is sampling at a rate of 44.118 kHz, so additional audio samples&#xD;&#xA;are occasionally inserted or removed from the data sent to host to ensure that&#xD;&#xA;the data streams (USB and ADC) stay synchronized. This gives reasonable audio&#xD;&#xA;quality when listening to music, but produce noticeable artifacts when&#xD;&#xA;listening to a pure sinewave or when the example is compiled in &quot;tone generator&quot;&#xD;&#xA;mode.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG-DK3850 Development Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3850 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32WG_DK3850/examples/usbdmicrophone/SimplicityStudio/DK3850_usbdmicrophone.slsproj,../hardware/kit/EFM32WG_DK3850/examples/usbdmicrophone/arm/usbdmicrophone.uvprojx,../hardware/kit/EFM32WG_DK3850/examples/usbdmicrophone/iar/usbdmicrophone.eww"/>
    <properties key="core.boardCompatibility" value="brd3800a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="DK3850_usbdmsd" description="&lt;h1&gt;&lt;b&gt;USB Mass Storage Device example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use the EFM32 USB Device protocol stack&#xD;&#xA;to implement a device Mass Storage Class device (MSD).&#xD;&#xA;&#xD;&#xA;The example provides five different MSD types.&#xD;&#xA;&#xD;&#xA; - A 96KByte &quot;disk&quot; in internal SRAM&#xD;&#xA; - A 4MByte &quot;disk&quot; in external PSRAM&#xD;&#xA; - A disk implemented with a micro SD-Card&#xD;&#xA; - An internal FLASH &quot;disk&quot; (disksize is internal FLASH size minus 64K)&#xD;&#xA; - A 16MB external NORFLASH &quot;disk&quot;&#xD;&#xA;&#xD;&#xA;Select mediatype in msddmedia.h (#define MSD_MEDIA)&#xD;&#xA;&#xD;&#xA;It is also possible to make a buspowered device:&#xD;&#xA; - Enable #define BUSPOWERED in usbconfig.h (only valid for SRAM and FLASH media)&#xD;&#xA; - Program the MCU plugin module, remove it from the DK.&#xD;&#xA; - Connect &quot;USB VREGO&quot; and &quot;VMCU&quot; together.&#xD;&#xA; - Optionally connect &quot;USB VREGO&quot; and &quot;3.3V&quot; together to enable an activity LED&#xD;&#xA;   (the blue LED labeled &quot;STATUS&quot;).&#xD;&#xA;   Note: This will cause the device suspend current to exceed 2.5 mA.&#xD;&#xA;&#xD;&#xA; - NOTE !!! Do NOT insert the plugin module back on the DK with &quot;USB VREGO&quot;,&#xD;&#xA;   &quot;3.3V&quot; and &quot;VMCU&quot; connected together !!!.&#xD;&#xA;&#xD;&#xA;The example will output some info on the DK serial port (115.200 8N1).&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG-DK3850 Development Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3850 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32WG_DK3850/examples/usbdmsd/SimplicityStudio/DK3850_usbdmsd.slsproj,../hardware/kit/EFM32WG_DK3850/examples/usbdmsd/arm/usbdmsd.uvprojx,../hardware/kit/EFM32WG_DK3850/examples/usbdmsd/iar/usbdmsd.eww"/>
    <properties key="core.boardCompatibility" value="brd3800a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="DK3850_usbdtouch" description="&lt;h1&gt;&lt;b&gt;USB Bitmap transfer using USB drive functionality.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example demonstrate use several functionalities:&#xD;&#xA;1. Creation of virtual drive in system with FAT FS,&#xD;&#xA;2. Mounting the drive on PC and file transfer,&#xD;&#xA;3. Bitmap file creation based on TFT frame buffer content,&#xD;&#xA;4. Resistive touch panel interaction.&#xD;&#xA;&#xD;&#xA;On system startup initial drive is created and &#xD;&#xA;formatted using FAT FS then simple readme.txt file &#xD;&#xA;is put on file system. Every time user press PB4 key&#xD;&#xA;new file, containing TFT frame buffer in bitmap format&#xD;&#xA;is added. All files could be retrieved after connecting&#xD;&#xA;board to PC by means of USB. For this connection use&#xD;&#xA;small USB socket located on Wonder Gecko CPU board, not&#xD;&#xA;the big one on development kit.&#xD;&#xA;&#xD;&#xA;If new files doesn't appear on drive after pressing PB4,&#xD;&#xA;try to reconnect the board to PC.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG-DK3850 Development Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3850 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32WG_DK3850/examples/usbdtouch/SimplicityStudio/DK3850_usbdtouch.slsproj,../hardware/kit/EFM32WG_DK3850/examples/usbdtouch/arm/usbdtouch.uvprojx,../hardware/kit/EFM32WG_DK3850/examples/usbdtouch/iar/usbdtouch.eww"/>
    <properties key="core.boardCompatibility" value="brd3800a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="DK3850_usbdvud" description="&lt;h1&gt;&lt;b&gt;USB Vendor Unique Device example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use the EFM32 USB Device protocol stack&#xD;&#xA;and implements an USB Vendor Unique Device.&#xD;&#xA;&#xD;&#xA;The example will toggle User LED's 0-4 when receiving vendor unique class&#xD;&#xA;setup commands.&#xD;&#xA;&#xD;&#xA;This example is intended to be used together with the &quot;libusb&quot; device driver,&#xD;&#xA;and host application EFM32-LedApp.exe (a Windows application).&#xD;&#xA;&#xD;&#xA;The first time the USB device is connected to the host, you must tell the host&#xD;&#xA;OS to install the &quot;libusb&quot; device driver.&#xD;&#xA;&#xD;&#xA;On Windows, you can follow this procedure:&#xD;&#xA;Insert the device, and manually direct Windows to look for drivers in the&#xD;&#xA;directory where you have your copy of the &quot;EFM32_Vendor_Unique_Device.inf&quot; file.&#xD;&#xA;This can be done with the new device &quot;Wizard&quot; which might pop up after device&#xD;&#xA;insertion, or you can open &quot;Device Manager&quot;, left click on the new device and&#xD;&#xA;select &quot;Update Driver Software...&quot;.&#xD;&#xA;&#xD;&#xA;Some versions of Windows wont allow you to install unsigned drivers. If you&#xD;&#xA;suspect this, reboot the PC into &quot;Disable Driver Signature Enforcement&quot; mode.&#xD;&#xA;Win7:&#xD;&#xA;Repeatedly push F8 during boot until the boot menu appears.&#xD;&#xA;Select the &quot;Disable Driver Signature Enforcement&quot; option.&#xD;&#xA;Win10:&#xD;&#xA;Start Menu-&gt;Power button-&gt;Hold Shift key down and select Restart.&#xD;&#xA;When computer has restarted into the options menu, select:&#xD;&#xA;Troubleshoot-&gt;Advanced Option-&gt;Startup Settings-&gt;Restart-&gt;Disable driver signature enforcement&#xD;&#xA;You should now be able to install an unsigned driver.&#xD;&#xA;&#xD;&#xA;After libusb is installed, start EFM32-LedApp.exe.&#xD;&#xA;&#xD;&#xA;This example will output some info on the DK serial port (115.200 8N1).&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG-DK3850 Development Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3850 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32WG_DK3850/examples/usbdvud/SimplicityStudio/DK3850_usbdvud.slsproj,../hardware/kit/EFM32WG_DK3850/examples/usbdvud/arm/usbdvud.uvprojx,../hardware/kit/EFM32WG_DK3850/examples/usbdvud/iar/usbdvud.eww"/>
    <properties key="core.boardCompatibility" value="brd3800a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="DK3850_usbhenum" description="&lt;h1&gt;&lt;b&gt;USB device enumerator example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the USB host stack to implement&#xD;&#xA;a simple device enumerator.&#xD;&#xA;&#xD;&#xA;Connect a terminal to the DK UART port (115.200, N, 8, 1) and&#xD;&#xA;then connect any USB device to the USB port of the MCU plug-in module.&#xD;&#xA;&#xD;&#xA;Info about the VID/PID and some string descriptors will be output on&#xD;&#xA;the serial port. The connected USB device will not be configured.&#xD;&#xA;&#xD;&#xA;Note that USB disk drives may fail, as some of them draw too much current&#xD;&#xA;when attached.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG-DK3850 Development Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3850 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32WG_DK3850/examples/usbhenum/SimplicityStudio/DK3850_usbhenum.slsproj,../hardware/kit/EFM32WG_DK3850/examples/usbhenum/arm/usbhenum.uvprojx,../hardware/kit/EFM32WG_DK3850/examples/usbhenum/iar/usbhenum.eww"/>
    <properties key="core.boardCompatibility" value="brd3800a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="DK3850_usbhhidkbd" description="&lt;h1&gt;&lt;b&gt;USB Host HID keyboard example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the USB host stack to implement&#xD;&#xA;support for USB HID Keyboards.&#xD;&#xA;&#xD;&#xA;Connect a terminal to the DK UART port (115.200, N, 8, 1) and&#xD;&#xA;then connect a USB keyboard to the USB port of the MCU plug-in module.&#xD;&#xA;&#xD;&#xA;The example will flash keyboard leds (numlock, scrollock and capslock)&#xD;&#xA;with a binary counting pattern.&#xD;&#xA;&#xD;&#xA;Keyboard entry will be echoed on the UART serial port.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG-DK3850 Development Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3850 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32WG_DK3850/examples/usbhhidkbd/SimplicityStudio/DK3850_usbhhidkbd.slsproj,../hardware/kit/EFM32WG_DK3850/examples/usbhhidkbd/arm/usbhhidkbd.uvprojx,../hardware/kit/EFM32WG_DK3850/examples/usbhhidkbd/iar/usbhhidkbd.eww"/>
    <properties key="core.boardCompatibility" value="brd3800a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="DK3850_usbhmsdfatcon" description="&lt;h1&gt;&lt;b&gt;USB Host mass storage device example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the USB host and the MSD modules in the&#xD;&#xA;drivers directory to implement support for Mass Storage Device's (MSD).&#xD;&#xA;&#xD;&#xA;Connect a terminal to the DK UART port (115.200, N, 8, 1) and&#xD;&#xA;then connect a memory stick the USB port of the MCU plug-in module.&#xD;&#xA;&#xD;&#xA;Info about the MSD device will be output on the serial port. When a MSD&#xD;&#xA;device is connected and detected as a valid, you can issue commands at the&#xD;&#xA;serial port console to list all files on the device (ls), type the content&#xD;&#xA;of a file (cat) and append test to a file (echo).&#xD;&#xA;&#xD;&#xA;Note that USB disk drives may fail, as some of them draw too much current&#xD;&#xA;when attached.&#xD;&#xA;&#xD;&#xA;NOTE:&#xD;&#xA;This example is too large to be built with IDEs with 32KB size limits.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG-DK3850 Development Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3850 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32WG_DK3850/examples/usbhmsdfatcon/SimplicityStudio/DK3850_usbhmsdfatcon.slsproj,../hardware/kit/EFM32WG_DK3850/examples/usbhmsdfatcon/arm/usbhmsdfatcon.uvprojx,../hardware/kit/EFM32WG_DK3850/examples/usbhmsdfatcon/iar/usbhmsdfatcon.eww"/>
    <properties key="core.boardCompatibility" value="brd3800a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="DK3850_wavplayer" description="&lt;h1&gt;&lt;b&gt;Audio .WAV format player.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS including DK BSP (board support&#xD;&#xA;package) and demonstrates how to play a wav file from the SD-card.&#xD;&#xA;&#xD;&#xA;The wav file must be named &quot;sweet1.wav&quot; and must be encoded with 16-bit&#xD;&#xA;PCM audio sampling.&#xD;&#xA;&#xD;&#xA;The output volume level is adjusted with kit pushbuttons PB1 and PB2.&#xD;&#xA;Output level is indicated by the 14 leftmost user LEDs.&#xD;&#xA;Push the AEM button on the kit until &quot;EFM&quot; shows in the upper right&#xD;&#xA;corner of the TFT display to activate PB1 and PB2 pushbuttons.&#xD;&#xA;&#xD;&#xA;The example can be build for using the I2S dac or onchip DAC0.&#xD;&#xA;Look for #define USE_I2S near top of file wavplayer.c&#xD;&#xA;&#xD;&#xA;It sets up access to DVK registers, and supports fat-filesystem on the&#xD;&#xA;sd-card.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG-DK3850 Development Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3850 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32WG_DK3850/examples/wavplayer/SimplicityStudio/DK3850_wavplayer.slsproj,../hardware/kit/EFM32WG_DK3850/examples/wavplayer/arm/wavplayer.uvprojx,../hardware/kit/EFM32WG_DK3850/examples/wavplayer/iar/wavplayer.eww"/>
    <properties key="core.boardCompatibility" value="brd3800a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/wavplayer.c"/>
  </descriptors>
  <descriptors label="DK3850_webserver" description="&lt;h1&gt;&lt;b&gt;Webserver example&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;==================&#xD;&#xA;&#xD;&#xA;This example shows how to use the EFM32WG-DK3850 to run a http server with a&#xD;&#xA;static web page. This example is using the lwip network stack to provide the&#xD;&#xA;necessary protocol implementations and it's using the ksz8851snl ethernet&#xD;&#xA;controller on the development kit to send and receive packets.&#xD;&#xA;&#xD;&#xA;Web page&#xD;&#xA;=========&#xD;&#xA;&#xD;&#xA;To view the static web page open your browser to http://&lt;dk-ip&gt;/ .&#xD;&#xA;&#xD;&#xA;You can find the source code for the static web page under the html directory.&#xD;&#xA;These source files are converted into the fsdata_custom.c file that the lwip&#xD;&#xA;http module knows how to read. This conversion is done by the makefsdata tool.&#xD;&#xA;&#xD;&#xA;To customize your own web pages, you can use the makefsdata tool to generate&#xD;&#xA;your own fsdata_custom.c file. The makefsdata tool is provided as part of lwip,&#xD;&#xA;and you can find the C source file for it in the lwip-&#xD;&#xA;contrib/apps/httpserver_raw/makefsdata folder (Don't use the makefsdata perl&#xD;&#xA;script, it is outdated). This is an example of how you can generate the&#xD;&#xA;fsdata_custom.c file using makefsdata.exe.&#xD;&#xA;&#xD;&#xA;makefsdata.exe html -l1 -f:fsdata_custom.c&#xD;&#xA;&#xD;&#xA;Output&#xD;&#xA;=======&#xD;&#xA;&#xD;&#xA;When a network interface is up and running the IP address of the server is&#xD;&#xA;displayed on the LCD display together with rx/tx packet statistics. If you want&#xD;&#xA;to view the lwip trace output you can open a serial connection to the&#xD;&#xA;development kit using baud rate 115200.&#xD;&#xA;&#xD;&#xA;IP Configuration&#xD;&#xA;=================&#xD;&#xA;&#xD;&#xA;By default this example is configured to use DHCP to fetch an ip address. If you&#xD;&#xA;want to use static ip address instead then follow these steps.&#xD;&#xA;&#xD;&#xA;1. open lwipopts.h&#xD;&#xA;2. edit the LWIP_DHCP option to be&#xD;&#xA;&#xD;&#xA;#define LWIP_DHCP                       0&#xD;&#xA;&#xD;&#xA;3. edit the STATIC_* options to match your desired ip address, subnet mask,&#xD;&#xA;default gateway. This is an example of how to configure these static ip&#xD;&#xA;addresses.&#xD;&#xA;&#xD;&#xA;ip: 192.168.0.12&#xD;&#xA;sn: 255.255.255.0&#xD;&#xA;gw: 192.168.0.1&#xD;&#xA;&#xD;&#xA;#define STATIC_IPADDR0                  192&#xD;&#xA;#define STATIC_IPADDR1                  168&#xD;&#xA;#define STATIC_IPADDR2                  0&#xD;&#xA;#define STATIC_IPADDR3                  12&#xD;&#xA;&#xD;&#xA;#define STATIC_NET_MASK0                255&#xD;&#xA;#define STATIC_NET_MASK1                255&#xD;&#xA;#define STATIC_NET_MASK2                255&#xD;&#xA;#define STATIC_NET_MASK3                0&#xD;&#xA;&#xD;&#xA;#define STATIC_GW_IPADDR0               192&#xD;&#xA;#define STATIC_GW_IPADDR1               168&#xD;&#xA;#define STATIC_GW_IPADDR2               0&#xD;&#xA;#define STATIC_GW_IPADDR3               1&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;ksz8851snl interface&#xD;&#xA;=====================&#xD;&#xA;&#xD;&#xA;The ksz8851snl ethernet controller is using an spi interface, and this is&#xD;&#xA;connected to one of the EFM32 USARTs. See the kit user-manual for the actual&#xD;&#xA;pins. This example also shows how to use the provided ksz8851snl drivers to&#xD;&#xA;operate the ethernet controller. These are the main files that are used when&#xD;&#xA;interfacing with the ksz8851snl.&#xD;&#xA;&#xD;&#xA;drivers/ksz8851snl.c&#xD;&#xA;&#xD;&#xA;This is the hardware abstraction layer for the ksz8851snl. This file contains&#xD;&#xA;functionality like enable and initialize the chip.&#xD;&#xA;&#xD;&#xA;drivers/ksz8851snl_spi.c&#xD;&#xA;&#xD;&#xA;This contains the spi communication functions for the ksz8851snl. We provide the&#xD;&#xA;low level operations like read/write register as well as read/write fifo in this&#xD;&#xA;file.&#xD;&#xA;&#xD;&#xA;&lt;lwip-contrib&gt;/ports/efm32/ksz8851snl_driver.c&#xD;&#xA;&#xD;&#xA;This is the lwip driver that interfaces between the lwip stack and our&#xD;&#xA;ksz8851snl.c hardware abstraction layer.&#xD;&#xA;&#xD;&#xA;Interrupt Handling&#xD;&#xA;===================&#xD;&#xA;&#xD;&#xA;The ksz8851snl has an interrupt pin that is routed through the board controller&#xD;&#xA;and into a GPIO pin on the EFM32. When the ethernet interrupt is enabled. This&#xD;&#xA;interrupt pin is active low. The ksz8851snl will trigger an interrupt if the&#xD;&#xA;link status has changed or if an ethernet frame has been received or&#xD;&#xA;transmitted. In this example the GPIO is configured to trigger an interrupt on a&#xD;&#xA;falling edge of the ethernet interrupt pin.&#xD;&#xA;&#xD;&#xA;The interrupts of the ksz8851snl are not serviced directly from the GPIO&#xD;&#xA;interrupt handler. What we do instead is to signal to the application that an&#xD;&#xA;interrupt is pending and let the main application eventually call the interrupt&#xD;&#xA;service routine within the ksz8851snl driver. The reason for doing this is&#xD;&#xA;because we want to minimize the amount of time inside the interrupt handler.&#xD;&#xA;When a received frame interrupt is triggered the ksz8851snl driver will have to&#xD;&#xA;allocate buffer and transfer a large amount of data from the controller to ram,&#xD;&#xA;and then pass this buffer into the lwip stack.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG-DK3850 Development Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3850 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32WG_DK3850/examples/webserver/SimplicityStudio/DK3850_webserver.slsproj,../hardware/kit/EFM32WG_DK3850/examples/webserver/arm/webserver.uvprojx,../hardware/kit/EFM32WG_DK3850/examples/webserver/iar/webserver.eww"/>
    <properties key="core.boardCompatibility" value="brd3800a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/webserver.c"/>
  </descriptors>
  <descriptors label="DK3850_audiofft_softfloat" description="&lt;h1&gt;&lt;b&gt;Audio FFT example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS and ARM's DSP lib to demonstrate&#xD;&#xA;floating point FFT of audio data.&#xD;&#xA;&#xD;&#xA;Connect an audio source to AUDIO IN on the DK and set the AEM switch to the EFM&#xD;&#xA;position.&#xD;&#xA;A FFT plot of the audio input will be shown on the screen together with a count&#xD;&#xA;of the cpu-cycles used to calculate the FFT.&#xD;&#xA;The audio bandwidth is 4 kHz.&#xD;&#xA;&#xD;&#xA;Experiment using hard and soft floating point and various compiler optimization&#xD;&#xA;flags to view the effect on the cpu cycle count.&#xD;&#xA;&#xD;&#xA;Board: Silicon Labs EFM32WG_DK3850 Development Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3850 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32WG_DK3850/examples/audiofft/SimplicityStudio/DK3850_audiofft_hardfloat.slsproj,../hardware/kit/EFM32WG_DK3850/examples/audiofft/arm/audiofft_hardfloat.uvprojx,../hardware/kit/EFM32WG_DK3850/examples/audiofft/arm/audiofft_softfloat.uvprojx,../hardware/kit/EFM32WG_DK3850/examples/audiofft/iar/audiofft.eww"/>
    <properties key="core.boardCompatibility" value="brd3800a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/audiofft.c"/>
  </descriptors>
  <descriptors label="DK3850_audiofft_hardfloat" description="&lt;h1&gt;&lt;b&gt;Audio FFT example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS and ARM's DSP lib to demonstrate&#xD;&#xA;floating point FFT of audio data.&#xD;&#xA;&#xD;&#xA;Connect an audio source to AUDIO IN on the DK and set the AEM switch to the EFM&#xD;&#xA;position.&#xD;&#xA;A FFT plot of the audio input will be shown on the screen together with a count&#xD;&#xA;of the cpu-cycles used to calculate the FFT.&#xD;&#xA;The audio bandwidth is 4 kHz.&#xD;&#xA;&#xD;&#xA;Experiment using hard and soft floating point and various compiler optimization&#xD;&#xA;flags to view the effect on the cpu cycle count.&#xD;&#xA;&#xD;&#xA;Board: Silicon Labs EFM32WG_DK3850 Development Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3850 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32WG_DK3850/examples/audiofft/SimplicityStudio/DK3850_audiofft_hardfloat.slsproj,../hardware/kit/EFM32WG_DK3850/examples/audiofft/arm/audiofft_hardfloat.uvprojx,../hardware/kit/EFM32WG_DK3850/examples/audiofft/arm/audiofft_softfloat.uvprojx,../hardware/kit/EFM32WG_DK3850/examples/audiofft/iar/audiofft.eww"/>
    <properties key="core.boardCompatibility" value="brd3800a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/audiofft.c"/>
  </descriptors>
  <descriptors label="DK3850_preamp" description="&lt;h1&gt;&lt;b&gt;Audio preamplifier with tone controls example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS including the BSP (board&#xD;&#xA;support package) CMSIS-DSP to demonstrate the signal processing capabilities&#xD;&#xA;of the Wonder Gecko MCU.&#xD;&#xA;&#xD;&#xA;- Connect an audio source to the audio in connector&#xD;&#xA;  on the DK, for instance a mobile phone or an MP3 player.&#xD;&#xA;- Connect an active loudspeaker with built-in amplifier,&#xD;&#xA;  to the audio out connector of the DK.&#xD;&#xA;&#xD;&#xA;WARNING:&#xD;&#xA;--------&#xD;&#xA;Do not attach or use headphones with this example. Use small&#xD;&#xA;loadspeakers with built in amplification, ensuring volume is at an&#xD;&#xA;acceptable level. Exposure to loud noises from any source for extended&#xD;&#xA;periods of time may temporarily or permanently affect your hearing. The&#xD;&#xA;louder the volume sound level, the less time is required before your&#xD;&#xA;hearing could be affected. Hearing damage from loud noise is sometimes&#xD;&#xA;undetectable at first and can have a cumulative effect.&#xD;&#xA;&#xD;&#xA;The input signal is converted to digital and processed by the EFM32 core&#xD;&#xA;before being converted back to analog.&#xD;&#xA;&#xD;&#xA;Make sure to set kit display mode to &quot;EFM&quot; (signalled by flashing LED's),&#xD;&#xA;by pushing kit &quot;AEM&quot; button.&#xD;&#xA;&#xD;&#xA;The output volume level is adjusted with joystick up/down.&#xD;&#xA;The output balance is adjusted with joystick left/right.&#xD;&#xA;Bass tone control is adjusted with pushbuttons PB1 and PB2.&#xD;&#xA;Treble tone control is adjusted with pushbuttons PB3 and PB4.&#xD;&#xA;A 390 Hz test tone is emitted when pushing joystick center.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG-DK3850 Development Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3850 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32WG_DK3850/examples/preamp/SimplicityStudio/DK3850_preamp.slsproj,../hardware/kit/EFM32WG_DK3850/examples/preamp/arm/preamp.uvprojx,../hardware/kit/EFM32WG_DK3850/examples/preamp/iar/preamp.eww"/>
    <properties key="core.boardCompatibility" value="brd3800a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/preamp.c"/>
  </descriptors>
  <descriptors label="DK3850_ucos2" description="&lt;h1&gt;&lt;b&gt;uC/OS-II RTOS on EFM32 using example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This is a port of the uC/OS-II RTOS from Micrium Inc, http://www.micrium.com&#xD;&#xA;&#xD;&#xA;The port has been adapted by Silicon Labs for use with our Development&#xD;&#xA;Kit. It requires the standard EFM32 CMSIS package (including emlib).&#xD;&#xA;&#xD;&#xA;The example has three tasks:&#xD;&#xA; - Task1: LED blink task&#xD;&#xA; - Task2: Receives characters from serial port and posts message to Task3&#xD;&#xA; - Task3: Receives message from Task2 and writes it on TFT display&#xD;&#xA;&#xD;&#xA;Standard output is redirected to TFT display and standard input is UART1.&#xD;&#xA;&#xD;&#xA;Note: The Keil toolchain port does not support FPU context preservation&#xD;&#xA;      across tasks.&#xD;&#xA;&#xD;&#xA;uC/OS-II is provided in source form for FREE evaluation, for educational use&#xD;&#xA;or for peaceful research.&#xD;&#xA;&#xD;&#xA;If you plan on using uC/OS-II in a commercial product you need to contact&#xD;&#xA;Micrium to properly license its use in your product. We provide ALL the&#xD;&#xA;source code for your convenience and to help you experience uC/OS-II.&#xD;&#xA;The fact that the source is provided does NOT mean that you can use it without&#xD;&#xA;paying a licensing fee.&#xD;&#xA;&#xD;&#xA;For commercial use, contact Micrium, http://www.micrium.com for details.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG_DK3850 Starter Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3850 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32WG_DK3850/examples/ucos2_port/arm/ucos2.uvprojx,../hardware/kit/EFM32WG_DK3850/examples/ucos2_port/iar/ucos2.eww"/>
    <properties key="core.boardCompatibility" value="brd3800a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/app/app.c"/>
  </descriptors>
  <descriptors label="DK3850_ucos3" description="&lt;h1&gt;&lt;b&gt;uC/OS-III RTOS on EFM32 using example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This is a port of the uC/OS-III RTOS from Micrium Inc, http://www.micrium.com&#xD;&#xA;&#xD;&#xA;The port has been adapted by Silicon Labs for use with our Development Kit..&#xD;&#xA;It requires the standard EFM32 CMSIS package (including emlib).&#xD;&#xA;&#xD;&#xA;The example has three tasks:&#xD;&#xA; - Task1: LED blink task&#xD;&#xA; - Task2: Receives characters from serial port and posts message to Task3&#xD;&#xA; - Task3: Receives message from Task2 and writes it on TFT display&#xD;&#xA;&#xD;&#xA;Standard output is redirected to TFT display and standard input is UART1.&#xD;&#xA;&#xD;&#xA;Note: The Keil toolchain port does not support FPU context preservation&#xD;&#xA;      across tasks.&#xD;&#xA;&#xD;&#xA;uC/OS-III is provided in source form for FREE evaluation, for educational use&#xD;&#xA;or for peaceful research.&#xD;&#xA;&#xD;&#xA;If you plan on using uC/OS-III in a commercial product you need to contact&#xD;&#xA;Micrium to properly license its use in your product. We provide ALL the&#xD;&#xA;source code for your convenience and to help you experience uC/OS-III.&#xD;&#xA;The fact that the source is provided does NOT mean that you can use it without&#xD;&#xA;paying a licensing fee.&#xD;&#xA;&#xD;&#xA;For commercial use, contact Micrium, http://www.micrium.com for details.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG_DK3850 Development Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3850 Development Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32WG_DK3850/examples/ucos3_port/arm/ucos3.uvprojx,../hardware/kit/EFM32WG_DK3850/examples/ucos3_port/iar/ucos3.eww"/>
    <properties key="core.boardCompatibility" value="brd3800a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/app/app.c"/>
  </descriptors>
  <descriptors label="STK3800_blink" description="&lt;h1&gt;&lt;b&gt;Blink example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use EFM32 CMSIS and the emlib peripheral library to&#xD;&#xA;demonstrate the use of the LED's on the starter kit. This example is intended as&#xD;&#xA;a skeleton for new projects.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG_STK3800 Starter Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3800 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32WG_STK3800/examples/blink/SimplicityStudio/STK3800_blink.slsproj,../hardware/kit/EFM32WG_STK3800/examples/blink/arm/blink.uvprojx,../hardware/kit/EFM32WG_STK3800/examples/blink/iar/blink.eww"/>
    <properties key="core.boardCompatibility" value="brd2400a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/blink.c"/>
  </descriptors>
  <descriptors label="STK3800_burtc" description="&lt;h1&gt;&lt;b&gt;Backup power domain RTC example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example demonstrate use of the backup power domain and the&#xD;&#xA;backup real time clock (BURTC).&#xD;&#xA;&#xD;&#xA;Start the example with the Power Source Selector switch in the &quot;DBG&quot; position.&#xD;&#xA;When the clock is running you can adjust time by pressing pushbuttons&#xD;&#xA;PB0 and PB1.&#xD;&#xA;When you move the Power Source Selector switch to the &quot;USB&quot; position, the&#xD;&#xA;EFM is turned off and the BURTC peripheral runs on power from the BU capacitor.&#xD;&#xA;(See User manual for EFM32WG-STK3800 starter kit for details on the hardware).&#xD;&#xA;When you move the Power Source Selector switch back to the &quot;DBG&quot; position, you&#xD;&#xA;can verify that time has been recorded correctly.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG-STK3800 Starter Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3800 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32WG_STK3800/examples/burtc/SimplicityStudio/STK3800_burtc.slsproj,../hardware/kit/EFM32WG_STK3800/examples/burtc/arm/burtc.uvprojx,../hardware/kit/EFM32WG_STK3800/examples/burtc/iar/burtc.eww"/>
    <properties key="core.boardCompatibility" value="brd2400a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3800_clock" description="&lt;h1&gt;&lt;b&gt;Wall Clock example using the segment LCD.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS  and demonstrates  the use of&#xD;&#xA;the LCD controller, RTC (real time counter), VCMP, GPIO and various&#xD;&#xA;Energy Modes (EM).&#xD;&#xA;&#xD;&#xA;The RTC is set up to wake the EFM32 from EM2 every minute. During this&#xD;&#xA;interval, the LCD is updated to reflect the current time. The animation&#xD;&#xA;feature is used to show the seconds. This is done by using the frame&#xD;&#xA;event counter to drive the animation feature every second.&#xD;&#xA;&#xD;&#xA;Time is set with pushbuttons PB0 and PB1.&#xD;&#xA; - Pushing PB0 increments minute count.&#xD;&#xA; - Pushing PB1 increments hour count.&#xD;&#xA;&#xD;&#xA;The VCMP is used to measure the input voltage on every wakeup. If the&#xD;&#xA;voltage drops too low, voltage boost is enabled on the LCD. This makes&#xD;&#xA;the LCD clear and readable even when running on low batteries.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG_STK3800 Development Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3800 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32WG_STK3800/examples/clock/SimplicityStudio/STK3800_clock.slsproj,../hardware/kit/EFM32WG_STK3800/examples/clock/arm/clock.uvprojx,../hardware/kit/EFM32WG_STK3800/examples/clock/iar/clock.eww"/>
    <properties key="core.boardCompatibility" value="brd2400a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/clock.c"/>
  </descriptors>
  <descriptors label="STK3800_cpt007b_demo" description="&lt;h1&gt;&lt;b&gt;CPT007B Demo&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This demo demonstrates the capacitive button function of CPT007B fixed function&#xD;&#xA;board. This demo runs on the EFM32 STK, and communicates with CPT007B through&#xD;&#xA;the GPIO pins on the EXP header. Virtual buttons on STK's LCD screen indicate&#xD;&#xA;whether the capacitive sensing buttons on CPT007B are pressed or released.&#xD;&#xA;This demo supports up to 7 capacitive buttons on CPT007B&#xD;&#xA; &#xD;&#xA;Board:  Silicon Labs EFM32WG_STK3800 Starter Kit and CPT007B Evaluation Board&#xD;&#xA;Device: EFM32WG990F256&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3800 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32WG_STK3800/examples/cpt007b/SimplicityStudio/STK3800_cpt007b_demo.slsproj,../hardware/kit/EFM32WG_STK3800/examples/cpt007b/arm/cpt007b_demo.uvprojx,../hardware/kit/EFM32WG_STK3800/examples/cpt007b/iar/cpt007b_demo.eww"/>
    <properties key="core.boardCompatibility" value="brd2400a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/cpt007b_demo.c"/>
  </descriptors>
  <descriptors label="STK3800_cslib" description="&lt;h1&gt;&lt;b&gt;CSLIB example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the capacitive sensing firmware library to sample&#xD;&#xA;capacitive sensing buttons on the STK.  Real-time sample information, touch&#xD;&#xA;qualification status, and other state variables can be displayed and examined&#xD;&#xA;in the Capacitive Sensing Profiler tool.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG_STK3800 Starter Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3800 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32WG_STK3800/examples/cslib/SimplicityStudio/STK3800_cslib.slsproj,../hardware/kit/EFM32WG_STK3800/examples/cslib/arm/cslib.uvprojx,../hardware/kit/EFM32WG_STK3800/examples/cslib/iar/cslib.eww"/>
    <properties key="core.boardCompatibility" value="brd2400a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="cslib/SimplicityStudio/workspace/STK3700_cslib/app/main.c"/>
  </descriptors>
  <descriptors label="STK3800_emlcd" description="&lt;h1&gt;&lt;b&gt;Energy Modes with segment LCD example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use EFM32 CMSIS and the emlib peripheral library to&#xD;&#xA;demonstrate the use of the LCD controller, RTC (real time counter), GPIO and&#xD;&#xA;various Energy Modes (EM) on the starter kit.&#xD;&#xA;&#xD;&#xA;EM2 is used for delays in between refreshing the LCD display, and a lot of&#xD;&#xA;&quot;eye candy&quot; are present to show off the MCU module's LCD display.&#xD;&#xA;&#xD;&#xA;The LCD controller drives the display down to EM2. In the demo, EM2 is used&#xD;&#xA;for &quot;most&quot; delays to show off this feature. The user can press PB0 or PB1 to&#xD;&#xA;activate EM3 and EM4. EM4 requires a system reset, while PB0 again will wake&#xD;&#xA;up the system  from Energy Mode 3.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32STG_STK3800 Starter Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3800 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32WG_STK3800/examples/emlcd/SimplicityStudio/STK3800_emlcd.slsproj,../hardware/kit/EFM32WG_STK3800/examples/emlcd/arm/emlcd.uvprojx,../hardware/kit/EFM32WG_STK3800/examples/emlcd/iar/emlcd.eww"/>
    <properties key="core.boardCompatibility" value="brd2400a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/emlcd.c"/>
  </descriptors>
  <descriptors label="STK3800_emode" description="&lt;h1&gt;&lt;b&gt;Select a single energy mode, and stay there.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 emlib and demonstrates the use of&#xD;&#xA;the LCD controller, RTC (real time counter), GPIO and various Energy&#xD;&#xA;Modes (EM).&#xD;&#xA;&#xD;&#xA;The user can press the push buttons PB0 and PB1 to select which energy&#xD;&#xA;mode to demonstrate.&#xD;&#xA;&#xD;&#xA;This demo application has been made to give a quick demo of the&#xD;&#xA;energyAware Profiler from Silicon Labs and to reproduce the different &#xD;&#xA;energy modes seen in the EFM32 datasheet current consumption table. &#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG_STK3800 Development Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3800 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32WG_STK3800/examples/emode/SimplicityStudio/STK3800_emode.slsproj,../hardware/kit/EFM32WG_STK3800/examples/emode/arm/emode.uvprojx,../hardware/kit/EFM32WG_STK3800/examples/emode/iar/emode.eww"/>
    <properties key="core.boardCompatibility" value="brd2400a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3800_energy" description="&lt;h1&gt;&lt;b&gt;Board Support Package API demo for voltage and current readout.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS and demonstrates the use of&#xD;&#xA;the STK BSP.&#xD;&#xA;&#xD;&#xA;The BSP is used to read out the current consumption and VMCU voltage level&#xD;&#xA;from the board controller. The readings are printed to the display.&#xD;&#xA;&#xD;&#xA;The BSP use a 115800-N-1 UART to communicate with the board controller,&#xD;&#xA;if you do not need the board support functions, there is no need to&#xD;&#xA;include the BSP in your project. Currently, the UART communication with&#xD;&#xA;16x oversampling is used, limiting the communication channel to high&#xD;&#xA;frequencies for the peripheral clock.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG-STK3800 Development Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3800 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32WG_STK3800/examples/energy/SimplicityStudio/STK3800_energy.slsproj,../hardware/kit/EFM32WG_STK3800/examples/energy/arm/energy.uvprojx,../hardware/kit/EFM32WG_STK3800/examples/energy/iar/energy.eww"/>
    <properties key="core.boardCompatibility" value="brd2400a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/energy.c"/>
  </descriptors>
  <descriptors label="STK3800_freertos_blink" description="&lt;h1&gt;&lt;b&gt;FreeRTOS - Blink example&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the FreeRTOS, and gives a basic demonstration of using two tasks to blink the LEDs on the board. &#xD;&#xA;It also shows how to use idle with different energy saving modes ( from EM1 to EM3 - configured in FreeRTOSConfig.h file).&#xD;&#xA;This example is intended as a skeleton for new projects using FreeRTOS.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG_STK3800 Starter Kit&#xD;&#xA;Device: EFM32WG990F256&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3800 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32WG_STK3800/examples/freertos_blink/SimplicityStudio/STK3800_freertos_blink.slsproj,../hardware/kit/EFM32WG_STK3800/examples/freertos_blink/arm/freertos_blink.uvprojx,../hardware/kit/EFM32WG_STK3800/examples/freertos_blink/iar/freertos_blink.eww"/>
    <properties key="core.boardCompatibility" value="brd2400a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3800_freertos_tickless" description="&lt;h1&gt;&lt;b&gt;FreeRTOS - Tickless example&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the FreeRTOS, and gives a basic demonstration of using two tasks,&#xD;&#xA;one sender generating number and one receiver that displays the number on the LCD. The FreeRTOS is &#xD;&#xA;configured in tickless mode, going into EM2 when no tasks are active.&#xD;&#xA;&#xD;&#xA;EM3 mode cannot be used in this example because the LCD driver and timer are not available in EM3.&#xD;&#xA;For more details, see the configuraiton in FreeRTOSConfig.h file.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG_STK3800 Starter Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3800 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32WG_STK3800/examples/freertos_tickless/SimplicityStudio/STK3800_freertos_tickless.slsproj,../hardware/kit/EFM32WG_STK3800/examples/freertos_tickless/arm/freertos_tickless.uvprojx,../hardware/kit/EFM32WG_STK3800/examples/freertos_tickless/iar/freertos_tickless.eww"/>
    <properties key="core.boardCompatibility" value="brd2400a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3800_gpiointerrupt" description="&lt;h1&gt;&lt;b&gt;Gpio interrupt example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use EFM32 CMSIS and gpio interrupt dispatcher driver to show&#xD;&#xA;how to handle multiple GPIO interrupts. Buttons pressing toggles LEDs.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG_STK3800 Starter Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3800 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32WG_STK3800/examples/gpiointerrupt/SimplicityStudio/STK3800_gpiointerrupt.slsproj,../hardware/kit/EFM32WG_STK3800/examples/gpiointerrupt/arm/gpiointerrupt.uvprojx,../hardware/kit/EFM32WG_STK3800/examples/gpiointerrupt/iar/gpiointerrupt.eww"/>
    <properties key="core.boardCompatibility" value="brd2400a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3800_inttemp" description="&lt;h1&gt;&lt;b&gt;Internal temperature sensor example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS and emlib to demonstrate&#xD;&#xA;the usage of the internal temperature sensor on EFM32 Wonder Gecko&#xD;&#xA;devices.&#xD;&#xA;&#xD;&#xA;Note: EFM32 devices with production ID lower than 18 may measure inaccurate&#xD;&#xA;temperatures due to a sensor calibration bug.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG_STK3800 Starter Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3800 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32WG_STK3800/examples/inttemp/SimplicityStudio/STK3800_inttemp.slsproj,../hardware/kit/EFM32WG_STK3800/examples/inttemp/arm/inttemp.uvprojx,../hardware/kit/EFM32WG_STK3800/examples/inttemp/iar/inttemp.eww"/>
    <properties key="core.boardCompatibility" value="brd2400a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/inttemp.c"/>
  </descriptors>
  <descriptors label="STK3800_lcd" description="&lt;h1&gt;&lt;b&gt;Segment LCD controller example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS and emlib peripheral library and&#xD;&#xA;demonstrates the use of the segment LCD controller.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG_STK3800 Starter Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3800 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32WG_STK3800/examples/lcd/SimplicityStudio/STK3800_lcd.slsproj,../hardware/kit/EFM32WG_STK3800/examples/lcd/arm/lcd.uvprojx,../hardware/kit/EFM32WG_STK3800/examples/lcd/iar/lcd.eww"/>
    <properties key="core.boardCompatibility" value="brd2400a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="emlib/lcd.c"/>
  </descriptors>
  <descriptors label="STK3800_lcsense" description="&lt;h1&gt;&lt;b&gt;LC sense example using LESENSE.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS and demonstrates the use of &#xD;&#xA;the LESENSE peripheral on the board.&#xD;&#xA;&#xD;&#xA;This demo has two different modes.&#xD;&#xA;To change between them, press PB1. In Mode0 (default). The LESENSE&#xD;&#xA;module will wake up whenever a metal object is passed above the LC&#xD;&#xA;sensor in the bottom right of the STK. In Mode 1, the EFM32 will only&#xD;&#xA;wake up every fifth time the metal object is passed over the sensor.&#xD;&#xA;&#xD;&#xA;Board: Silicon Labs EFM32WG_STK3800 Development Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3800 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32WG_STK3800/examples/lcsense/SimplicityStudio/STK3800_lcsense.slsproj,../hardware/kit/EFM32WG_STK3800/examples/lcsense/arm/lcsense.uvprojx,../hardware/kit/EFM32WG_STK3800/examples/lcsense/iar/lcsense.eww"/>
    <properties key="core.boardCompatibility" value="brd2400a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="Main/lcsense.c"/>
  </descriptors>
  <descriptors label="STK3800_leuart" description="&lt;h1&gt;&lt;b&gt;LEUART/DMA in Energy mode2 output example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project reads and sends the data back to terminal using LEUART&#xD;&#xA;while staying in EM2.&#xD;&#xA;&#xD;&#xA;It uses the EFM32 CMSIS and emlib, to demonstrate the&#xD;&#xA;use of LEUART communication using DMA under the EM2 on the &#xD;&#xA;EFM32WG_STK3800 Starter Kit.&#xD;&#xA;&#xD;&#xA;The LEUART is configured to be used with DMA under EM2.&#xD;&#xA;The terminal configuration is 9600-8-N-1.&#xD;&#xA;The DMA is configured to handle read and write data bytes from LEUART under EM2.&#xD;&#xA;&#xD;&#xA;Testing:&#xD;&#xA;1. Use the expansion header to connect the LEUART to your PC.&#xD;&#xA;2. Pin Configuration:&#xD;&#xA;	2.1. Pin-12 (PD4) LEUART0_TX&#xD;&#xA;	2.2. Pin-14 (PD5) LEUART0_RX&#xD;&#xA;	2.3. Pin-1 Gnd&#xD;&#xA;&#xD;&#xA;3. Configure terminal to 9600-8-N-1.&#xD;&#xA;4. Enter characters from your keyboard and see if you receive the echo on the terminal.&#xD;&#xA;5. Check the average current consumption is equal to EM2 on Energy Profiler.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG_STK3800 Starter Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3800 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32WG_STK3800/examples/leuart/SimplicityStudio/STK3800_leuart.slsproj,../hardware/kit/EFM32WG_STK3800/examples/leuart/arm/leuart.uvprojx,../hardware/kit/EFM32WG_STK3800/examples/leuart/iar/leuart.eww"/>
    <properties key="core.boardCompatibility" value="brd2400a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3800_lightsense" description="&lt;h1&gt;&lt;b&gt;Lightsensor example using LESENSE.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS&#xD;&#xA;and demonstrates the use of the LESENSE peripheral on the board.&#xD;&#xA;&#xD;&#xA;This demo has two different modes.&#xD;&#xA;To change between them, press PB0. In Mode0 (default). The LESENSE&#xD;&#xA;module will wake up whenever a &quot;dark&quot; event is detected by the light sensor&#xD;&#xA;below the &quot;EFM32&quot; sign on the right from the LCD on the STK. In Mode 1,&#xD;&#xA;EFM32 will only wake up on every fifth &quot;dark&quot; event.&#xD;&#xA;&#xD;&#xA;Board: Silicon Labs EFM32WG_STK3800 Development Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3800 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32WG_STK3800/examples/lightsense/SimplicityStudio/STK3800_lightsense.slsproj,../hardware/kit/EFM32WG_STK3800/examples/lightsense/arm/lightsense.uvprojx,../hardware/kit/EFM32WG_STK3800/examples/lightsense/iar/lightsense.eww"/>
    <properties key="core.boardCompatibility" value="brd2400a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="Main/lightsense.c"/>
  </descriptors>
  <descriptors label="STK3800_mpu" description="&lt;h1&gt;&lt;b&gt;Memory Protection Unit example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS including STK BSP (board&#xD;&#xA;support package).&#xD;&#xA;&#xD;&#xA;It sets up the MPU to demonstrate usage of MPU to catch memory access&#xD;&#xA;violations. STK pushbuttons are used generate MPU faults.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG_STK3800 Development Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3800 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32WG_STK3800/examples/mpu/SimplicityStudio/STK3800_mpu.slsproj,../hardware/kit/EFM32WG_STK3800/examples/mpu/arm/mpu.uvprojx,../hardware/kit/EFM32WG_STK3800/examples/mpu/iar/mpu.eww"/>
    <properties key="core.boardCompatibility" value="brd2400a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="emlib/mpu.c"/>
  </descriptors>
  <descriptors label="STK3800_nandflash" description="&lt;h1&gt;&lt;b&gt;Nandflash example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example demonstrates use of the NANDFLASH driver.&#xD;&#xA;&#xD;&#xA;Connect a terminal to the TTL-level serialport (115200-N-8-1) on EXP port pins&#xD;&#xA;4 and 6.&#xD;&#xA;Operations on the flash are initiated by issuing commands on the terminal.&#xD;&#xA;Command &quot;h&quot; will print a help screen on the terminal :&#xD;&#xA;&#xD;&#xA;    Available commands:&#xD;&#xA;        fi         : Show NAND flash device information&#xD;&#xA;        h          : Show this help&#xD;&#xA;        rp &lt;n&gt;     : Read page &lt;n&gt;&#xD;&#xA;        bp &lt;n&gt;     : Blankcheck page &lt;n&gt;&#xD;&#xA;        bd         : Blankcheck entire device&#xD;&#xA;        bb         : Check bad-block info&#xD;&#xA;        mb &lt;n&gt;     : Mark block &lt;n&gt; as bad&#xD;&#xA;        wp &lt;n&gt;     : Write page &lt;n&gt;&#xD;&#xA;        eb &lt;n&gt;     : Erase block &lt;n&gt;&#xD;&#xA;        ecc &lt;n&gt;    : Check ECC algorithm, uses page &lt;n&gt; and &lt;n+1&gt;&#xD;&#xA;        cp &lt;m&gt; &lt;n&gt; : Copy page &lt;m&gt; to page &lt;n&gt;&#xD;&#xA;&#xD;&#xA;Note that the nandflash device used on this kit has 32 pages per block, so&#xD;&#xA;pages 0-31 belongs to block 0.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG-STK3800 Development Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3800 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32WG_STK3800/examples/nandflash/SimplicityStudio/STK3800_nandflash.slsproj,../hardware/kit/EFM32WG_STK3800/examples/nandflash/arm/nandflash.uvprojx,../hardware/kit/EFM32WG_STK3800/examples/nandflash/iar/nandflash.eww"/>
    <properties key="core.boardCompatibility" value="brd2400a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3800_nvm_simple" description="&lt;h1&gt;&lt;b&gt;nvm_simple - non-volatile memory driver usage simple example&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example shows simple usage of NVM module.&#xD;&#xA;&#xD;&#xA;It stores object (32bit word in this case) into flash region declared &#xD;&#xA;as non-volatile memory area. It uses wear leveling and demonstrates &#xD;&#xA;simple use of the NVM driver. There are two types of pages: &quot;normal&quot; &#xD;&#xA;dedicated for storing multiple objects which doesn't change often &#xD;&#xA;and &quot;wear&quot; which can store single object (but this could be structure&#xD;&#xA;containing many fields) that can often change. In this example on two pages &#xD;&#xA;same object is stored but NVM could handle multiple pages with different objects.&#xD;&#xA;&#xD;&#xA;PB0 - short press recalls data from &quot;normal&quot; page&#xD;&#xA;PB0 - long press store data to &quot;normal&quot; page&#xD;&#xA;PB1 - counts up, and after releasing stores data to &quot;wear&quot; page&#xD;&#xA;&#xD;&#xA;RESET - resets CPU and if there were valid data in NVM recovers last data value.&#xD;&#xA;&#xD;&#xA;LED1 - signals writing to flash&#xD;&#xA;LED0 - signals reading from flash (invisible due to short time)&#xD;&#xA;&#xD;&#xA;In case of fatal error LED0 blinks showing place in code that caused it.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG-STK3800 Development Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3800 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32WG_STK3800/examples/nvm_simple/SimplicityStudio/STK3800_nvm_simple.slsproj,../hardware/kit/EFM32WG_STK3800/examples/nvm_simple/arm/nvm_simple.uvprojx,../hardware/kit/EFM32WG_STK3800/examples/nvm_simple/iar/nvm_simple.eww"/>
    <properties key="core.boardCompatibility" value="brd2400a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3800_powertest" description="&lt;h1&gt;&lt;b&gt;Power test example, running demonstration of energy modes.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use EFM32 CMSIS and the emlib peripheral library&#xD;&#xA;to demonstrate the use of the various Energy Modes available on the&#xD;&#xA;EFM32WG990F256. When running this example, the EnergyAware Profiler tool&#xD;&#xA;in Simplicity Studio can be used to show the power consumption of each&#xD;&#xA;energy mode.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG-STK3800 Development Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3800 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32WG_STK3800/examples/powertest/SimplicityStudio/STK3800_powertest.slsproj,../hardware/kit/EFM32WG_STK3800/examples/powertest/arm/powertest.uvprojx,../hardware/kit/EFM32WG_STK3800/examples/powertest/iar/powertest.eww"/>
    <properties key="core.boardCompatibility" value="brd2400a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3800_rtx_blink" description="&lt;h1&gt;&lt;b&gt;Keil RTX RTOS - Blink example&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the Keil RTX RTOS, and gives a basic demonstration of using two tasks to blink the LEDs on the board.&#xD;&#xA;This example is intended as a skeleton for new projects using Keil RTX.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG-STK3800&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3800 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32WG_STK3800/examples/rtx_blink/SimplicityStudio/STK3800_rtx_blink.slsproj,../hardware/kit/EFM32WG_STK3800/examples/rtx_blink/arm/rtx_blink.uvprojx,../hardware/kit/EFM32WG_STK3800/examples/rtx_blink/iar/rtx_blink.eww"/>
    <properties key="core.boardCompatibility" value="brd2400a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/rtx_blink.c"/>
  </descriptors>
  <descriptors label="STK3800_rtx_tickless" description="&lt;h1&gt;&lt;b&gt;Keil RTX RTOS - tick-less example&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the Keil RTX RTOS, and gives a basic demonstration&#xD;&#xA;of using two tasks; one sender generating number and one receiver that displays&#xD;&#xA;the number on LCD. The RTX is configured in tick-less mode, going into EM2 when&#xD;&#xA;no tasks are active. This example is intended as a skeleton for new projects&#xD;&#xA;using Keil RTX for energy aware applications.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG-STK3800&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3800 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32WG_STK3800/examples/rtx_tickless/SimplicityStudio/STK3800_rtx_tickless.slsproj,../hardware/kit/EFM32WG_STK3800/examples/rtx_tickless/arm/rtx_tickless.uvprojx,../hardware/kit/EFM32WG_STK3800/examples/rtx_tickless/iar/rtx_tickless.eww"/>
    <properties key="core.boardCompatibility" value="brd2400a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/rtx_tickless.c"/>
  </descriptors>
  <descriptors label="STK3800_rtx_tickless_nolcd" description="&lt;h1&gt;&lt;b&gt;Keil RTX RTOS - tick-less example with LCD off.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example is modification of rtx_tickless to demonstrate ultra low power consumption &#xD;&#xA;of Gecko processors in connection with RTX RTOS. Comparing to previous example it has LCD&#xD;&#xA;turned off. There is also possible to disable part of RAM to lower power even further.&#xD;&#xA;Low frequency crystal oscillator was disabled and low frequency RC oscillator used instead&#xD;&#xA;to lower energy consumption even more.&#xD;&#xA;&#xD;&#xA;project uses the Keil RTX RTOS, and gives a basic demonstration&#xD;&#xA;of using two tasks; one sender generating number and one receiver.&#xD;&#xA;The RTX is configured in tick-less mode, going into EM2 when&#xD;&#xA;no tasks are active. This example is intended as a skeleton for new projects&#xD;&#xA;using Keil RTX for energy aware applications.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG-STK3800&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3800 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32WG_STK3800/examples/rtx_tickless_nolcd/SimplicityStudio/STK3800_rtx_tickless_nolcd.slsproj,../hardware/kit/EFM32WG_STK3800/examples/rtx_tickless_nolcd/arm/rtx_tickless_nolcd.uvprojx,../hardware/kit/EFM32WG_STK3800/examples/rtx_tickless_nolcd/iar/rtx_tickless_nolcd.eww"/>
    <properties key="core.boardCompatibility" value="brd2400a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/rtx_tickless.c"/>
  </descriptors>
  <descriptors label="STK3800_touch" description="&lt;h1&gt;&lt;b&gt;Capactive touch example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example demonstrates the capacitive touch capability of the EFM32 and the&#xD;&#xA;Tiny Gecko STK. This is a port of the EFM32_G8xx_STK capacitive touch demo.&#xD;&#xA;&#xD;&#xA;It demonstrates the use of LESENSE, ACMP, VCMP, LCD, and EMU.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG_STK3800&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3800 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32WG_STK3800/examples/touch/SimplicityStudio/STK3800_touch.slsproj,../hardware/kit/EFM32WG_STK3800/examples/touch/arm/touch.uvprojx,../hardware/kit/EFM32WG_STK3800/examples/touch/iar/touch.eww"/>
    <properties key="core.boardCompatibility" value="brd2400a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/touchdemo.c"/>
  </descriptors>
  <descriptors label="STK3800_usbdcomposite" description="&lt;h1&gt;&lt;b&gt;USB Composite Device example, MSD + CDC + Vendor unique functions.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use the EFM32 USB Device protocol stack&#xD;&#xA;to implement a composite USB device with tree functions:&#xD;&#xA;&#xD;&#xA; - Mass storage class device (MSD) implementing a disk in internal flash memory.&#xD;&#xA; - Communication device class (CDC) implementing a USB&lt;-&gt;UART bridge&#xD;&#xA; - Vendor Unique Device similar to the usbdvud example (control STK leds).&#xD;&#xA;&#xD;&#xA;As the CDC function has two interface, the CDC function use an Interface&#xD;&#xA;Association Descriptor (IAD). A composite device which use IAD's must be&#xD;&#xA;implemented using bDeviceClass=0xEF, bDeviceSubClass=2 and bDeviceProtocol=1.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;The vendor unique function (VUD).&#xD;&#xA;=================================&#xD;&#xA;Toggles user LED's 0 and 1 when receiving vendor unique class setup commands.&#xD;&#xA;Intended to be used together with the &quot;libusb&quot; device driver, and host&#xD;&#xA;application EFM32-LedApp.exe (a Windows application).&#xD;&#xA;You will find libusb and EFM32-LedApp.exe in the &quot;host&quot; folder of the usbdvud&#xD;&#xA;example. Check EFM32_Vendor_Unique_Device.inf to see how both the usbdvud&#xD;&#xA;example VID_10C4&amp;PID_0001 and this composite example VID_10C4&amp;PID_0008&amp;MI_00&#xD;&#xA;are specified.&#xD;&#xA;&#xD;&#xA;The CDC COM port function.&#xD;&#xA;==========================&#xD;&#xA;Implements an USB CDC based virtual COM port. USART1 on the STK is used as the&#xD;&#xA;physical COM port. Any data sent to the virtual CDC COM port is transmitted on&#xD;&#xA;USART1. Any data received on USART1 is transmitted to the virtual port.&#xD;&#xA;USART1 is available on the STK EXT port. EXT pin 4 is Tx, pin 6 is Rx.&#xD;&#xA;NOTE: This is a TTL level USART, DO NOT CONNECT DIRECTLY TO RS232 PORTS !&#xD;&#xA;&#xD;&#xA;USB Mass Storage Device function.&#xD;&#xA;=================================&#xD;&#xA;Implements a Mass Storage Class device (MSD) with 4MByte in external PSRAM.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Windows driver installation.&#xD;&#xA;============================&#xD;&#xA;The first time the composite USB device is connected to the host, Windows must&#xD;&#xA;install drivers for the VUD and CDC functions.&#xD;&#xA;&#xD;&#xA;To control the VUD function with EFM32-LedApp.exe you need to install &quot;libusb&quot;&#xD;&#xA;device driver. Manually direct Windows to look for this driver in the &quot;host&quot;&#xD;&#xA;folder of the usbdvud example.&#xD;&#xA;This can be done with the new device &quot;Wizard&quot; which might pop up after device&#xD;&#xA;insertion, or you can open &quot;Device Manager&quot;, left click on one of functions&#xD;&#xA;of the new composite device (marked with yellow exclamation mark) and&#xD;&#xA;select &quot;Update Driver Software...&quot;.&#xD;&#xA;After libusb is installed you can start EFM32-LedApp.exe to control leds on&#xD;&#xA;the STK.&#xD;&#xA;&#xD;&#xA;Similarly for the CDC function, direct Windows to look for a driver in the&#xD;&#xA;folder where you have your copy of the &quot;EFM32-Cdc.inf&quot; file (same folder as&#xD;&#xA;this readme file, unzip the Silabs-CDC_Install.zip).&#xD;&#xA;Note how the .inf file specifies interface number 2, VID_10C4&amp;PID_0008&amp;MI_02.&#xD;&#xA;When the serial port driver is succesfully installed, the device will be listed&#xD;&#xA;as a &quot;Ports&quot; device in Device Manager, double-click it, select the&#xD;&#xA;&quot;Port Settings&quot; tab and maybe the &quot;Advanced...&quot; button to set serial port&#xD;&#xA;properties.&#xD;&#xA;&#xD;&#xA;Some versions of Windows wont allow you to install unsigned drivers. If you&#xD;&#xA;suspect this, reboot the PC into &quot;Disable Driver Signature Enforcement&quot; mode.&#xD;&#xA;Win7:&#xD;&#xA;Repeatedly push F8 during boot until the boot menu appears.&#xD;&#xA;Select the &quot;Disable Driver Signature Enforcement&quot; option.&#xD;&#xA;Win10:&#xD;&#xA;Start Menu-&gt;Power button-&gt;Hold Shift key down and select Restart.&#xD;&#xA;When computer has restarted into the options menu, select:&#xD;&#xA;Troubleshoot-&gt;Advanced Option-&gt;Startup Settings-&gt;Restart-&gt;Disable driver signature enforcement&#xD;&#xA;You should now be able to install an unsigned driver.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG-STK3800 Development Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3800 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32WG_STK3800/examples/usbdcomposite/SimplicityStudio/STK3800_usbdcomposite.slsproj,../hardware/kit/EFM32WG_STK3800/examples/usbdcomposite/arm/usbdcomposite.uvprojx,../hardware/kit/EFM32WG_STK3800/examples/usbdcomposite/iar/usbdcomposite.eww"/>
    <properties key="core.boardCompatibility" value="brd2400a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3800_usbdhidkbd" description="&lt;h1&gt;&lt;b&gt;USB HID keyboard example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use the EFM32 USB Device protocol stack&#xD;&#xA;and implements an USB HID class keyboard device (one button !).&#xD;&#xA;&#xD;&#xA;PB0 is the keyboard button. Pressing this button will succesively write&#xD;&#xA;&quot;Silicon Labs - &quot;.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG-STK3800 Development Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3800 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32WG_STK3800/examples/usbdhidkbd/SimplicityStudio/STK3800_usbdhidkbd.slsproj,../hardware/kit/EFM32WG_STK3800/examples/usbdhidkbd/arm/usbdhidkbd.uvprojx,../hardware/kit/EFM32WG_STK3800/examples/usbdhidkbd/iar/usbdhidkbd.eww"/>
    <properties key="core.boardCompatibility" value="brd2400a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3800_usbdmsd" description="&lt;h1&gt;&lt;b&gt;USB Mass Storage Device example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use the EFM32 USB Device protocol stack&#xD;&#xA;to implement a device Mass Storage Class device (MSD).&#xD;&#xA;&#xD;&#xA;The example provides two different MSD types.&#xD;&#xA;&#xD;&#xA; - A 96KByte &quot;disk&quot; in internal SRAM (on devices with 128 kByte or larger SRAM)&#xD;&#xA; - An internal FLASH &quot;disk&quot; (disksize is internal FLASH size minus 64K)&#xD;&#xA;&#xD;&#xA;Select mediatype in msddmedia.h (#define MSD_MEDIA)&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG_STK3800 Development Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3800 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32WG_STK3800/examples/usbdmsd/SimplicityStudio/STK3800_usbdmsd.slsproj,../hardware/kit/EFM32WG_STK3800/examples/usbdmsd/arm/usbdmsd.uvprojx,../hardware/kit/EFM32WG_STK3800/examples/usbdmsd/iar/usbdmsd.eww"/>
    <properties key="core.boardCompatibility" value="brd2400a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3800_usbdvud" description="&lt;h1&gt;&lt;b&gt;USB Vendor Unique Device example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use the EFM32 USB Device protocol stack&#xD;&#xA;and implements an USB Vendor Unique Device.&#xD;&#xA;&#xD;&#xA;The example will toggle LED's 0 and 1 when receiving vendor unique class&#xD;&#xA;setup commands.&#xD;&#xA;&#xD;&#xA;This example is intended to be used together with the &quot;libusb&quot; device driver,&#xD;&#xA;and host application EFM32-LedApp.exe (a Windows application).&#xD;&#xA;&#xD;&#xA;The first time the USB device is connected to the host, you must tell the host&#xD;&#xA;OS to install the &quot;libusb&quot; device driver.&#xD;&#xA;&#xD;&#xA;On Windows, you can follow this procedure:&#xD;&#xA;Insert the device, and manually direct Windows to look for drivers in the&#xD;&#xA;directory where you have your copy of the &quot;EFM32_Vendor_Unique_Device.inf&quot; file.&#xD;&#xA;This can be done with the new device &quot;Wizard&quot; which might pop up after device&#xD;&#xA;insertion, or you can open &quot;Device Manager&quot;, left click on the new device and&#xD;&#xA;select &quot;Update Driver Software...&quot;.&#xD;&#xA;&#xD;&#xA;Some versions of Windows wont allow you to install unsigned drivers. If you&#xD;&#xA;suspect this, reboot the PC into &quot;Disable Driver Signature Enforcement&quot; mode.&#xD;&#xA;Win7:&#xD;&#xA;Repeatedly push F8 during boot until the boot menu appears.&#xD;&#xA;Select the &quot;Disable Driver Signature Enforcement&quot; option.&#xD;&#xA;Win10:&#xD;&#xA;Start Menu-&gt;Power button-&gt;Hold Shift key down and select Restart.&#xD;&#xA;When computer has restarted into the options menu, select:&#xD;&#xA;Troubleshoot-&gt;Advanced Option-&gt;Startup Settings-&gt;Restart-&gt;Disable driver signature enforcement&#xD;&#xA;You should now be able to install an unsigned driver.&#xD;&#xA;&#xD;&#xA;After libusb is installed, start EFM32-LedApp.exe.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG-STK3800 Development Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3800 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32WG_STK3800/examples/usbdvud/SimplicityStudio/STK3800_usbdvud.slsproj,../hardware/kit/EFM32WG_STK3800/examples/usbdvud/arm/usbdvud.uvprojx,../hardware/kit/EFM32WG_STK3800/examples/usbdvud/iar/usbdvud.eww"/>
    <properties key="core.boardCompatibility" value="brd2400a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3800_usbhenum" description="&lt;h1&gt;&lt;b&gt;USB device enumerator example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the USB host stack to implement&#xD;&#xA;a simple device enumerator. When a device is attached its descriptors are read&#xD;&#xA;and the vendor and product id's (VID/PID) are displayed on the LCD.&#xD;&#xA;The device attached will not be configured.&#xD;&#xA;&#xD;&#xA;Note that USB disk drives may fail, as some of them draw too much current&#xD;&#xA;when attached.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG-STK3800 Development Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3800 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32WG_STK3800/examples/usbhenum/SimplicityStudio/STK3800_usbhenum.slsproj,../hardware/kit/EFM32WG_STK3800/examples/usbhenum/arm/usbhenum.uvprojx,../hardware/kit/EFM32WG_STK3800/examples/usbhenum/iar/usbhenum.eww"/>
    <properties key="core.boardCompatibility" value="brd2400a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3800_userpage" description="&lt;h1&gt;&lt;b&gt;Progamming and use of user flash page for data.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS  and demonstrates the programming of&#xD;&#xA;the user page in flash. The page can be used for data such as keys, serial&#xD;&#xA;numbers and other information that should not be deleted by a device erase.&#xD;&#xA;&#xD;&#xA;PB0 increases the main counter&#xD;&#xA;PB1 saves the main counter value to the userpage, and displays how many writes&#xD;&#xA;have been issued.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG_STK3800 Development Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3800 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32WG_STK3800/examples/userpage/SimplicityStudio/STK3800_userpage.slsproj,../hardware/kit/EFM32WG_STK3800/examples/userpage/arm/userpage.uvprojx,../hardware/kit/EFM32WG_STK3800/examples/userpage/iar/userpage.eww"/>
    <properties key="core.boardCompatibility" value="brd2400a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/userpage.c"/>
  </descriptors>
  <descriptors label="STK3800_usbxpress_echo" description="&lt;h1&gt;&lt;b&gt;USBXpress Echo example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project demonstrates the EFM32 USBXpress firmware library.&#xD;&#xA;It echoes all received data back to the host that sent it.&#xD;&#xA;&#xD;&#xA;The host-side application is the usbxpress_echo.py Python script found in the&#xD;&#xA;USBXpress SDK at Examples/Echo/Host. The USBXpress SDK is available for download&#xD;&#xA;at www.silabs.com/products/mcu/Pages/USBXpress.aspx.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG_STK3800 Development Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3800 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32WG_STK3800/examples/usbxpress_echo/SimplicityStudio/STK3800_usbxpress_echo.slsproj,../hardware/kit/EFM32WG_STK3800/examples/usbxpress_echo/arm/usbxpress_echo.uvprojx,../hardware/kit/EFM32WG_STK3800/examples/usbxpress_echo/iar/usbxpress_echo.eww"/>
    <properties key="core.boardCompatibility" value="brd2400a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3800_usbxpress_test_panel" description="&lt;h1&gt;&lt;b&gt;USBXpress Test Panel example&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project demonstrates the EFM32 USBXpress firmware library.&#xD;&#xA;It communicates with the TestPanel host application to send and receive data.&#xD;&#xA;TestPanel is included in the USBXpress SDK, available for download at:&#xD;&#xA;&#xD;&#xA;https://www.silabs.com/products/mcu/Pages/USBXpress.aspx&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG_STK3800 Development Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3800 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32WG_STK3800/examples/usbxpress_test_panel/SimplicityStudio/STK3800_usbxpress_test_panel.slsproj,../hardware/kit/EFM32WG_STK3800/examples/usbxpress_test_panel/arm/usbxpress_test_panel.uvprojx,../hardware/kit/EFM32WG_STK3800/examples/usbxpress_test_panel/iar/usbxpress_test_panel.eww"/>
    <properties key="core.boardCompatibility" value="brd2400a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3800_biometric" description="&lt;h1&gt;&lt;b&gt;Biometric Demo using the Biometric Sensor add-on board on the EFM32WG-STK3800.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses the EFM32 CMSIS including emlib and the&#xA;board support package support functions/drivers to demonstrate driving&#xA;the LCD display on the EFM32WG_STK3800 kit. In addition, it demonstrates the &#xA;use of Silicon Labs I2C based sensors on the expansion board header.&#xA;&#xA;You must have a Silicon Labs Biometric Sensor add-on board to make use of this demo.&#xA;Once the demo is started, push button PB0 to change what is displayed. While&#xA;on the heart rate monitor display hold your finger on the proximity sensor to &#xA;measure heart rate.&#xA;&#xA;Board:  Silicon Labs EFM32WG-STK3800 Starter Kit and Sensor Add-on board&#xA;Device: EFM32WG990F256&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3800 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32WG_STK3800/examples/biometric/SimplicityStudio/STK3800_biometric.slsproj,../hardware/kit/EFM32WG_STK3800/examples/biometric/arm/biometric.uvprojx,../hardware/kit/EFM32WG_STK3800/examples/biometric/iar/biometric.eww"/>
    <properties key="core.boardCompatibility" value="brd2400a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/biometric_demo.c"/>
  </descriptors>
  <descriptors label="STK3800_lightsensefft_softfloat" description="&lt;h1&gt;&lt;b&gt;Lightsensor example with FFT transform.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS and ARM's DSP lib to demonstrate&#xD;&#xA;floating point FFT and sinc interpolation.&#xD;&#xA;&#xD;&#xA;Connect the light sensor output to the ADC input by shorting pins&#xD;&#xA;15 and 14 on the EXP_HEADER of the STK.&#xD;&#xA;Direct various light sources to the light sensor. Expect no specific&#xD;&#xA;frequency from daylight or from a flashlight. Mains powered incandescent bulbs&#xD;&#xA;should give twice the mains frequency. Using another STK running the&#xD;&#xA;&quot;blink&quot; example modified to various blink rates is an excellent signal source.&#xD;&#xA;The frequency bandwidth is approximately 10-500 Hz.&#xD;&#xA;The frequency shows in the 4 digit numerical display upper right on&#xD;&#xA;the LCD. The LCD also displays the number of cpu cycles used to do&#xD;&#xA;the FFT transform.&#xD;&#xA;&#xD;&#xA;You can of course run this example without connecting the light sensor to&#xD;&#xA;the ADC, you will still be able to measure the cpu cycle count used to do&#xD;&#xA;the FFT transform.&#xD;&#xA;&#xD;&#xA;Experiment using hard and soft floating point math and see the difference&#xD;&#xA;in cpu cycle count.&#xD;&#xA;&#xD;&#xA;Board: Silicon Labs EFM32WG_STK3800 Development Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3800 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32WG_STK3800/examples/lightsensefft/SimplicityStudio/STK3800_lightsensefft_hardfloat.slsproj,../hardware/kit/EFM32WG_STK3800/examples/lightsensefft/arm/lightsensefft_hardfloat.uvprojx,../hardware/kit/EFM32WG_STK3800/examples/lightsensefft/arm/lightsensefft_softfloat.uvprojx,../hardware/kit/EFM32WG_STK3800/examples/lightsensefft/iar/lightsensefft.eww"/>
    <properties key="core.boardCompatibility" value="brd2400a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/lightsensefft.c"/>
  </descriptors>
  <descriptors label="STK3800_lightsensefft_hardfloat" description="&lt;h1&gt;&lt;b&gt;Lightsensor example with FFT transform.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS and ARM's DSP lib to demonstrate&#xD;&#xA;floating point FFT and sinc interpolation.&#xD;&#xA;&#xD;&#xA;Connect the light sensor output to the ADC input by shorting pins&#xD;&#xA;15 and 14 on the EXP_HEADER of the STK.&#xD;&#xA;Direct various light sources to the light sensor. Expect no specific&#xD;&#xA;frequency from daylight or from a flashlight. Mains powered incandescent bulbs&#xD;&#xA;should give twice the mains frequency. Using another STK running the&#xD;&#xA;&quot;blink&quot; example modified to various blink rates is an excellent signal source.&#xD;&#xA;The frequency bandwidth is approximately 10-500 Hz.&#xD;&#xA;The frequency shows in the 4 digit numerical display upper right on&#xD;&#xA;the LCD. The LCD also displays the number of cpu cycles used to do&#xD;&#xA;the FFT transform.&#xD;&#xA;&#xD;&#xA;You can of course run this example without connecting the light sensor to&#xD;&#xA;the ADC, you will still be able to measure the cpu cycle count used to do&#xD;&#xA;the FFT transform.&#xD;&#xA;&#xD;&#xA;Experiment using hard and soft floating point math and see the difference&#xD;&#xA;in cpu cycle count.&#xD;&#xA;&#xD;&#xA;Board: Silicon Labs EFM32WG_STK3800 Development Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3800 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32WG_STK3800/examples/lightsensefft/SimplicityStudio/STK3800_lightsensefft_hardfloat.slsproj,../hardware/kit/EFM32WG_STK3800/examples/lightsensefft/arm/lightsensefft_hardfloat.uvprojx,../hardware/kit/EFM32WG_STK3800/examples/lightsensefft/arm/lightsensefft_softfloat.uvprojx,../hardware/kit/EFM32WG_STK3800/examples/lightsensefft/iar/lightsensefft.eww"/>
    <properties key="core.boardCompatibility" value="brd2400a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/lightsensefft.c"/>
  </descriptors>
  <descriptors label="STK3800_ucos2" description="&lt;h1&gt;&lt;b&gt;uC/OS-II RTOS on EFM32 using example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This is a port of the uC/OS-II RTOS from Micrium Inc, http://www.micrium.com&#xD;&#xA;&#xD;&#xA;The port has been adapted by Silicon Labs for use with our Development&#xD;&#xA;Kit. It requires the standard EFM32 CMSIS package (including emlib).&#xD;&#xA;&#xD;&#xA;The example has three tasks:&#xD;&#xA; - Task1: LED blink task&#xD;&#xA; - Task2: Receives characters from serial port and posts message to Task3&#xD;&#xA; - Task3: Receives message from Task2 and writes it on LCD and serial port&#xD;&#xA;&#xD;&#xA;Serial port can be chosen between:&#xD;&#xA;USART1 - location 1 is used, GPIO port D pins 0 and 1, baudrate 115200-8-N-1.&#xD;&#xA;LEUART0 - location 0 is used, GPIO port D pins 4 and 5, baudrate 9600-8-N-1.&#xD;&#xA;&#xD;&#xA;These USARTs are by default not connected to any serial port, so this needs&#xD;&#xA;to be connected to external RS232 ports to be usable.&#xD;&#xA;&#xD;&#xA;Note: The Keil toolchain port does not support FPU context preservation&#xD;&#xA;      across tasks.&#xD;&#xA;&#xD;&#xA;uC/OS-II is provided in source form for FREE evaluation, for educational use&#xD;&#xA;or for peaceful research.&#xD;&#xA;&#xD;&#xA;If you plan on using uC/OS-II in a commercial product you need to contact&#xD;&#xA;Micrium to properly license its use in your product. We provide ALL the&#xD;&#xA;source code for your convenience and to help you experience uC/OS-II.&#xD;&#xA;The fact that the source is provided does NOT mean that you can use it without&#xD;&#xA;paying a licensing fee.&#xD;&#xA;&#xD;&#xA;For commercial use, contact Micrium, http://www.micrium.com for details.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG_STK3800 Starter Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3800 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32WG_STK3800/examples/ucos2_port/arm/ucos2.uvprojx,../hardware/kit/EFM32WG_STK3800/examples/ucos2_port/iar/ucos2.eww"/>
    <properties key="core.boardCompatibility" value="brd2400a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/app/app.c"/>
  </descriptors>
  <descriptors label="STK3800_ucos3" description="&lt;h1&gt;&lt;b&gt;uC/OS-III RTOS on EFM32 using example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This is a port of the uC/OS-III RTOS from Micrium Inc, http://www.micrium.com&#xD;&#xA;&#xD;&#xA;The port has been adapted by Silicon Labs for use with our Development Kit..&#xD;&#xA;It requires the standard EFM32 CMSIS package (including emlib).&#xD;&#xA;&#xD;&#xA;The example has three tasks:&#xD;&#xA; - Task1: LED blink task&#xD;&#xA; - Task2: Receives characters from serial port and posts message to Task3&#xD;&#xA; - Task3: Receives message from Task2 and writes it on LCD and serial port&#xD;&#xA;&#xD;&#xA;Serial port can be chosen between:&#xD;&#xA;USART1 - location 1 is used, GPIO port D pins 0 and 1, baudrate 115200-8-N-1.&#xD;&#xA;LEUART0 - location 0 is used, GPIO port D pins 4 and 5, baudrate 9600-8-N-1.&#xD;&#xA;&#xD;&#xA;These USARTs are by default not connected to any serial port, so this needs&#xD;&#xA;to be connected to external RS232 ports to be usable.&#xD;&#xA;&#xD;&#xA;Note: The Keil toolchain port does not support FPU context preservation&#xD;&#xA;      across tasks.&#xD;&#xA;&#xD;&#xA;uC/OS-III is provided in source form for FREE evaluation, for educational use&#xD;&#xA;or for peaceful research.&#xD;&#xA;&#xD;&#xA;If you plan on using uC/OS-III in a commercial product you need to contact&#xD;&#xA;Micrium to properly license its use in your product. We provide ALL the&#xD;&#xA;source code for your convenience and to help you experience uC/OS-III.&#xD;&#xA;The fact that the source is provided does NOT mean that you can use it without&#xD;&#xA;paying a licensing fee.&#xD;&#xA;&#xD;&#xA;For commercial use, contact Micrium, http://www.micrium.com for details.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG_STK3800 Starter Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3800 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32WG_STK3800/examples/ucos3_port/arm/ucos3.uvprojx,../hardware/kit/EFM32WG_STK3800/examples/ucos3_port/iar/ucos3.eww"/>
    <properties key="core.boardCompatibility" value="brd2400a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/app/app.c"/>
  </descriptors>
  <descriptors label="STK3200_blink" description="&lt;h1&gt;&lt;b&gt;Blink example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use EFM32 CMSIS and the emlib peripheral library to&#xD;&#xA;demonstrate the use of the LED's on the starter kit. This example is intended as&#xD;&#xA;a skeleton for new projects.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32ZG_STK3200 Starter Kit&#xD;&#xA;Device: EFM32ZG222F32&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Zero Gecko 3200 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32ZG_STK3200/examples/blink/SimplicityStudio/STK3200_blink.slsproj,../hardware/kit/EFM32ZG_STK3200/examples/blink/arm/blink.uvprojx,../hardware/kit/EFM32ZG_STK3200/examples/blink/iar/blink.eww"/>
    <properties key="core.boardCompatibility" value="brd2010a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.zg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/blink.c"/>
  </descriptors>
  <descriptors label="STK3200_clock" description="&lt;h1&gt;&lt;b&gt;Analog and digital clock example using the Memory LCD on the EFM32ZG-STK3200.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS including emlib and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the Sharp Memory LCD display on the EFM32ZG_STK3200 kit.&#xD;&#xA;&#xD;&#xA;The user can switch between analog and digital clock modes by pushing&#xD;&#xA;the PB0 button.&#xD;&#xA;&#xD;&#xA;The user can increment the second count by pushing the PB1 button.&#xD;&#xA;The minute count can be incremented by pushing the PB1 button for more&#xD;&#xA;than 2 seconds.&#xD;&#xA;&#xD;&#xA;The analog clock mode demonstrates the use of GLIB to draw hour, minute&#xD;&#xA;and second pointers on the background which is a bitmap in flash memory.&#xD;&#xA;&#xD;&#xA;The digital clock demonstrates the 16x20 font (including number characters&#xD;&#xA;only) of the textdisplay driver.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32ZG-STK3200 Development Kit&#xD;&#xA;Device: EFM32ZG222F32&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Zero Gecko 3200 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32ZG_STK3200/examples/clock/SimplicityStudio/STK3200_clock.slsproj,../hardware/kit/EFM32ZG_STK3200/examples/clock/arm/clock.uvprojx,../hardware/kit/EFM32ZG_STK3200/examples/clock/iar/clock.eww"/>
    <properties key="core.boardCompatibility" value="brd2010a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.zg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3200_cpt007b_demo" description="&lt;h1&gt;&lt;b&gt;CPT007B Demo&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This demo demonstrates the capacitive button function of CPT007B fixed function&#xD;&#xA;board. This demo runs on the EFM32 STK, and communicates with CPT007B through&#xD;&#xA;the GPIO pins on the EXP header. Virtual buttons on STK's LCD screen indicate&#xD;&#xA;whether the capacitive sensing buttons on CPT007B are pressed or released.&#xD;&#xA;This demo supports up to 7 capacitive buttons on CPT007B&#xD;&#xA; &#xD;&#xA;Board:  Silicon Labs EFM32ZG_STK3200 Starter Kit and CPT007B Evaluation Board&#xD;&#xA;Device: EFM32ZG222F32&lt;/pre&gt;">
    <properties key="template.category" value="Zero Gecko 3200 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32ZG_STK3200/examples/cpt007b/SimplicityStudio/STK3200_cpt007b_demo.slsproj,../hardware/kit/EFM32ZG_STK3200/examples/cpt007b/arm/cpt007b_demo.uvprojx,../hardware/kit/EFM32ZG_STK3200/examples/cpt007b/iar/cpt007b_demo.eww"/>
    <properties key="core.boardCompatibility" value="brd2010a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.zg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/cpt007b_demo.c"/>
  </descriptors>
  <descriptors label="STK3200_cpt112s_demo" description="&lt;h1&gt;&lt;b&gt;CPT112S Demo&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This demo demonstrates the capacitive button function of CPT112S fixed&#xD;&#xA;function board. This demo runs on the EFM32 STK,and communicates with&#xD;&#xA;CPT112S through the SMBUS pins on the EXP header. Virtual buttons on&#xD;&#xA;STK's LCD screen indicate whether the capacitive sensing buttons on CPT112S&#xD;&#xA;are pressed or released.&#xD;&#xA; &#xD;&#xA;This demo supports 11 buttons on the CPT112S device.(The CS11 button is&#xD;&#xA;disabled in the default configuration of the board to enable the buzzer)&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32ZG_STK3200 Starter Kit and CPT112S Evaluation Board&#xD;&#xA;Device: EFM32ZG222F32&lt;/pre&gt;">
    <properties key="template.category" value="Zero Gecko 3200 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32ZG_STK3200/examples/cpt112s/SimplicityStudio/STK3200_cpt112s_demo.slsproj,../hardware/kit/EFM32ZG_STK3200/examples/cpt112s/arm/cpt112s_demo.uvprojx,../hardware/kit/EFM32ZG_STK3200/examples/cpt112s/iar/cpt112s_demo.eww"/>
    <properties key="core.boardCompatibility" value="brd2010a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.zg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/cpt112s_demo.c"/>
  </descriptors>
  <descriptors label="STK3200_cslib" description="&lt;h1&gt;&lt;b&gt;CSLIB example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses the capacitive sensing firmware library to sample&#xA;capacitive sensing buttons on the STK.  Real-time sample information, touch&#xA;qualification status, and other state variables can be displayed and examined&#xA;in the Capacitive Sensing Profiler tool.&#xA;&#xA;Board:  Silicon Labs EFM32ZG_STK3200 Starter Kit&#xA;Device: EFM32ZG222F32&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Zero Gecko 3200 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32ZG_STK3200/examples/cslib/SimplicityStudio/STK3200_cslib.slsproj,../hardware/kit/EFM32ZG_STK3200/examples/cslib/arm/cslib.uvprojx,../hardware/kit/EFM32ZG_STK3200/examples/cslib/iar/cslib.eww"/>
    <properties key="core.boardCompatibility" value="brd2010a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.zg.*"/>
    <properties key="template.initiallyOpenedResource" value="SimplicityStudio/workspace/STK3200_cslib/app/main.c"/>
  </descriptors>
  <descriptors label="STK3200_emlcd" description="&lt;h1&gt;&lt;b&gt;Energy Modes with LCD display example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use EFM32 CMSIS and the emlib peripheral library to&#xD;&#xA;demonstrate the use of the LCD, RTC (real time counter), GPIO and&#xD;&#xA;various Energy Modes on the starter kit.&#xD;&#xA;&#xD;&#xA;The example will cycle through Energy Mode EM0-EM3, staying one second in&#xD;&#xA;each mode. PB0 can be pressed anytime to enter EM4.&#xD;&#xA;Wakeup from EM4 is either by reset pushbutton or by GPIO pin (port C bit 9)&#xD;&#xA;connected to pushbutton PB1.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32ZG-STK3200 Development Kit&#xD;&#xA;Device: EFM32ZG222F32&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Zero Gecko 3200 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32ZG_STK3200/examples/emlcd/SimplicityStudio/STK3200_emlcd.slsproj,../hardware/kit/EFM32ZG_STK3200/examples/emlcd/arm/emlcd.uvprojx,../hardware/kit/EFM32ZG_STK3200/examples/emlcd/iar/emlcd.eww"/>
    <properties key="core.boardCompatibility" value="brd2010a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.zg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/emlcd.c"/>
  </descriptors>
  <descriptors label="STK3200_emode" description="&lt;h1&gt;&lt;b&gt;Select a single energy mode, and stay there.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 emlib and demonstrates the use of&#xD;&#xA;the LCD display, RTC (real time counter), GPIO and various Energy&#xD;&#xA;Modes (EM).&#xD;&#xA;&#xD;&#xA;Use PB1 to cycle through the energy mode tests available.&#xD;&#xA;Press PB0 to start selected test.&#xD;&#xA;&#xD;&#xA;This demo application has been made to give a quick demo of the&#xD;&#xA;energyAware Profiler from Silicon Labs and to reproduce the different &#xD;&#xA;energy modes seen in the EFM32 datasheet current consumption table. &#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32ZG-STK3200 Development Kit&#xD;&#xA;Device: EFM32ZG222F32&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Zero Gecko 3200 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32ZG_STK3200/examples/emode/SimplicityStudio/STK3200_emode.slsproj,../hardware/kit/EFM32ZG_STK3200/examples/emode/arm/emode.uvprojx,../hardware/kit/EFM32ZG_STK3200/examples/emode/iar/emode.eww"/>
    <properties key="core.boardCompatibility" value="brd2010a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.zg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3200_energy" description="&lt;h1&gt;&lt;b&gt;Board Support Package API demo for voltage and current readout.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS and demonstrates the use of&#xD;&#xA;the STK BSP.&#xD;&#xA;&#xD;&#xA;The BSP is used to read out the current consumption and VMCU voltage level&#xD;&#xA;from the board controller. The readings are printed to the display.&#xD;&#xA;&#xD;&#xA;The CPU runs from the HFRCO clock and change HFRCO frequency every few &#xD;&#xA;seconds to show how CPU frequency affects power consumption.&#xD;&#xA;&#xD;&#xA;The BSP use the LEUART at 115800-N-1 to communicate with the board controller.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32ZG_STK3200 Starter Kit&#xD;&#xA;Device: EFM32ZG222F32&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Zero Gecko 3200 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32ZG_STK3200/examples/energy/SimplicityStudio/STK3200_energy.slsproj,../hardware/kit/EFM32ZG_STK3200/examples/energy/arm/energy.uvprojx,../hardware/kit/EFM32ZG_STK3200/examples/energy/iar/energy.eww"/>
    <properties key="core.boardCompatibility" value="brd2010a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.zg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3200_freertos_blink" description="&lt;h1&gt;&lt;b&gt;FreeRTOS - Blink example&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the FreeRTOS, and gives a basic demonstration of using two tasks to blink the LEDs on the board. &#xD;&#xA;It also shows how to use idle mode with different energy saving modes ( from EM1 to EM2 - configured in FreeRTOSConfig.h file).&#xD;&#xA;This example is intended as a skeleton for new projects using FreeRTOS.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32ZG_STK3200 Starter Kit&#xD;&#xA;Device: EFM32ZG222F32&lt;/pre&gt;">
    <properties key="template.category" value="Zero Gecko 3200 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32ZG_STK3200/examples/freertos_blink/SimplicityStudio/STK3200_freertos_blink.slsproj,../hardware/kit/EFM32ZG_STK3200/examples/freertos_blink/iar/freertos_blink.eww"/>
    <properties key="core.boardCompatibility" value="brd2010a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.zg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3200_freertos_tickless" description="&lt;h1&gt;&lt;b&gt;FreeRTOS - Tickless example&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses FreeRTOS to drive and display images on the Sharp &#xD;&#xA;Memory LCD. The example will create two tasks. One task is drawing a different &#xD;&#xA;image to the LCD every 3 seconds, while the other task is toggling the &#xD;&#xA;EXTCOMIN pin on the Sharp Memory LCD.&#xD;&#xA;&#xD;&#xA;FreeRTOS is configured using the FreeRTOSConfig.h file in the example project &#xD;&#xA;to use the tickless idle functionality. So when FreeRTOS is idle it will enter &#xD;&#xA;EM2 and use the RTC to wakeup on the next event.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32ZG_STK3200 Starter Kit&#xD;&#xA;Device: EFM32ZG222F32&lt;/pre&gt;">
    <properties key="template.category" value="Zero Gecko 3200 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32ZG_STK3200/examples/freertos_tickless/SimplicityStudio/STK3200_freertos_tickless.slsproj,../hardware/kit/EFM32ZG_STK3200/examples/freertos_tickless/iar/freertos_tickless.eww"/>
    <properties key="core.boardCompatibility" value="brd2010a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.zg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3200_glib" description="&lt;h1&gt;&lt;b&gt;GLIB example using the Sharp Memory LCD on the EFM32ZG-STK3200.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the GLIB library and the DISPLAY device driver&#xD;&#xA;together with EFM32 CMSIS including EMLIB and board support package support&#xD;&#xA;functions/drivers to demonstrate driving the Sharp Memory LCD display on&#xD;&#xA;the EFM32ZG_STK3200 kit.&#xD;&#xA;&#xD;&#xA;The user can switch trough different GLIB example screens by pushing the PB1 button.&#xD;&#xA;The user can reset the demo by pushing the PB0 button.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32ZG-STK3200 Development Kit&#xD;&#xA;Device: EFM32ZG222F32&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Zero Gecko 3200 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32ZG_STK3200/examples/glib/SimplicityStudio/STK3200_glib.slsproj,../hardware/kit/EFM32ZG_STK3200/examples/glib/arm/glib.uvprojx,../hardware/kit/EFM32ZG_STK3200/examples/glib/iar/glib.eww"/>
    <properties key="core.boardCompatibility" value="brd2010a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.zg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3200_inttemp" description="&lt;h1&gt;&lt;b&gt;Internal temperature sensor example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS and emlib to demonstrate&#xD;&#xA;the usage of the internal temperature sensor on EFM32 Zero Gecko devices.&#xD;&#xA;&#xD;&#xA;Measurement results are presented on the LCD display, hit PB0 to display&#xD;&#xA;values in Celsius (default) or PB1 for Fahrenheit.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32ZG_STK3200 Starter Kit&#xD;&#xA;Device: EFM32ZG222F32&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Zero Gecko 3200 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32ZG_STK3200/examples/inttemp/SimplicityStudio/STK3200_inttemp.slsproj,../hardware/kit/EFM32ZG_STK3200/examples/inttemp/arm/inttemp.uvprojx,../hardware/kit/EFM32ZG_STK3200/examples/inttemp/iar/inttemp.eww"/>
    <properties key="core.boardCompatibility" value="brd2010a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.zg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3200_leuart" description="&lt;h1&gt;&lt;b&gt;LEUART/DMA in Energy mode2 output example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project reads and sends the data back to terminal using LEUART&#xA;while staying in EM2.&#xA;&#xA;It uses the EFM32 CMSIS and emlib, to demonstrate the&#xA;use of LEUART communication using DMA under the EM2 on the &#xA;EFM32ZG_STK3200 Starter Kit.&#xA;&#xA;The LEUART is configured to be used with DMA under EM2.&#xA;The terminal configuration is 9600-8-N-1.&#xA;The DMA is configured to handle read and write data bytes from LEUART under EM2.&#xA;&#xA;Testing:&#xA;1. Use the expansion header to connect the LEUART to your PC.&#xA;2. Pin Configuration:&#xA;	2.1. Pin-12 (PD4) LEUART0_TX&#xA;	2.2. Pin-14 (PD5) LEUART0_RX&#xA;	2.3. Pin-1 Gnd&#xA;&#xA;3. Configure terminal to 9600-8-N-1.&#xA;4. Enter characters from your keyboard and see if you receive the echo on the terminal.&#xA;5. Check the average current consumption is equal to EM2 on Energy Profiler.&#xA;&#xA;Board:  Silicon Labs EFM32ZG_STK3200 Starter Kit&#xA;Device: EFM32ZG222F32&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Zero Gecko 3200 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32ZG_STK3200/examples/leuart/SimplicityStudio/STK3200_leuart.slsproj,../hardware/kit/EFM32ZG_STK3200/examples/leuart/arm/leuart.uvprojx,../hardware/kit/EFM32ZG_STK3200/examples/leuart/iar/leuart.eww"/>
    <properties key="core.boardCompatibility" value="brd2010a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.zg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3200_powertest" description="&lt;h1&gt;&lt;b&gt;Power test example, running demonstration of energy modes.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use EFM32 CMSIS and the emlib peripheral library&#xD;&#xA;to demonstrate the use of the various Energy Modes available on the&#xD;&#xA;EFM32ZG222F32. When running this example, the EnergyAware Profiler tool&#xD;&#xA;in Simplicity Studio can be used to show the power consumption of each&#xD;&#xA;energy mode.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32ZG-STK3200 Starter Kit&#xD;&#xA;Device: EFM32ZG222F32&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Zero Gecko 3200 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32ZG_STK3200/examples/powertest/SimplicityStudio/STK3200_powertest.slsproj,../hardware/kit/EFM32ZG_STK3200/examples/powertest/arm/powertest.uvprojx,../hardware/kit/EFM32ZG_STK3200/examples/powertest/iar/powertest.eww"/>
    <properties key="core.boardCompatibility" value="brd2010a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.zg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3200_rtx_blink" description="&lt;h1&gt;&lt;b&gt;Keil RTX RTOS - Blink example&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the Keil RTX RTOS, and gives a basic demonstration&#xD;&#xA;of using two tasks to blink the LEDs on the board.&#xD;&#xA;This example is intended as a skeleton for new projects using Keil RTX.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32ZG-STK3200 Development Kit&#xD;&#xA;Device: EFM32ZG222F32&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Zero Gecko 3200 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32ZG_STK3200/examples/rtx_blink/SimplicityStudio/STK3200_rtx_blink.slsproj,../hardware/kit/EFM32ZG_STK3200/examples/rtx_blink/arm/rtx_blink.uvprojx,../hardware/kit/EFM32ZG_STK3200/examples/rtx_blink/iar/rtx_blink.eww"/>
    <properties key="core.boardCompatibility" value="brd2010a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.zg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/rtx_blink.c"/>
  </descriptors>
  <descriptors label="STK3200_rtx_tickless" description="&lt;h1&gt;&lt;b&gt;Keil RTX RTOS - tick-less example&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the Keil RTX RTOS, and gives a basic demonstration&#xD;&#xA;of one task that displays pictures on memory LCD and main task that&#xD;&#xA;periodically refresh it. The RTX is configured in tick-less mode, going into &#xD;&#xA;EM2 when no tasks are active. This example is intended as a skeleton for new &#xD;&#xA;projects using Keil RTX for energy aware applications.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32ZG-STK3200 Development Kit&#xD;&#xA;Device: EFM32ZG222F32&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Zero Gecko 3200 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32ZG_STK3200/examples/rtx_tickless/SimplicityStudio/STK3200_rtx_tickless.slsproj,../hardware/kit/EFM32ZG_STK3200/examples/rtx_tickless/arm/rtx_tickless.uvprojx,../hardware/kit/EFM32ZG_STK3200/examples/rtx_tickless/iar/rtx_tickless.eww"/>
    <properties key="core.boardCompatibility" value="brd2010a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.zg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/rtx_tickless.c"/>
  </descriptors>
  <descriptors label="STK3200_rtx_tickless_nolcd" description="&lt;h1&gt;&lt;b&gt;Keil RTX RTOS - tick-less example with LCD off&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example is modification of rtx_tickless to demonstrate ultra low power consumption &#xD;&#xA;of Gecko processors in connection with RTX RTOS. Comparing to rtx_tickless example it has LCD&#xD;&#xA;turned off. Low frequency crystal oscillator was disabled and low frequency RC oscillator&#xD;&#xA;used instead to lower energy consumption even more.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;This example project uses the Keil RTX RTOS, and gives a basic demonstration&#xD;&#xA;of using single, dummy task that is waken up periodically.&#xD;&#xA;The RTX is configured in tick-less mode, going into EM2 when&#xD;&#xA;no tasks are active. This example is intended as a skeleton for new projects&#xD;&#xA;using Keil RTX for energy aware applications.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32ZG-STK3200 Development Kit&#xD;&#xA;Device: EFM32ZG222F32&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Zero Gecko 3200 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32ZG_STK3200/examples/rtx_tickless_nolcd/SimplicityStudio/STK3200_rtx_tickless_nolcd.slsproj,../hardware/kit/EFM32ZG_STK3200/examples/rtx_tickless_nolcd/arm/rtx_tickless_nolcd.uvprojx,../hardware/kit/EFM32ZG_STK3200/examples/rtx_tickless_nolcd/iar/rtx_tickless_nolcd.eww"/>
    <properties key="core.boardCompatibility" value="brd2010a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.zg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/rtx_tickless.c"/>
  </descriptors>
  <descriptors label="STK3200_spaceinvaders" description="&lt;h1&gt;&lt;b&gt;Space Invaders game using the Memory LCD on the EFM32ZG-STK3200.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS including emlib and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the Sharp Memory LCD display on the EFM32ZG_STK3200 kit.&#xD;&#xA;&#xD;&#xA;Game instructions are displayed on the startup screen.&#xD;&#xA;&#xD;&#xA;For debug builds the game may run slow because they are not optimized&#xD;&#xA;for speed. The user should build and run the release builds for&#xD;&#xA;optimized performance.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32ZG-STK3200 Development Kit&#xD;&#xA;Device: EFM32ZG222F32&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Zero Gecko 3200 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32ZG_STK3200/examples/spaceinvaders/SimplicityStudio/STK3200_spaceinvaders.slsproj,../hardware/kit/EFM32ZG_STK3200/examples/spaceinvaders/arm/spaceinvaders.uvprojx,../hardware/kit/EFM32ZG_STK3200/examples/spaceinvaders/iar/spaceinvaders.eww"/>
    <properties key="core.boardCompatibility" value="brd2010a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.zg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3200_textdisplay" description="&lt;h1&gt;&lt;b&gt;Printf output on Sharp Memory LCD LS013B7DH03.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS including emlib and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the Sharp Memory LCD display on the EFM32 Zero Gecko. In this case the&#xD;&#xA;display is used as output from a regular printf in the application, as&#xD;&#xA;an alternative to the RS232 port.&#xD;&#xA;&#xD;&#xA;The user can customize the behaviour of the DISPLAY driver by changing&#xD;&#xA;configuration macros in displayconfigapp.h.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32ZG-STK3200 Development Kit&#xD;&#xA;Device: EFM32ZG222F32&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Zero Gecko 3200 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32ZG_STK3200/examples/textdisplay/SimplicityStudio/STK3200_textdisplay.slsproj,../hardware/kit/EFM32ZG_STK3200/examples/textdisplay/arm/textdisplay.uvprojx,../hardware/kit/EFM32ZG_STK3200/examples/textdisplay/iar/textdisplay.eww"/>
    <properties key="core.boardCompatibility" value="brd2010a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.zg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3200_touch" description="&lt;h1&gt;&lt;b&gt;Capacitive touch example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example demonstrates the capacitive touch capability&#xD;&#xA;of the EFM32 Zero Gecko Starter Kit.&#xD;&#xA;&#xD;&#xA;It demonstrates the use of CAPSENSE and DISPLAY drivers.&#xD;&#xA;Pressing T1/T2 touch pads will decrease/increase the counter shown on the LCD.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32ZG_STK3200 Starter Kit&#xD;&#xA;Device: EFM32ZG222F32&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Zero Gecko 3200 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32ZG_STK3200/examples/touch/SimplicityStudio/STK3200_touch.slsproj,../hardware/kit/EFM32ZG_STK3200/examples/touch/arm/touch.uvprojx,../hardware/kit/EFM32ZG_STK3200/examples/touch/iar/touch.eww"/>
    <properties key="core.boardCompatibility" value="brd2010a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.zg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3200_weatherstation" description="&lt;h1&gt;&lt;b&gt;Weatherstation using the Sensor add-on board on the EFM32ZG-STK3200.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS including emlib and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the Sharp Memory LCD display on the EFM32ZG_STK3200 kit. In addition, it&#xD;&#xA;demonstrates the use of Silabs I2C based sensors on the expansion board&#xD;&#xA;header.&#xD;&#xA;&#xD;&#xA;You must have a Silabs Sensor add-on board to make use of this demo.&#xD;&#xA;Once the demo is started, hold your hand over the gesture sensor. Once&#xD;&#xA;the sensor detects your hand the display will become active.&#xD;&#xA;&#xD;&#xA;Swipe left and right over the sensor to scroll through temperature, humidity&#xD;&#xA;and UV index. On the temperature screen, you can swipe up or down to change&#xD;&#xA;between Fahrenheit or Celcius.&#xD;&#xA;&#xD;&#xA;Note: Due to the size of this example, you might need to enable compiler&#xD;&#xA;optimizations to be able to fit the entire binary in the 32k of flash!&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32ZG-STK3200 Development Kit and Sensor Add-on board&#xD;&#xA;Device: EFM32ZG222F32&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Zero Gecko 3200 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/EFM32ZG_STK3200/examples/weatherstation/SimplicityStudio/STK3200_weatherstation.slsproj,../hardware/kit/EFM32ZG_STK3200/examples/weatherstation/arm/weatherstation.uvprojx,../hardware/kit/EFM32ZG_STK3200/examples/weatherstation/iar/weatherstation.eww"/>
    <properties key="core.boardCompatibility" value="brd2010a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.zg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/weatherstation.c"/>
  </descriptors>
  <descriptors label="SLSTK3400A_blink" description="&lt;h1&gt;&lt;b&gt;Blink example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use EFM32 CMSIS and the emlib peripheral library to&#xD;&#xA;demonstrate the use of the LED's on the starter kit. This example is intended as&#xD;&#xA;a skeleton for new projects.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLSTK3400A_EFM32HG Starter Kit&#xD;&#xA;Device: EFM32HG322F64&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Happy Gecko 3400 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLSTK3400A_EFM32HG/examples/blink/SimplicityStudio/SLSTK3400A_blink.slsproj,../hardware/kit/SLSTK3400A_EFM32HG/examples/blink/arm/blink.uvprojx,../hardware/kit/SLSTK3400A_EFM32HG/examples/blink/iar/blink.eww"/>
    <properties key="core.boardCompatibility" value="brd2012a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.hg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/blink.c"/>
  </descriptors>
  <descriptors label="SLSTK3400A_clock" description="&lt;h1&gt;&lt;b&gt;Analog and digital clock example using the Memory LCD on the SLSTK3400A-EFM32HG.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS including emlib and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the Sharp Memory LCD display on the SLSTK3400A_EFM32HG kit.&#xD;&#xA;&#xD;&#xA;The user can switch between analog and digital clock modes by pushing&#xD;&#xA;the PB0 button.&#xD;&#xA;&#xD;&#xA;The user can increment the second count by pushing the PB1 button.&#xD;&#xA;The minute count can be incremented by pushing the PB1 button for more&#xD;&#xA;than 2 seconds.&#xD;&#xA;&#xD;&#xA;The analog clock mode demonstrates the use of GLIB to draw hour, minute&#xD;&#xA;and second pointers on the background which is a bitmap in flash memory.&#xD;&#xA;&#xD;&#xA;The digital clock demonstrates the 16x20 font (including number characters&#xD;&#xA;only) of the textdisplay driver.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLSTK3400A-EFM32HG Development Kit&#xD;&#xA;Device: EFM32HG322F64&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Happy Gecko 3400 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLSTK3400A_EFM32HG/examples/clock/SimplicityStudio/SLSTK3400A_clock.slsproj,../hardware/kit/SLSTK3400A_EFM32HG/examples/clock/arm/clock.uvprojx,../hardware/kit/SLSTK3400A_EFM32HG/examples/clock/iar/clock.eww"/>
    <properties key="core.boardCompatibility" value="brd2012a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.hg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3400A_cpt007b_demo" description="&lt;h1&gt;&lt;b&gt;CPT007B Demo&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This demo demonstrates the capacitive button function of CPT007B fixed function&#xD;&#xA;board. This demo runs on the EFM32 STK, and communicates with CPT007B through&#xD;&#xA;the GPIO pins on the EXP header. Virtual buttons on STK's LCD screen indicate&#xD;&#xA;whether the capacitive sensing buttons on CPT007B are pressed or released.&#xD;&#xA;This demo supports up to 7 capacitive buttons on CPT007B&#xD;&#xA; &#xD;&#xA;Board:  Silicon Labs SLSTK3400A_EFM32HG Starter Kit and CPT007B Evaluation Board&#xD;&#xA;Device: EFM32HG322F64&lt;/pre&gt;">
    <properties key="template.category" value="Happy Gecko 3400 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLSTK3400A_EFM32HG/examples/cpt007b/SimplicityStudio/SLSTK3400A_cpt007b_demo.slsproj,../hardware/kit/SLSTK3400A_EFM32HG/examples/cpt007b/arm/cpt007b_demo.uvprojx,../hardware/kit/SLSTK3400A_EFM32HG/examples/cpt007b/iar/cpt007b_demo.eww"/>
    <properties key="core.boardCompatibility" value="brd2012a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.hg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/cpt007b_demo.c"/>
  </descriptors>
  <descriptors label="SLSTK3400A_cpt112s_demo" description="&lt;h1&gt;&lt;b&gt;CPT112S Demo&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This demo demonstrates the capacitive button function of CPT112S fixed&#xD;&#xA;function board. This demo runs on the EFM32 STK,and communicates with&#xD;&#xA;CPT112S through the SMBUS pins on the EXP header. Virtual buttons on&#xD;&#xA;STK's LCD screen indicate whether the capacitive sensing buttons on CPT112S&#xD;&#xA;are pressed or released.&#xD;&#xA; &#xD;&#xA;This demo supports 11 buttons on the CPT112S device.(The CS11 button is&#xD;&#xA;disabled in the default configuration of the board to enable the buzzer)&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLSTK3400A_EFM32HG Starter Kit and CPT112S Evaluation Board&#xD;&#xA;Device: EFM32HG322F64&lt;/pre&gt;">
    <properties key="template.category" value="Happy Gecko 3400 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLSTK3400A_EFM32HG/examples/cpt112s/SimplicityStudio/SLSTK3400A_cpt112s_demo.slsproj,../hardware/kit/SLSTK3400A_EFM32HG/examples/cpt112s/arm/cpt112s_demo.uvprojx,../hardware/kit/SLSTK3400A_EFM32HG/examples/cpt112s/iar/cpt112s_demo.eww"/>
    <properties key="core.boardCompatibility" value="brd2012a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.hg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/cpt112s_demo.c"/>
  </descriptors>
  <descriptors label="SLSTK3400A_cslib" description="&lt;h1&gt;&lt;b&gt;CSLIB example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the capacitive sensing firmware library to sample&#xD;&#xA;capacitive sensing buttons on the STK.  Real-time sample information, touch&#xD;&#xA;qualification status, and other state variables can be displayed and examined&#xD;&#xA;in the Capacitive Sensing Profiler tool.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLSTK3400A_EFM32HG Starter Kit&#xD;&#xA;Device: EFM32HG322F64&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Happy Gecko 3400 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLSTK3400A_EFM32HG/examples/cslib/SimplicityStudio/SLSTK3400A_cslib.slsproj,../hardware/kit/SLSTK3400A_EFM32HG/examples/cslib/arm/cslib.uvprojx,../hardware/kit/SLSTK3400A_EFM32HG/examples/cslib/iar/cslib.eww"/>
    <properties key="core.boardCompatibility" value="brd2012a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.hg.*"/>
    <properties key="template.initiallyOpenedResource" value="cslib/SimplicityStudio/workspace/STK3200_cslib/app/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3400A_emlcd" description="&lt;h1&gt;&lt;b&gt;Energy Modes with LCD display example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use EFM32 CMSIS and the emlib peripheral library to&#xD;&#xA;demonstrate the use of the LCD, RTC (real time counter), GPIO and&#xD;&#xA;various Energy Modes on the starter kit.&#xD;&#xA;&#xD;&#xA;The example will cycle through Energy Mode EM0-EM3, staying one second in&#xD;&#xA;each mode. PB0 can be pressed anytime to enter EM4.&#xD;&#xA;Wakeup from EM4 is either by reset pushbutton or by GPIO pin (port C bit 9)&#xD;&#xA;connected to pushbutton PB1.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLSTK3400A-EFM32HG Development Kit&#xD;&#xA;Device: EFM32HG322F64&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Happy Gecko 3400 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLSTK3400A_EFM32HG/examples/emlcd/SimplicityStudio/SLSTK3400A_emlcd.slsproj,../hardware/kit/SLSTK3400A_EFM32HG/examples/emlcd/arm/emlcd.uvprojx,../hardware/kit/SLSTK3400A_EFM32HG/examples/emlcd/iar/emlcd.eww"/>
    <properties key="core.boardCompatibility" value="brd2012a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.hg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/emlcd.c"/>
  </descriptors>
  <descriptors label="SLSTK3400A_emode" description="&lt;h1&gt;&lt;b&gt;Select a single energy mode, and stay there.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 emlib and demonstrates the use of&#xD;&#xA;the LCD display, RTC (real time counter), GPIO and various Energy&#xD;&#xA;Modes (EM).&#xD;&#xA;&#xD;&#xA;Use PB1 to cycle through the energy mode tests available.&#xD;&#xA;Press PB0 to start selected test.&#xD;&#xA;&#xD;&#xA;This demo application has been made to give a quick demo of the&#xD;&#xA;energyAware Profiler from Silicon Labs and to reproduce the different &#xD;&#xA;energy modes seen in the EFM32 datasheet current consumption table. &#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLSTK3400A-EFM32HG Development Kit&#xD;&#xA;Device: EFM32HG322F64&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Happy Gecko 3400 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLSTK3400A_EFM32HG/examples/emode/SimplicityStudio/SLSTK3400A_emode.slsproj,../hardware/kit/SLSTK3400A_EFM32HG/examples/emode/arm/emode.uvprojx,../hardware/kit/SLSTK3400A_EFM32HG/examples/emode/iar/emode.eww"/>
    <properties key="core.boardCompatibility" value="brd2012a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.hg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3400A_energy" description="&lt;h1&gt;&lt;b&gt;Board Support Package API demo for voltage and current readout.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS and demonstrates the use of&#xD;&#xA;the STK BSP.&#xD;&#xA;&#xD;&#xA;The BSP is used to read out the current consumption and VMCU voltage level&#xD;&#xA;from the board controller. The readings are printed to the display.&#xD;&#xA;&#xD;&#xA;The CPU runs from the HFRCO clock and change HFRCO frequency every few &#xD;&#xA;seconds to show how CPU frequency affects power consumption.&#xD;&#xA;&#xD;&#xA;The BSP use the LEUART at 115800-N-1 to communicate with the board controller.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLSTK3400A_EFM32HG Starter Kit&#xD;&#xA;Device: EFM32HG322F64&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Happy Gecko 3400 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLSTK3400A_EFM32HG/examples/energy/SimplicityStudio/SLSTK3400A_energy.slsproj,../hardware/kit/SLSTK3400A_EFM32HG/examples/energy/arm/energy.uvprojx,../hardware/kit/SLSTK3400A_EFM32HG/examples/energy/iar/energy.eww"/>
    <properties key="core.boardCompatibility" value="brd2012a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.hg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3400A_glib" description="&lt;h1&gt;&lt;b&gt;GLIB example using the Sharp Memory LCD on the SLSTK3400A-EFM32HG.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the GLIB library and the DISPLAY device driver&#xD;&#xA;together with EFM32 CMSIS including EMLIB and board support package support&#xD;&#xA;functions/drivers to demonstrate driving the Sharp Memory LCD display on&#xD;&#xA;the SLSTK3400A_EFM32HG kit.&#xD;&#xA;&#xD;&#xA;The user can switch trough different GLIB example screens by pushing the PB1 button.&#xD;&#xA;The user can reset the demo by pushing the PB0 button.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLSTK3400A-EFM32HG Development Kit&#xD;&#xA;Device: EFM32HG322F64&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Happy Gecko 3400 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLSTK3400A_EFM32HG/examples/glib/SimplicityStudio/SLSTK3400A_glib.slsproj,../hardware/kit/SLSTK3400A_EFM32HG/examples/glib/arm/glib.uvprojx,../hardware/kit/SLSTK3400A_EFM32HG/examples/glib/iar/glib.eww"/>
    <properties key="core.boardCompatibility" value="brd2012a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.hg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3400A_inttemp" description="&lt;h1&gt;&lt;b&gt;Internal temperature sensor example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS and emlib to demonstrate&#xD;&#xA;the usage of the internal temperature sensor on EFM32 Happy Gecko devices.&#xD;&#xA;&#xD;&#xA;Measurement results are presented on the LCD display, hit PB0 to display&#xD;&#xA;values in Celsius (default) or PB1 for Fahrenheit.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLSTK3400A_EFM32HG Starter Kit&#xD;&#xA;Device: EFM32HG322F64&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Happy Gecko 3400 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLSTK3400A_EFM32HG/examples/inttemp/SimplicityStudio/SLSTK3400A_inttemp.slsproj,../hardware/kit/SLSTK3400A_EFM32HG/examples/inttemp/arm/inttemp.uvprojx,../hardware/kit/SLSTK3400A_EFM32HG/examples/inttemp/iar/inttemp.eww"/>
    <properties key="core.boardCompatibility" value="brd2012a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.hg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3400A_leuart" description="&lt;h1&gt;&lt;b&gt;LEUART/DMA in Energy mode2 output example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project reads and sends the data back to terminal using LEUART&#xD;&#xA;while staying in EM2.&#xD;&#xA;&#xD;&#xA;It uses the EFM32 CMSIS and emlib, to demonstrate the&#xD;&#xA;use of LEUART communication using DMA under the EM2 on the &#xD;&#xA;SLSTK3400A_EFM32HG Starter Kit.&#xD;&#xA;&#xD;&#xA;The LEUART is configured to be used with DMA under EM2.&#xD;&#xA;The terminal configuration is 9600-8-N-1.&#xD;&#xA;The DMA is configured to handle read and write data bytes from LEUART under EM2.&#xD;&#xA;&#xD;&#xA;Testing:&#xD;&#xA;1. Use the expansion header to connect the LEUART to your PC.&#xD;&#xA;2. Pin Configuration:&#xD;&#xA;	2.1. Pin-12 (PD4) LEUART0_TX&#xD;&#xA;	2.2. Pin-14 (PD5) LEUART0_RX&#xD;&#xA;	2.3. Pin-1 Gnd&#xD;&#xA;&#xD;&#xA;3. Configure terminal to 9600-8-N-1.&#xD;&#xA;4. Enter characters from your keyboard and see if you receive the echo on the terminal.&#xD;&#xA;5. Check the average current consumption is equal to EM2 on Energy Profiler.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLSTK3400A_EFM32HG Starter Kit&#xD;&#xA;Device: EFM32HG322F64&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Happy Gecko 3400 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLSTK3400A_EFM32HG/examples/leuart/SimplicityStudio/SLSTK3400A_leuart.slsproj,../hardware/kit/SLSTK3400A_EFM32HG/examples/leuart/arm/leuart.uvprojx,../hardware/kit/SLSTK3400A_EFM32HG/examples/leuart/iar/leuart.eww"/>
    <properties key="core.boardCompatibility" value="brd2012a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.hg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3400A_powertest" description="&lt;h1&gt;&lt;b&gt;Power test example, running demonstration of energy modes.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use EFM32 CMSIS and the emlib peripheral library&#xD;&#xA;to demonstrate the use of the various Energy Modes available on the&#xD;&#xA;EFM32HG322F64. When running this example, the EnergyAware Profiler tool&#xD;&#xA;in Simplicity Studio can be used to show the power consumption of each&#xD;&#xA;energy mode.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLSTK3400A-EFM32HG Starter Kit&#xD;&#xA;Device: EFM32HG322F64&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Happy Gecko 3400 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLSTK3400A_EFM32HG/examples/powertest/SimplicityStudio/SLSTK3400A_powertest.slsproj,../hardware/kit/SLSTK3400A_EFM32HG/examples/powertest/arm/powertest.uvprojx,../hardware/kit/SLSTK3400A_EFM32HG/examples/powertest/iar/powertest.eww"/>
    <properties key="core.boardCompatibility" value="brd2012a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.hg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3400A_rtx_blink" description="&lt;h1&gt;&lt;b&gt;Keil RTX RTOS - Blink example&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the Keil RTX RTOS, and gives a basic demonstration&#xD;&#xA;of using two tasks to blink the LEDs on the board.&#xD;&#xA;This example is intended as a skeleton for new projects using Keil RTX.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLSTK3400A-EFM32HG Development Kit&#xD;&#xA;Device: EFM32HG322F64&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Happy Gecko 3400 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLSTK3400A_EFM32HG/examples/rtx_blink/SimplicityStudio/SLSTK3400A_rtx_blink.slsproj,../hardware/kit/SLSTK3400A_EFM32HG/examples/rtx_blink/arm/rtx_blink.uvprojx,../hardware/kit/SLSTK3400A_EFM32HG/examples/rtx_blink/iar/rtx_blink.eww"/>
    <properties key="core.boardCompatibility" value="brd2012a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.hg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/rtx_blink.c"/>
  </descriptors>
  <descriptors label="SLSTK3400A_spaceinvaders" description="&lt;h1&gt;&lt;b&gt;Space Invaders game using the Memory LCD on the SLSTK3400A-EFM32HG.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS including emlib and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the Sharp Memory LCD display on the SLSTK3400A_EFM32HG kit.&#xD;&#xA;&#xD;&#xA;Game instructions are displayed on the startup screen.&#xD;&#xA;&#xD;&#xA;For debug builds the game may run slow because they are not optimized&#xD;&#xA;for speed. The user should build and run the release builds for&#xD;&#xA;optimized performance.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLSTK3400A-EFM32HG Development Kit&#xD;&#xA;Device: EFM32HG322F64&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Happy Gecko 3400 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLSTK3400A_EFM32HG/examples/spaceinvaders/SimplicityStudio/SLSTK3400A_spaceinvaders.slsproj,../hardware/kit/SLSTK3400A_EFM32HG/examples/spaceinvaders/arm/spaceinvaders.uvprojx,../hardware/kit/SLSTK3400A_EFM32HG/examples/spaceinvaders/iar/spaceinvaders.eww"/>
    <properties key="core.boardCompatibility" value="brd2012a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.hg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3400A_spi_display" description="&lt;h1&gt;&lt;b&gt;Toggle all pixels on the LCD display every 500ms with low energy peripherals.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses EFM32 CMSIS and the emlib peripheral library to &#xD;&#xA;demonstrate driving the Sharp Memory LCD display on the STK3200 kit while &#xD;&#xA;staying in low energy modes.&#xD;&#xA;&#xD;&#xA;A DMA channel is used to transfer frame buffers to the LCD display with the &#xD;&#xA;SPI protocol, staying in EM1 during the data transfer and in EM3 while&#xD;&#xA;waiting for the next frame update. An RTC interrupt toggles the EXTCOM pin &#xD;&#xA;60 times per second as required by the display.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs STK3200 Starter Kit&#xD;&#xA;Device: EFM32HG322F64&lt;/pre&gt;">
    <properties key="template.category" value="Happy Gecko 3400 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLSTK3400A_EFM32HG/examples/spi_display/SimplicityStudio/SLSTK3400A_spi_display.slsproj,../hardware/kit/SLSTK3400A_EFM32HG/examples/spi_display/arm/spi_display.uvprojx,../hardware/kit/SLSTK3400A_EFM32HG/examples/spi_display/iar/spi_display.eww"/>
    <properties key="core.boardCompatibility" value="brd2012a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.hg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3400A_textdisplay" description="&lt;h1&gt;&lt;b&gt;Printf output on Sharp Memory LCD LS013B7DH03.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS including emlib and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the Sharp Memory LCD display on the EFM32 Happy Gecko. In this case the&#xD;&#xA;display is used as output from a regular printf in the application, as&#xD;&#xA;an alternative to the RS232 port.&#xD;&#xA;&#xD;&#xA;The user can customize the behaviour of the DISPLAY driver by changing&#xD;&#xA;configuration macros in displayconfigapp.h.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLSTK3400A-EFM32HG Development Kit&#xD;&#xA;Device: EFM32HG322F64&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Happy Gecko 3400 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLSTK3400A_EFM32HG/examples/textdisplay/SimplicityStudio/SLSTK3400A_textdisplay.slsproj,../hardware/kit/SLSTK3400A_EFM32HG/examples/textdisplay/arm/textdisplay.uvprojx,../hardware/kit/SLSTK3400A_EFM32HG/examples/textdisplay/iar/textdisplay.eww"/>
    <properties key="core.boardCompatibility" value="brd2012a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.hg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3400A_touch" description="&lt;h1&gt;&lt;b&gt;Capacitive touch example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example demonstrates the capacitive touch capability&#xD;&#xA;of the EFM32 Happy Gecko Starter Kit.&#xD;&#xA;&#xD;&#xA;It demonstrates the use of CAPSENSE and DISPLAY drivers.&#xD;&#xA;Pressing T1/T2 touch pads will decrease/increase the counter shown on the LCD.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLSTK3400A_EFM32HG Starter Kit&#xD;&#xA;Device: EFM32HG322F64&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Happy Gecko 3400 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLSTK3400A_EFM32HG/examples/touch/SimplicityStudio/SLSTK3400A_touch.slsproj,../hardware/kit/SLSTK3400A_EFM32HG/examples/touch/arm/touch.uvprojx,../hardware/kit/SLSTK3400A_EFM32HG/examples/touch/iar/touch.eww"/>
    <properties key="core.boardCompatibility" value="brd2012a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.hg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3400A_weatherstation" description="&lt;h1&gt;&lt;b&gt;Weatherstation using the Sensor add-on board on the SLSTK3400A-EFM32HG.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS including emlib and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the Sharp Memory LCD display on the SLSTK3400A_EFM32HG kit. In addition, it&#xD;&#xA;demonstrates the use of Silabs I2C based sensors on the expansion board&#xD;&#xA;header.&#xD;&#xA;&#xD;&#xA;You must have a Silabs Sensor add-on board to make use of this demo.&#xD;&#xA;Once the demo is started, hold your hand over the gesture sensor. Once&#xD;&#xA;the sensor detects your hand the display will become active.&#xD;&#xA;&#xD;&#xA;Swipe left and right over the sensor to scroll through temperature, humidity&#xD;&#xA;and UV index. On the temperature screen, you can swipe up or down to change&#xD;&#xA;between Fahrenheit or Celcius.&#xD;&#xA;&#xD;&#xA;Note: Due to the size of this example, you might need to enable compiler&#xD;&#xA;optimizations to be able to fit the entire binary in the 32k of flash!&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLSTK3400A-EFM32HG Development Kit and Sensor Add-on board&#xD;&#xA;Device: EFM32HG322F64&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Happy Gecko 3400 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLSTK3400A_EFM32HG/examples/weatherstation/SimplicityStudio/SLSTK3400A_weatherstation.slsproj,../hardware/kit/SLSTK3400A_EFM32HG/examples/weatherstation/arm/weatherstation.uvprojx,../hardware/kit/SLSTK3400A_EFM32HG/examples/weatherstation/iar/weatherstation.eww"/>
    <properties key="core.boardCompatibility" value="brd2012a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.hg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/weatherstation.c"/>
  </descriptors>
  <descriptors label="SLSTK3400A_humitemp" description="&lt;h1&gt;&lt;b&gt;Humidity and temperature demo using the on-board si7021 sensor on the SLSTK3400A_EFM32HG board.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS including emlib and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the Sharp Memory LCD display and the si7021 humidity and temperature sensor on the &#xD;&#xA;SLSTK3400A_EFM32HG board.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLSTK3400A_EFM32HG starter kit.&#xD;&#xA;Device: EFM32HG322F64&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Happy Gecko 3400 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLSTK3400A_EFM32HG/examples/humitemp/SimplicityStudio/SLSTK3400A_humitemp.slsproj,../hardware/kit/SLSTK3400A_EFM32HG/examples/humitemp/arm/humitemp.uvprojx,../hardware/kit/SLSTK3400A_EFM32HG/examples/humitemp/iar/humitemp.eww"/>
    <properties key="core.boardCompatibility" value="brd2012a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.hg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/humitemp.c"/>
  </descriptors>
  <descriptors label="SLSTK3400A_usbdcdc" description="&lt;h1&gt;&lt;b&gt;USB CDC virtual COM port example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use the EFM32 USB Device protocol stack&#xD;&#xA;and implements an USB CDC based virtual COM port.&#xD;&#xA;&#xD;&#xA;USART1 on the STK is used as the physical COM port.&#xD;&#xA;Any data sent to the virtual CDC COM port is transmitted on USART1.&#xD;&#xA;Any data received on USART1 is transmitted to the virtial port.&#xD;&#xA;Connect a terminal to the TTL-level serialport (115200-N-8-1) on EXP port pins&#xD;&#xA;3 (Tx)  and 5 (Rx).&#xD;&#xA;&#xD;&#xA;When connecting the mcu plugin boards USB port to a Windows host PC,&#xD;&#xA;the new hardware &quot;Wizard&quot; may or may not prompt you to provide a driver&#xD;&#xA;installation file (.inf file) depending on your Windows version.&#xD;&#xA;&#xD;&#xA;Manually direct Windows to look for drivers in the directory where you have&#xD;&#xA;unpacked your copy of the Silabs-CDC_Install.zip driver file.&#xD;&#xA;This can be done with the new device &quot;Wizard&quot; which might pop up after device&#xD;&#xA;insertion, or you can open &quot;Device Manager&quot;, left click on the new device and&#xD;&#xA;select &quot;Update Driver Software...&quot;.&#xD;&#xA;&#xD;&#xA;Some versions of Windows wont allow you to install unsigned drivers. If you&#xD;&#xA;suspect this, reboot the PC into &quot;Disable Driver Signature Enforcement&quot; mode.&#xD;&#xA;Win7:&#xD;&#xA;Repeatedly push F8 during boot until the boot menu appears.&#xD;&#xA;Select the &quot;Disable Driver Signature Enforcement&quot; option.&#xD;&#xA;Win10:&#xD;&#xA;Start Menu-&gt;Power button-&gt;Hold Shift key down and select Restart.&#xD;&#xA;When computer has restarted into the options menu, select:&#xD;&#xA;Troubleshoot-&gt;Advanced Option-&gt;Startup Settings-&gt;Restart-&gt;Disable driver signature enforcement&#xD;&#xA;You should now be able to install an unsigned driver.&#xD;&#xA;&#xD;&#xA;When a driver is succesfully installed, the device will be listed as a &quot;Ports&quot;&#xD;&#xA;device in Device Manager, double-click it, select the &quot;Port Settings&quot; tab and&#xD;&#xA;maybe the &quot;Advanced...&quot; button to set serial port properties.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLSTK3400A Starter Kit&#xD;&#xA;Device: EFM32HG322F64&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Happy Gecko 3400 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLSTK3400A_EFM32HG/examples/usbdcdc/SimplicityStudio/SLSTK3400A_usbdcdc.slsproj,../hardware/kit/SLSTK3400A_EFM32HG/examples/usbdcdc/arm/usbdcdc.uvprojx,../hardware/kit/SLSTK3400A_EFM32HG/examples/usbdcdc/iar/usbdcdc.eww"/>
    <properties key="core.boardCompatibility" value="brd2012a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.hg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3400A_usbdcomposite" description="&lt;h1&gt;&lt;b&gt;USB Composite Device example, HID + CDC + Vendor unique functions.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use the EFM32 USB Device protocol stack&#xD;&#xA;to implement a composite USB device with tree functions:&#xD;&#xA;&#xD;&#xA; - Human Interface Device (HID) keyboard device, implementing a one button kbd.&#xD;&#xA; - Communication device class (CDC) implementing a USB&lt;-&gt;UART bridge&#xD;&#xA; - Vendor Unique Device similar to the usbdvud example (control STK leds).&#xD;&#xA;&#xD;&#xA;As the CDC function has two interface, the CDC function use an Interface&#xD;&#xA;Association Descriptor (IAD). A composite device which use IAD's must be&#xD;&#xA;implemented using bDeviceClass=0xEF, bDeviceSubClass=2 and bDeviceProtocol=1.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;The vendor unique function (VUD).&#xD;&#xA;=================================&#xD;&#xA;Toggles user LED's 0 and 1 when receiving vendor unique class setup commands.&#xD;&#xA;Intended to be used together with the &quot;libusb&quot; device driver, and host&#xD;&#xA;application EFM32-LedApp.exe (a Windows application).&#xD;&#xA;You will find libusb and EFM32-LedApp.exe in the &quot;host&quot; folder of the usbdvud&#xD;&#xA;example. Check EFM32_Vendor_Unique_Device.inf to see how both the usbdvud&#xD;&#xA;example VID_10C4&amp;PID_0001 and this composite example VID_10C4&amp;PID_0008&amp;MI_00&#xD;&#xA;are specified.&#xD;&#xA;&#xD;&#xA;The CDC COM port function.&#xD;&#xA;==========================&#xD;&#xA;Implements an USB CDC based virtual COM port. USART1 on the DK is used as the&#xD;&#xA;physical COM port. Any data sent to the virtual CDC COM port is transmitted on&#xD;&#xA;USART1. Any data received on USART1 is transmitted to the virtual port.&#xD;&#xA;USART1 is available on the STK EXP port. EXP pin 4 is Tx, pin 6 is Rx.&#xD;&#xA;NOTE: This is a TTL level USART, DO NOT CONNECT DIRECTLY TO RS232 PORTS !&#xD;&#xA;&#xD;&#xA;The HID keyboard function.&#xD;&#xA;=================================&#xD;&#xA;Implements a single button keyboard with pushbutton PB0.&#xD;&#xA;Will transmit the string &quot;Silicon Labs -&quot;, one char for each button push.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Windows driver installation.&#xD;&#xA;============================&#xD;&#xA;The first time the composite USB device is connected to the host, Windows must&#xD;&#xA;install drivers for the VUD and CDC functions.&#xD;&#xA;&#xD;&#xA;To control the VUD function with EFM32-LedApp.exe you need to install &quot;libusb&quot;&#xD;&#xA;device driver. Manually direct Windows to look for this driver in the &quot;host&quot;&#xD;&#xA;folder of the usbdvud example.&#xD;&#xA;This can be done with the new device &quot;Wizard&quot; which might pop up after device&#xD;&#xA;insertion, or you can open &quot;Device Manager&quot;, left click on one of functions&#xD;&#xA;of the new composite device (marked with yellow exclamation mark) and&#xD;&#xA;select &quot;Update Driver Software...&quot;.&#xD;&#xA;After libusb is installed you can start EFM32-LedApp.exe to control leds on&#xD;&#xA;the DK.&#xD;&#xA;&#xD;&#xA;Similarly for the CDC function, direct Windows to look for a driver in the&#xD;&#xA;folder where you have your copy of the &quot;EFM32-Cdc.inf&quot; file (same folder as&#xD;&#xA;this readme file, unzip the Silabs-CDC_Install.zip).&#xD;&#xA;Note how the .inf file specifies interface number 2, VID_10C4&amp;PID_000A&amp;MI_02.&#xD;&#xA;When the serial port driver is succesfully installed, the device will be listed&#xD;&#xA;as a &quot;Ports&quot; device in Device Manager, double-click it, select the&#xD;&#xA;&quot;Port Settings&quot; tab and maybe the &quot;Advanced...&quot; button to set serial port&#xD;&#xA;properties.&#xD;&#xA;&#xD;&#xA;Some versions of Windows wont allow you to install unsigned drivers. If you&#xD;&#xA;suspect this, reboot the PC into &quot;Disable Driver Signature Enforcement&quot; mode.&#xD;&#xA;Win7:&#xD;&#xA;Repeatedly push F8 during boot until the boot menu appears.&#xD;&#xA;Select the &quot;Disable Driver Signature Enforcement&quot; option.&#xD;&#xA;Win10:&#xD;&#xA;Start Menu-&gt;Power button-&gt;Hold Shift key down and select Restart.&#xD;&#xA;When computer has restarted into the options menu, select:&#xD;&#xA;Troubleshoot-&gt;Advanced Option-&gt;Startup Settings-&gt;Restart-&gt;Disable driver signature enforcement&#xD;&#xA;You should now be able to install an unsigned driver.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLSTK3400A Starter Kit&#xD;&#xA;Device: EFM32HG322F64&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Happy Gecko 3400 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLSTK3400A_EFM32HG/examples/usbdcomposite/SimplicityStudio/SLSTK3400A_usbdcomposite.slsproj,../hardware/kit/SLSTK3400A_EFM32HG/examples/usbdcomposite/arm/usbdcomposite.uvprojx,../hardware/kit/SLSTK3400A_EFM32HG/examples/usbdcomposite/iar/usbdcomposite.eww"/>
    <properties key="core.boardCompatibility" value="brd2012a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.hg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3400A_usbdhidkbd" description="&lt;h1&gt;&lt;b&gt;USB LEUSB HID keyboard example. (Extends original HID keyboard example)&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 USB Device protocol stack&#xD;&#xA;and implements an USB HID class keyboard device (one button !).&#xD;&#xA;&#xD;&#xA;The HID device enumerates and immediately disables the Low Energy USB features&#xD;&#xA;(which are enabled by default in the USB protocol stack), allowing observation&#xD;&#xA;of &quot;normal&quot; power consumption on VBUS.&#xD;&#xA;&#xD;&#xA;PB0 is the keyboard button. Pressing this button will succesively write&#xD;&#xA;&quot;Silicon Labs / &quot;.&#xD;&#xA;&#xD;&#xA;PB1 is the toggle button for Low Energy Mode (LEM).  Pressing this button will&#xD;&#xA;alternate between LEM enabled/disabled.  The graphic displayed on the STK LCD&#xD;&#xA;will update to reflect this state (reads &quot;HID keyboard Device&quot; in normal mode,&#xD;&#xA;or &quot;Low-Energy USB&quot; when LEM is enabled).&#xD;&#xA;&#xD;&#xA;The example is power optimized when LEM is enabled.  With the STK power switch in&#xD;&#xA;&quot;USB&quot; position (board power is drawn from USB host via VBUS), when USB cable is plugged&#xD;&#xA;in and USB is active the current drawn from VBUS is ~8.3 mA in normal mode, or ~5.8 mA&#xD;&#xA;when LEM is enabled, of which only ~460 uA is consumed by the USB PHY.  When the cable&#xD;&#xA;is disconnected or the device is suspended, the current is less than 5 uA.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLSTK3400A Starter Kit&#xD;&#xA;Device: EFM32HG322F64&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Happy Gecko 3400 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLSTK3400A_EFM32HG/examples/usbdhidkbd/SimplicityStudio/SLSTK3400A_usbdhidkbd.slsproj,../hardware/kit/SLSTK3400A_EFM32HG/examples/usbdhidkbd/arm/usbdhidkbd.uvprojx,../hardware/kit/SLSTK3400A_EFM32HG/examples/usbdhidkbd/iar/usbdhidkbd.eww"/>
    <properties key="core.boardCompatibility" value="brd2012a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.hg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3400A_usbdmsd" description="&lt;h1&gt;&lt;b&gt;USB Mass Storage Device example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use the EFM32 USB Device protocol stack&#xD;&#xA;to implement a device Mass Storage Class device (MSD).&#xD;&#xA;&#xD;&#xA;The example implements a small 32KByte &quot;disk&quot; using internal FLASH memory.&#xD;&#xA;&#xD;&#xA;Led 0 will flash when there is traffic on the USB bus, led 1 will be on when&#xD;&#xA;the device is connected to an USB host.&#xD;&#xA;&#xD;&#xA;NOTE: The example does not check if the code segment extends into the&#xD;&#xA;32KByte &quot;disk&quot; part of flash memory. Take care when adding code to the example !&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLSTK3400A Starter Kit&#xD;&#xA;Device: EFM32HG322F64&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Happy Gecko 3400 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLSTK3400A_EFM32HG/examples/usbdmsd/SimplicityStudio/SLSTK3400A_usbdmsd.slsproj,../hardware/kit/SLSTK3400A_EFM32HG/examples/usbdmsd/arm/usbdmsd.uvprojx,../hardware/kit/SLSTK3400A_EFM32HG/examples/usbdmsd/iar/usbdmsd.eww"/>
    <properties key="core.boardCompatibility" value="brd2012a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.hg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3400A_usbdvud" description="&lt;h1&gt;&lt;b&gt;USB Vendor Unique Device example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use the EFM32 USB Device protocol stack&#xD;&#xA;and implements an USB Vendor Unique Device.&#xD;&#xA;&#xD;&#xA;The example will toggle LED's 0 and 1 when receiving vendor unique class&#xD;&#xA;setup commands.&#xD;&#xA;&#xD;&#xA;This example is intended to be used together with the &quot;libusb&quot; device driver,&#xD;&#xA;and host application EFM32-LedApp.exe (a Windows application).&#xD;&#xA;&#xD;&#xA;The first time the USB device is connected to the host, you must tell the host&#xD;&#xA;OS to install the &quot;libusb&quot; device driver.&#xD;&#xA;&#xD;&#xA;On Windows, you can follow this procedure:&#xD;&#xA;Insert the device, and manually direct Windows to look for drivers in the&#xD;&#xA;directory where you have your copy of the &quot;EFM32_Vendor_Unique_Device.inf&quot; file.&#xD;&#xA;This can be done with the new device &quot;Wizard&quot; which might pop up after device&#xD;&#xA;insertion, or you can open &quot;Device Manager&quot;, left click on the new device and&#xD;&#xA;select &quot;Update Driver Software...&quot;.&#xD;&#xA;&#xD;&#xA;Some versions of Windows wont allow you to install unsigned drivers. If you&#xD;&#xA;suspect this, reboot the PC into &quot;Disable Driver Signature Enforcement&quot; mode.&#xD;&#xA;Win7:&#xD;&#xA;Repeatedly push F8 during boot until the boot menu appears.&#xD;&#xA;Select the &quot;Disable Driver Signature Enforcement&quot; option.&#xD;&#xA;Win10:&#xD;&#xA;Start Menu-&gt;Power button-&gt;Hold Shift key down and select Restart.&#xD;&#xA;When computer has restarted into the options menu, select:&#xD;&#xA;Troubleshoot-&gt;Advanced Option-&gt;Startup Settings-&gt;Restart-&gt;Disable driver signature enforcement&#xD;&#xA;You should now be able to install an unsigned driver.&#xD;&#xA;&#xD;&#xA;After libusb is installed, start EFM32-LedApp.exe.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLSTK3400A Starter Kit&#xD;&#xA;Device: EFM32HG322F64&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Happy Gecko 3400 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLSTK3400A_EFM32HG/examples/usbdvud/SimplicityStudio/SLSTK3400A_usbdvud.slsproj,../hardware/kit/SLSTK3400A_EFM32HG/examples/usbdvud/arm/usbdvud.uvprojx,../hardware/kit/SLSTK3400A_EFM32HG/examples/usbdvud/iar/usbdvud.eww"/>
    <properties key="core.boardCompatibility" value="brd2012a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.hg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3400A_usbxpress_echo" description="&lt;h1&gt;&lt;b&gt;USBXpress Echo example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project demonstrates the EFM32 USBXpress firmware library.&#xD;&#xA;It echoes all received data back to the host that sent it.&#xD;&#xA;&#xD;&#xA;The host-side application is the usbxpress_echo.py Python script found in the&#xD;&#xA;USBXpress SDK at Examples/Echo/Host. The USBXpress SDK is available for download&#xD;&#xA;at www.silabs.com/products/mcu/Pages/USBXpress.aspx.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLSTK3400A Starter Kit&#xD;&#xA;Device: EFM32HG322F64&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Happy Gecko 3400 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLSTK3400A_EFM32HG/examples/usbxpress_echo/SimplicityStudio/SLSTK3400A_usbxpress_echo.slsproj,../hardware/kit/SLSTK3400A_EFM32HG/examples/usbxpress_echo/arm/usbxpress_echo.uvprojx,../hardware/kit/SLSTK3400A_EFM32HG/examples/usbxpress_echo/iar/usbxpress_echo.eww"/>
    <properties key="core.boardCompatibility" value="brd2012a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.hg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3400A_usbxpress_test_panel" description="&lt;h1&gt;&lt;b&gt;USBXpress Test Panel example&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project demonstrates the EFM32 USBXpress firmware library.&#xD;&#xA;It communicates with the TestPanel host application to send and receive data.&#xD;&#xA;TestPanel is included in the USBXpress SDK, available for download at:&#xD;&#xA;&#xD;&#xA;https://www.silabs.com/products/mcu/Pages/USBXpress.aspx&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLSTK3400A Development Kit&#xD;&#xA;Device: EFM32HG322F64&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Happy Gecko 3400 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLSTK3400A_EFM32HG/examples/usbxpress_test_panel/SimplicityStudio/SLSTK3400A_usbxpress_test_panel.slsproj,../hardware/kit/SLSTK3400A_EFM32HG/examples/usbxpress_test_panel/arm/usbxpress_test_panel.uvprojx,../hardware/kit/SLSTK3400A_EFM32HG/examples/usbxpress_test_panel/iar/usbxpress_test_panel.eww"/>
    <properties key="core.boardCompatibility" value="brd2012a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.hg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3401A_blink" description="&lt;h1&gt;&lt;b&gt;Blink example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project use EFM32 CMSIS and the emlib peripheral library&#xA;to demonstrate the use of the LED on the SLSTK3401A kit.&#xA;This example is intended as a skeleton for new projects.&#xA;&#xA;Board:  Silicon Labs SLSTK3401A Starter Kit&#xA;Device: EFM32PG1B200F256&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Pearl Gecko 3401 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLSTK3401A_EFM32PG/examples/blink/SimplicityStudio/SLSTK3401A_blink.slsproj,../hardware/kit/SLSTK3401A_EFM32PG/examples/blink/arm/blink.uvprojx,../hardware/kit/SLSTK3401A_EFM32PG/examples/blink/iar/blink.eww"/>
    <properties key="core.boardCompatibility" value="brd2500a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.pg1.*"/>
    <properties key="template.initiallyOpenedResource" value="src/blink.c"/>
  </descriptors>
  <descriptors label="SLSTK3401A_clock" description="&lt;h1&gt;&lt;b&gt;Analog and digital clock example using the Memory LCD on the SLSTK3401A.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS including emlib and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the Sharp Memory LCD display on the SLSTK3401A kit.&#xD;&#xA;&#xD;&#xA;The user can switch between analog and digital clock modes by pushing&#xD;&#xA;the PB0 button.&#xD;&#xA;&#xD;&#xA;The user can increment the second count by pushing the PB1 button.&#xD;&#xA;The minute count can be incremented by pushing the PB1 button for more&#xD;&#xA;than 2 seconds.&#xD;&#xA;&#xD;&#xA;The analog clock mode demonstrates the use of GLIB to draw hour, minute&#xD;&#xA;and second pointers.&#xD;&#xA;&#xD;&#xA;The digital clock demonstrates the 16x20 font (including number characters&#xD;&#xA;only) of the textdisplay driver.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLSTK3401A Starter Kit&#xD;&#xA;Device: EFM32PG1B200F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Pearl Gecko 3401 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLSTK3401A_EFM32PG/examples/clock/SimplicityStudio/SLSTK3401A_clock.slsproj,../hardware/kit/SLSTK3401A_EFM32PG/examples/clock/arm/clock.uvprojx,../hardware/kit/SLSTK3401A_EFM32PG/examples/clock/iar/clock.eww"/>
    <properties key="core.boardCompatibility" value="brd2500a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.pg1.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3401A_cpt007b_demo" description="&lt;h1&gt;&lt;b&gt;CPT007B Demo&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This demo demonstrates the capacitive button function of CPT007B fixed function&#xD;&#xA;board. This demo runs on the EFM32 STK, and communicates with CPT007B through&#xD;&#xA;the GPIO pins on the EXP header. Virtual buttons on STK's LCD screen indicate&#xD;&#xA;whether the capacitive sensing buttons on CPT007B are pressed or released.&#xD;&#xA;This demo supports up to 7 capacitive buttons on CPT007B&#xD;&#xA; &#xD;&#xA;Board:  Silicon Labs SLSTK3401A Starter Kit and CPT007B Evaluation Board&#xD;&#xA;Device: EFM32PG1B200F256&lt;/pre&gt;">
    <properties key="template.category" value="Pearl Gecko 3401 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLSTK3401A_EFM32PG/examples/cpt007b/SimplicityStudio/SLSTK3401A_cpt007b_demo.slsproj,../hardware/kit/SLSTK3401A_EFM32PG/examples/cpt007b/arm/cpt007b_demo.uvprojx,../hardware/kit/SLSTK3401A_EFM32PG/examples/cpt007b/iar/cpt007b_demo.eww"/>
    <properties key="core.boardCompatibility" value="brd2500a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.pg1.*"/>
    <properties key="template.initiallyOpenedResource" value="src/cpt007b_demo.c"/>
  </descriptors>
  <descriptors label="SLSTK3401A_cpt112s_demo" description="&lt;h1&gt;&lt;b&gt;CPT112S Demo&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This demo demonstrates the capacitive button function of CPT112S fixed&#xD;&#xA;function board. This demo runs on the EFM32 STK,and communicates with&#xD;&#xA;CPT112S through the SMBUS pins on the EXP header. Virtual buttons on&#xD;&#xA;STK's LCD screen indicate whether the capacitive sensing buttons on CPT112S&#xD;&#xA;are pressed or released.&#xD;&#xA; &#xD;&#xA;This demo supports 11 buttons on the CPT112S device.(The CS11 button is&#xD;&#xA;disabled in the default configuration of the board to enable the buzzer)&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLSTK3401A Starter Kit and CPT112S Evaluation Board&#xD;&#xA;Device: EFM32PG1B200F256&lt;/pre&gt;">
    <properties key="template.category" value="Pearl Gecko 3401 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLSTK3401A_EFM32PG/examples/cpt112s/SimplicityStudio/SLSTK3401A_cpt112s_demo.slsproj,../hardware/kit/SLSTK3401A_EFM32PG/examples/cpt112s/arm/cpt112s_demo.uvprojx,../hardware/kit/SLSTK3401A_EFM32PG/examples/cpt112s/iar/cpt112s_demo.eww"/>
    <properties key="core.boardCompatibility" value="brd2500a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.pg1.*"/>
    <properties key="template.initiallyOpenedResource" value="src/cpt112s_demo.c"/>
  </descriptors>
  <descriptors label="SLSTK3401A_cslib" description="&lt;h1&gt;&lt;b&gt;CSLIB example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses the capacitive sensing firmware library to sample&#xA;capacitive sensing buttons on the STK.  Real-time sample information, touch&#xA;qualification status, and other state variables can be displayed and examined&#xA;in the Capacitive Sensing Profiler tool.&#xA;&#xA;Board:  Silicon Labs SLSTK3401A Starter Kit&#xA;Device: EFM32PG1B200F256&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Pearl Gecko 3401 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLSTK3401A_EFM32PG/examples/cslib/SimplicityStudio/SLSTK3401A_cslib.slsproj,../hardware/kit/SLSTK3401A_EFM32PG/examples/cslib/arm/cslib.uvprojx,../hardware/kit/SLSTK3401A_EFM32PG/examples/cslib/iar/cslib.eww"/>
    <properties key="core.boardCompatibility" value="brd2500a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.pg1.*"/>
    <properties key="template.initiallyOpenedResource" value="SimplicityStudio/workspace/SLSTK3401A_cslib/app/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3401A_emlcd" description="&lt;h1&gt;&lt;b&gt;Energy Modes with LCD display example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use EFM32 CMSIS and the emlib peripheral library to&#xD;&#xA;demonstrate the use of the LCD, RTCC, GPIO and various Energy Modes&#xD;&#xA;on the starter kit.&#xD;&#xA;&#xD;&#xA;The example will cycle through Energy Mode EM0-EM3, staying one second in&#xD;&#xA;each mode. PB0 can be pressed anytime to enter EM4.&#xD;&#xA;Wakeup from EM4 is either by reset pushbutton or by GPIO pin (port F pin 7)&#xD;&#xA;connected to pushbutton PB1.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLSTK3401A Starter Kit&#xD;&#xA;Device: EFM32PG1B200F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Pearl Gecko 3401 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLSTK3401A_EFM32PG/examples/emlcd/SimplicityStudio/SLSTK3401A_emlcd.slsproj,../hardware/kit/SLSTK3401A_EFM32PG/examples/emlcd/arm/emlcd.uvprojx,../hardware/kit/SLSTK3401A_EFM32PG/examples/emlcd/iar/emlcd.eww"/>
    <properties key="core.boardCompatibility" value="brd2500a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.pg1.*"/>
    <properties key="template.initiallyOpenedResource" value="src/emlcd.c"/>
  </descriptors>
  <descriptors label="SLSTK3401A_emode" description="&lt;h1&gt;&lt;b&gt;Select a single energy mode, and stay there.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS and demonstrates the use of&#xD;&#xA;the LCD display, RTCC, GPIO and various Energy Modes (EM).&#xD;&#xA;&#xD;&#xA;Use PB1 to cycle through the energy mode tests available.&#xD;&#xA;Press PB0 to start selected test.&#xD;&#xA;&#xD;&#xA;Note: The EMU power configuration register can only be written once after a&#xD;&#xA;      power-on reset and may be locked to a different configuration. For the&#xD;&#xA;      emode demo to function properly, a power-on reset may be required to&#xD;&#xA;      configure the DCDC properly.&#xD;&#xA;&#xD;&#xA;This demo application has been made to give a quick demo of the&#xD;&#xA;energyAware Profiler from Silicon Labs, including EFM32 energy modes.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLSTK3401A Starter Kit&#xD;&#xA;Device: EFM32PG1B200F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Pearl Gecko 3401 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLSTK3401A_EFM32PG/examples/emode/SimplicityStudio/SLSTK3401A_emode.slsproj,../hardware/kit/SLSTK3401A_EFM32PG/examples/emode/arm/emode.uvprojx,../hardware/kit/SLSTK3401A_EFM32PG/examples/emode/iar/emode.eww"/>
    <properties key="core.boardCompatibility" value="brd2500a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.pg1.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3401A_freertos_demo" description="&lt;h1&gt;&lt;b&gt;FreeRTOS - Demo&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This is the demo application which is also provided in the official FreeRTOS &#xD;&#xA;distribution. The demo can operate in 2 modes showing different functionality &#xD;&#xA;of the FreeRTOS system. The mode can be configured by changing the value of &#xD;&#xA;configCREATE_LOW_POWER_DEMO in the FreeRTOSConfig.h file. &#xD;&#xA;&#xD;&#xA;0 =&gt; Full Demo&#xD;&#xA;&#xD;&#xA;This is the default mode of this example. The &quot;Full Demo&quot; is a comprehensive &#xD;&#xA;test and demo application that shows how to use various FreeRTOS API's. When &#xD;&#xA;running the demo there is a check task which toggles a LED on the board every&#xD;&#xA;3 seconds when the demo is running as expected.&#xD;&#xA;&#xD;&#xA;1 =&gt; Low Power using RTCC&#xD;&#xA;&#xD;&#xA;This mode is using the low power tickless idle functionality of FreeRTOS to &#xD;&#xA;show how to use low power while using FreeRTOS. In this mode the MCU will &#xD;&#xA;sleep in EM3 whenever FreeRTOS enters idle mode and it will be using the RTCC&#xD;&#xA;to trigger wakup.&#xD;&#xA;&#xD;&#xA;Further information on the example can be found at this location:&#xD;&#xA;http://www.freertos.org/EFM32-Giant-Gecko-Pearl-Gecko-tickless-RTOS-demo.html&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLSTK3401A Starter Kit&#xD;&#xA;Device: EFM32PG1B200F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Pearl Gecko 3401 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLSTK3401A_EFM32PG/examples/freertos_demo/SimplicityStudio/SLSTK3401A_freertos_demo.slsproj,../hardware/kit/SLSTK3401A_EFM32PG/examples/freertos_demo/arm/freertos_demo.uvprojx,../hardware/kit/SLSTK3401A_EFM32PG/examples/freertos_demo/iar/freertos_demo.eww"/>
    <properties key="core.boardCompatibility" value="brd2500a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.pg1.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3401A_glib" description="&lt;h1&gt;&lt;b&gt;GLIB example using the Sharp Memory LCD on the SLSTK3401A.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the GLIB library and the DISPLAY device driver&#xD;&#xA;together with EFM32 CMSIS including emlib and board support package support&#xD;&#xA;functions/drivers to demonstrate driving the Sharp Memory LCD display on&#xD;&#xA;the SLSTK3401A kit.&#xD;&#xA;&#xD;&#xA;The user can switch trough different GLIB example screens by pushing the PB1 button.&#xD;&#xA;The user can reset the demo by pushing the PB0 button.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLSTK3401A Starter Kit&#xD;&#xA;Device: EFM32PG1B200F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Pearl Gecko 3401 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLSTK3401A_EFM32PG/examples/glib/SimplicityStudio/SLSTK3401A_glib.slsproj,../hardware/kit/SLSTK3401A_EFM32PG/examples/glib/arm/glib.uvprojx,../hardware/kit/SLSTK3401A_EFM32PG/examples/glib/iar/glib.eww"/>
    <properties key="core.boardCompatibility" value="brd2500a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.pg1.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3401A_humitemp" description="&lt;h1&gt;&lt;b&gt;Humidity and temperature demo using the on-board Si7021 sensor on the SLSTK3401A board.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS including emlib and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the Sharp Memory LCD display and the Si7021 humidity and temperature sensor on the &#xD;&#xA;SLSTK3401A board.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLSTK3401A Starter Kit.&#xD;&#xA;Device: EFM32PG1B200F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Pearl Gecko 3401 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLSTK3401A_EFM32PG/examples/humitemp/SimplicityStudio/SLSTK3401A_humitemp.slsproj,../hardware/kit/SLSTK3401A_EFM32PG/examples/humitemp/arm/humitemp.uvprojx,../hardware/kit/SLSTK3401A_EFM32PG/examples/humitemp/iar/humitemp.eww"/>
    <properties key="core.boardCompatibility" value="brd2500a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.pg1.*"/>
    <properties key="template.initiallyOpenedResource" value="src/humitemp.c"/>
  </descriptors>
  <descriptors label="SLSTK3401A_inttemp" description="&lt;h1&gt;&lt;b&gt;ADC temperature sensor demo using the SLSTK3401A_EFM32PG board.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses the EFM32 CMSIS including emlib and the &#xA;board support package support functions/drivers to demonstrate how &#xA;to read the ADC temperature sensor. The temperature is sampled and &#xA;displayed on the Sharp Memory LCD display every second.&#xA;&#xA;Board:  Silicon Labs SLSTK3401A_EFM32PG starter kit&#xA;Device: EFM32PG1B200F256GM48&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Pearl Gecko 3401 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLSTK3401A_EFM32PG/examples/inttemp/SimplicityStudio/SLSTK3401A_inttemp.slsproj,../hardware/kit/SLSTK3401A_EFM32PG/examples/inttemp/arm/inttemp.uvprojx,../hardware/kit/SLSTK3401A_EFM32PG/examples/inttemp/iar/inttemp.eww"/>
    <properties key="core.boardCompatibility" value="brd2500a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.pg1.*"/>
    <properties key="template.initiallyOpenedResource" value="src/inttemp.c"/>
  </descriptors>
  <descriptors label="SLSTK3401A_leuart" description="&lt;h1&gt;&lt;b&gt;LEUART/LDMA in Energy mode2 output example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project reads and sends data byte back to terminal using LEUART&#xD;&#xA;while staying in EM2.&#xD;&#xA;&#xD;&#xA;It uses the EFM32 CMSIS and emlib, to demonstrate the&#xD;&#xA;use of LEUART communication using LDMA under the EM2 on the &#xD;&#xA;SLSTK3401A Starter Kit.&#xD;&#xA;&#xD;&#xA;The LEUART is configured to be used with LDMA under EM2.&#xD;&#xA;The terminal configuration is 9600-8-N-1.&#xD;&#xA;The LDMA is configured to handle read and write data bytes from LEUART under EM2.&#xD;&#xA;&#xD;&#xA;Testing:&#xD;&#xA;1. Use the expansion header to connect the LEUART to your PC.&#xD;&#xA;2. Pin Configuration:&#xD;&#xA;	2.1. Pin-12 (PA0) LEUART0_TX&#xD;&#xA;	2.2. Pin-14 (PA1) LEUART0_RX&#xD;&#xA;	2.3. Pin-1 Gnd&#xD;&#xA;&#xD;&#xA;3. Configure terminal to 9600-8-N-1.&#xD;&#xA;4. Enter characters from your keyboard and see if you receive the echo on the terminal.&#xD;&#xA;5. Check the average current consumption is equal to EM2 on Energy Profiler.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLSTK3401A Starter Kit&#xD;&#xA;Device: EFM32PG1B200F256GM48&lt;/pre&gt;">
    <properties key="template.category" value="Pearl Gecko 3401 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLSTK3401A_EFM32PG/examples/leuart/SimplicityStudio/SLSTK3401A_leuart.slsproj,../hardware/kit/SLSTK3401A_EFM32PG/examples/leuart/arm/leuart.uvprojx,../hardware/kit/SLSTK3401A_EFM32PG/examples/leuart/iar/leuart.eww"/>
    <properties key="core.boardCompatibility" value="brd2500a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.pg1.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3401A_aescrypt" description="&lt;h1&gt;&lt;b&gt;mbedTLS AES example using the CRYPTO module in the EFM32PG in order to&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;accelerate the AES encryption and SHA hash functions of mbedTLS.&#xD;&#xA;&#xD;&#xA;This example project uses the EFM32 CMSIS including emlib to run&#xD;&#xA;mbedTLS libraries on the EFM32PG.&#xD;&#xA;&#xD;&#xA;The example redirects standard io to the VCOM virtual serial port of the&#xD;&#xA;SLSTK3401A_EFM32PG kit. By default the serial port setting is 115200-8-N-1.&#xD;&#xA;&#xD;&#xA;The user should connect a terminal emulator program, and follow the&#xD;&#xA;instructions shown on the console.&#xD;&#xA;&#xD;&#xA;The user can select encryption or decryption of a message which should be sent&#xD;&#xA;via the VCOM serial interface.&#xD;&#xA;&#xD;&#xA;In order to encrypt and decrypt the program use a hard coded key of 256 bits.&#xD;&#xA;&#xD;&#xA;In ecryption mode, the example will ask the user for a short phrase in order to&#xD;&#xA;generate an initial vector used in the AES encryption process. The user may type&#xD;&#xA;any phrase ended by &lt;enter&gt; or limited to a maximum of 16 bytes. After the short&#xD;&#xA;phrase, the user should start typing in the message to be encrypted, followed by&#xD;&#xA;hitting &lt;enter&gt; to mark the end of the message. The message length is limited to&#xD;&#xA;the #define MAX_MESSAGE_SIZE_ENCRYPTION. Then the program will encrypt the&#xD;&#xA;message (plaintext), and print out the ciphertext, preceded with the initial&#xD;&#xA;vector of 16 bytes and followed by a message digest tag of 32 bytes. All data&#xD;&#xA;is converted to hexadecimal readable text format before sent to the serial port.&#xD;&#xA;The format is:&#xD;&#xA;Initial Vector(16 bytes) | Ciphertext | Message Digest Tag (32 bytes)&#xD;&#xA;&#xD;&#xA;The user can copy the output and feed it back to the program for decryption&#xD;&#xA;later. The user need to reset the kit in order to run decryption mode.&#xD;&#xA;&#xD;&#xA;In decryption mode, the example will expect to receive a decrypted message&#xD;&#xA;in the same format as generated by the encryption (as shown above).&#xD;&#xA;&#xD;&#xA;The example has been instrumented with code to count the number of clock&#xD;&#xA;cycles spent in the encryption and decryption loops. In order to check the&#xD;&#xA;performanc gain of CRYPTO acceleration, the user can switch off&#xD;&#xA;CRYPTO hardware acceleration by compiling with -DNO_CRYPTO_ACCELERATION&#xD;&#xA;in the compiler command line.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLSTK3401A Starter Kit&#xD;&#xA;Device: EFM32PG1B200F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Pearl Gecko 3401 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLSTK3401A_EFM32PG/examples/mbedtls_aescrypt/SimplicityStudio/SLSTK3401A_aescrypt.slsproj,../hardware/kit/SLSTK3401A_EFM32PG/examples/mbedtls_aescrypt/arm/aescrypt.uvprojx,../hardware/kit/SLSTK3401A_EFM32PG/examples/mbedtls_aescrypt/iar/aescrypt.eww"/>
    <properties key="core.boardCompatibility" value="brd2500a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.pg1.*"/>
    <properties key="template.initiallyOpenedResource" value="test/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3401A_ecdsa" description="&lt;h1&gt;&lt;b&gt;mbedTLS ECDSA example using the CRYPTO module in the EFM32PG in order to&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;accelerate the ECDSA API functions of mbedTLS.&#xD;&#xA;&#xD;&#xA;This example project uses the EFM32 CMSIS including emlib to run&#xD;&#xA;mbedTLS libraries on the EFM32PG.&#xD;&#xA;&#xD;&#xA;The example redirects standard I/O to the VCOM virtual serial port of the&#xD;&#xA;SLSTK3401A_EFM32PG kit. The user can use a terminal emulator program to&#xD;&#xA;connect to the serial port with the default settings of 115200-8-N-1.&#xD;&#xA;&#xD;&#xA;The example has been instrumented with code to count the number of clock&#xD;&#xA;cycles spent inside the ecdsa api calls, mbedtls_ecdsa_genkey,&#xD;&#xA;mbedtls_ecdsa_write_signature and mbedtls_ecdsa_read_signature.&#xD;&#xA;The results are printed to stdout, i.e. the VCOM serial port console.&#xD;&#xA;In order to check the performance gain of CRYPTO acceleration, the user&#xD;&#xA;can switch off CRYPTO hardware acceleration by compiling with&#xD;&#xA;-DNO_CRYPTO_ACCELERATION in the compiler command line.&#xD;&#xA;&#xD;&#xA;The user can change the specific ECC curve used in the example&#xD;&#xA;by modifying the ECPARAMS macro definition. Available curves with&#xD;&#xA;CRYPTO acceleration support are:&#xD;&#xA;MBEDTLS_ECP_DP_SECP256R1&#xD;&#xA;MBEDTLS_ECP_DP_SECP224R1&#xD;&#xA;MBEDTLS_ECP_DP_SECP192R1&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLSTK3401A Starter Kit&#xD;&#xA;Device: EFM32PG1B200F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Pearl Gecko 3401 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLSTK3401A_EFM32PG/examples/mbedtls_ecdsa/SimplicityStudio/SLSTK3401A_ecdsa.slsproj,../hardware/kit/SLSTK3401A_EFM32PG/examples/mbedtls_ecdsa/iar/ecdsa.eww"/>
    <properties key="core.boardCompatibility" value="brd2500a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.pg1.*"/>
    <properties key="template.initiallyOpenedResource" value="test/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3401A_powertest" description="&lt;h1&gt;&lt;b&gt;Power test example, running demonstration of energy modes.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use EFM32 CMSIS and the emlib peripheral library&#xD;&#xA;to demonstrate the use of the various Energy Modes available on the&#xD;&#xA;EFM32PG1B200F256. When running this example, the Energy Profiler tool&#xD;&#xA;in Simplicity Studio can be used to show the power consumption of each&#xD;&#xA;energy mode.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLSTK3401A Starter Kit&#xD;&#xA;Device: EFM32PG1B200F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Pearl Gecko 3401 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLSTK3401A_EFM32PG/examples/powertest/SimplicityStudio/SLSTK3401A_powertest.slsproj,../hardware/kit/SLSTK3401A_EFM32PG/examples/powertest/arm/powertest.uvprojx,../hardware/kit/SLSTK3401A_EFM32PG/examples/powertest/iar/powertest.eww"/>
    <properties key="core.boardCompatibility" value="brd2500a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.pg1.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3401A_prs" description="&lt;h1&gt;&lt;b&gt;PRS example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project use EFM32 CMSIS and the emlib peripheral library&#xA;to demonstrate the use of the Peripheral Reflex System (PRS) on the &#xA;SLSTK3401A kit. The LETIMER0 toggles LED1 via PRS channel 0 at every 250ms.&#xA;Button BTN0 toggles LED0 at every 5th press via PCNT0 and PRS channel 2.&#xA;This example operates in EM2.&#xA;&#xA;Board:  Silicon Labs SLSTK3401A Starter Kit&#xA;Device: EFM32PG1B200F256&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Pearl Gecko 3401 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLSTK3401A_EFM32PG/examples/prs/SimplicityStudio/SLSTK3401A_prs.slsproj,../hardware/kit/SLSTK3401A_EFM32PG/examples/prs/arm/prs.uvprojx,../hardware/kit/SLSTK3401A_EFM32PG/examples/prs/iar/prs.eww"/>
    <properties key="core.boardCompatibility" value="brd2500a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.pg1.*"/>
    <properties key="template.initiallyOpenedResource" value="src/prs.c"/>
  </descriptors>
  <descriptors label="SLSTK3401A_rs232" description="&lt;h1&gt;&lt;b&gt;USART/LEUART RS232 output example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS and emlib, to demonstrates the&#xD;&#xA;use of USART and LEUART communication on the SLSTK3401A Starter Kit, as well&#xD;&#xA;as using the virtual COM port on the Starter Kit.&#xD;&#xA;&#xD;&#xA;For the default USART communication, serial configuration 115200-8-N-1 is used.&#xD;&#xA;(EXP pin 1 is GND, EXP pin 12 is USART0 Tx and EXP pin 14 is USART0 Rx).&#xD;&#xA;By defining &quot;RETARGET_VCOM&quot; as a build option, a virtual COM port through the&#xD;&#xA;USB cable is enabled.&#xD;&#xA;If LEUART mode is configured by defining &quot;RETARGET_LEUART0&quot; as a build option,&#xD;&#xA;terminal configuration is 9600-8-N-1 if &quot;RETARGET_VCOM&quot; is not defined, and&#xD;&#xA;115200-8-N-1 if &quot;RETARGET_VCOM&quot; is defined.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLSTK3401A Starter Kit&#xD;&#xA;Device: EFM32PG1B200F256GM48&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Pearl Gecko 3401 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLSTK3401A_EFM32PG/examples/rs232/SimplicityStudio/SLSTK3401A_rs232.slsproj,../hardware/kit/SLSTK3401A_EFM32PG/examples/rs232/arm/rs232.uvprojx,../hardware/kit/SLSTK3401A_EFM32PG/examples/rs232/iar/rs232.eww"/>
    <properties key="core.boardCompatibility" value="brd2500a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.pg1.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3401A_rtx_blink" description="&lt;h1&gt;&lt;b&gt;Keil RTX RTOS - Blink example&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the Keil RTX RTOS, and gives a basic demonstration of using two tasks to blink the LEDs on the board.&#xD;&#xA;This example is intended as a skeleton for new projects using Keil RTX.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLSTK3401A&#xD;&#xA;Device: EFM32PG1B200F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Pearl Gecko 3401 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLSTK3401A_EFM32PG/examples/rtx_blink/SimplicityStudio/SLSTK3401A_rtx_blink.slsproj,../hardware/kit/SLSTK3401A_EFM32PG/examples/rtx_blink/arm/rtx_blink.uvprojx,../hardware/kit/SLSTK3401A_EFM32PG/examples/rtx_blink/iar/rtx_blink.eww"/>
    <properties key="core.boardCompatibility" value="brd2500a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.pg1.*"/>
    <properties key="template.initiallyOpenedResource" value="src/rtx_blink.c"/>
  </descriptors>
  <descriptors label="SLSTK3401A_spaceinvaders" description="&lt;h1&gt;&lt;b&gt;Space Invaders game using the Memory LCD on the SLSTK3401A.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS including emlib and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the Sharp Memory LCD display on the SLSTK3401A Starter Kit.&#xD;&#xA;&#xD;&#xA;Game instructions are displayed on the startup screen.&#xD;&#xA;&#xD;&#xA;For debug builds the game may run slow because they are not optimized&#xD;&#xA;for speed. The user should build and run the release builds for&#xD;&#xA;optimized performance.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLSTK3401A Starter Kit&#xD;&#xA;Device: EFM32PG1B200F256GM48&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Pearl Gecko 3401 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLSTK3401A_EFM32PG/examples/spaceinvaders/SimplicityStudio/SLSTK3401A_spaceinvaders.slsproj,../hardware/kit/SLSTK3401A_EFM32PG/examples/spaceinvaders/arm/spaceinvaders.uvprojx,../hardware/kit/SLSTK3401A_EFM32PG/examples/spaceinvaders/iar/spaceinvaders.eww"/>
    <properties key="core.boardCompatibility" value="brd2500a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.pg1.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3401A_tempdrv" description="&lt;h1&gt;&lt;b&gt;Display temperature range in Energy Mode 3 using SLSTK3401A_EFM32PG board.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;In this example project temperature is being sampled and the correct&#xA;temperature range will be displayed on the LCD.&#xA;Following messages will be displayed on the LCD based on the temperature&#xA;reading:&#xA;  1. Below 0 degC&#xA;  2. Above 30 degC&#xA;  3. Above 85 degC&#xA;  4. Between 0 &amp; 30 degC&#xA;&#xA;The example project uses temperature driver(tmpdrv) to monitor &#xA;temperature and a display module to display the correct &#xA;temperature range on the LCD. tempdrv allows us to specify &#xA;the temperature level and register a callback if &#xA;the temperature increases or decreases from the specified threshold.&#xA;Moreover, after displaying the right message on the LCD the board goes&#xA;to Energy mode 3 to preserve the power consumption.  &#xA;&#xA;The project uses the EFM32 CMSIS including emlib, the board support and &#xA;the package support functions/drivers to demonstrate the use of &#xA;tempdrv and the LCD display.&#xA;&#xA;Board:  Silicon Labs SLSTK3401A_EFM32PG starter kit&#xA;Device: EFM32PG1B200F256GM48&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Pearl Gecko 3401 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLSTK3401A_EFM32PG/examples/tempdrv/SimplicityStudio/SLSTK3401A_tempdrv.slsproj,../hardware/kit/SLSTK3401A_EFM32PG/examples/tempdrv/arm/tempdrv.uvprojx,../hardware/kit/SLSTK3401A_EFM32PG/examples/tempdrv/iar/tempdrv.eww"/>
    <properties key="core.boardCompatibility" value="brd2500a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.pg1.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3401A_textdisplay" description="&lt;h1&gt;&lt;b&gt;Printf output on Sharp Memory LCD LS013B7DH03.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS including emlib and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the Sharp Memory LCD display on the EFM32 Pearl Gecko. In this case the&#xD;&#xA;display is used as output from a regular printf in the application, as&#xD;&#xA;an alternative to using LEUART or UART for text output.&#xD;&#xA;&#xD;&#xA;The user can customize the behaviour of the DISPLAY driver by changing&#xD;&#xA;configuration macros in displayconfigapp.h.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLSTK3401A Starter Kit&#xD;&#xA;Device: EFM32PG1B200F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Pearl Gecko 3401 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLSTK3401A_EFM32PG/examples/textdisplay/SimplicityStudio/SLSTK3401A_textdisplay.slsproj,../hardware/kit/SLSTK3401A_EFM32PG/examples/textdisplay/arm/textdisplay.uvprojx,../hardware/kit/SLSTK3401A_EFM32PG/examples/textdisplay/iar/textdisplay.eww"/>
    <properties key="core.boardCompatibility" value="brd2500a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.pg1.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3401A_touch" description="&lt;h1&gt;&lt;b&gt;Capacitive touch example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example demonstrates the capacitive touch capability&#xD;&#xA;of the SLSTK3401A Starter Kit.&#xD;&#xA;&#xD;&#xA;It demonstrates the use of CAPSENSE and DISPLAY drivers.&#xD;&#xA;Pressing T1/T2 touch pads will decrease/increase the counter shown on the LCD.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLSTK3401A Starter Kit&#xD;&#xA;Device: EFM32PG1B200F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Pearl Gecko 3401 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLSTK3401A_EFM32PG/examples/touch/SimplicityStudio/SLSTK3401A_touch.slsproj,../hardware/kit/SLSTK3401A_EFM32PG/examples/touch/arm/touch.uvprojx,../hardware/kit/SLSTK3401A_EFM32PG/examples/touch/iar/touch.eww"/>
    <properties key="core.boardCompatibility" value="brd2500a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.pg1.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3401A_weatherstation" description="&lt;h1&gt;&lt;b&gt;Weatherstation using the Sensor add-on board on the SLSTK3401A.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS including emlib and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the Sharp Memory LCD display on the SLSTK3401A kit. In addition, it&#xD;&#xA;demonstrates the use of Silicon Labs I2C based sensors on the expansion&#xD;&#xA;board header.&#xD;&#xA;&#xD;&#xA;You must have a Silicon Labs Sensor add-on board to make use of this demo.&#xD;&#xA;Once the demo is started, hold your hand over the gesture sensor. Once&#xD;&#xA;the sensor detects your hand the display will become active.&#xD;&#xA;&#xD;&#xA;Swipe left and right over the sensor to scroll through temperature, humidity&#xD;&#xA;and UV index. On the temperature screen, you can swipe up or down to change&#xD;&#xA;between Fahrenheit or Celcius.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLSTK3401A Starter Kit and Sensor Add-on board&#xD;&#xA;Device: EFM32PG1B200F256GM48&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Pearl Gecko 3401 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLSTK3401A_EFM32PG/examples/weatherstation/SimplicityStudio/SLSTK3401A_weatherstation.slsproj,../hardware/kit/SLSTK3401A_EFM32PG/examples/weatherstation/arm/weatherstation.uvprojx,../hardware/kit/SLSTK3401A_EFM32PG/examples/weatherstation/iar/weatherstation.eww"/>
    <properties key="core.boardCompatibility" value="brd2500a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.pg1.*"/>
    <properties key="template.initiallyOpenedResource" value="src/weatherstation.c"/>
  </descriptors>
  <descriptors label="SLWSTK6200A_blink" description="&lt;h1&gt;&lt;b&gt;Blink example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use CMSIS and the emlib peripheral library to&#xD;&#xA;demonstrate the use of the LED's on the starter kit. This example is intended as&#xD;&#xA;a skeleton for new projects.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6200A_EZR32LG Starter Kit&#xD;&#xA;Device: EZR32LG330F256R60&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32LG 868 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6200A_EZR32LG/examples/blink/SimplicityStudio/SLWSTK6200A_blink.slsproj,../hardware/kit/SLWSTK6200A_EZR32LG/examples/blink/arm/blink.uvprojx,../hardware/kit/SLWSTK6200A_EZR32LG/examples/blink/iar/blink.eww"/>
    <properties key="core.boardCompatibility" value="brd4502a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/blink.c"/>
  </descriptors>
  <descriptors label="SLWSTK6200A_clock" description="&lt;h1&gt;&lt;b&gt;Analog and digital clock example using the Memory LCD on the SLWSTK6200A_EZR32LG.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses CMSIS including emlib and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the Sharp Memory LCD display on the SLWSTK6200A_EZR32LG kit.&#xD;&#xA;&#xD;&#xA;The user can switch between analog and digital clock modes by pushing&#xD;&#xA;the PB0 button.&#xD;&#xA;&#xD;&#xA;The user can increment the minute count by pushing the PB1 button.&#xD;&#xA;The minute count can be incremented by pushing the PB1 button for more&#xD;&#xA;than 0.5 seconds.&#xD;&#xA;&#xD;&#xA;The analog clock mode demonstrates the use of GLIB to draw hour, minute&#xD;&#xA;and second pointers on the background which is a bitmap in flash memory.&#xD;&#xA;&#xD;&#xA;The digital clock demonstrates the 16x20 font (including number characters&#xD;&#xA;only) of the textdisplay driver.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6200A_EZR32LG Development Kit&#xD;&#xA;Device: EZR32LG330F256R60&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32LG 868 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6200A_EZR32LG/examples/clock/SimplicityStudio/SLWSTK6200A_clock.slsproj,../hardware/kit/SLWSTK6200A_EZR32LG/examples/clock/arm/clock.uvprojx,../hardware/kit/SLWSTK6200A_EZR32LG/examples/clock/iar/clock.eww"/>
    <properties key="core.boardCompatibility" value="brd4502a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6200A_humitemp" description="&lt;h1&gt;&lt;b&gt;Humidity and temperature demo using the on-board si7021 sensor on the&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;SLWSTK6200A_EZR32LG board.&#xD;&#xA;&#xD;&#xA;This example project uses CMSIS including emlib and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the Sharp Memory LCD display and the si7021 humidity and temperature sensor on the&#xD;&#xA;SLWSTK6200A_EZR32LG board.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6200A_EZR32LG starter kit.&#xD;&#xA;Device: EZR32LG330F256R60&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32LG 868 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6200A_EZR32LG/examples/humitemp/SimplicityStudio/SLWSTK6200A_humitemp.slsproj,../hardware/kit/SLWSTK6200A_EZR32LG/examples/humitemp/arm/humitemp.uvprojx,../hardware/kit/SLWSTK6200A_EZR32LG/examples/humitemp/iar/humitemp.eww"/>
    <properties key="core.boardCompatibility" value="brd4502a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/humitemp.c"/>
  </descriptors>
  <descriptors label="SLWSTK6200A_rangeTest" description="&lt;h1&gt;&lt;b&gt;Range Test example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;The Range Test application can be used to evaluate Silicon Laboratories radio&#xD;&#xA;chips including performace, sensitivity or blocking measurements.&#xD;&#xA;&#xD;&#xA;Range Test creates a radio link between two evaluation kits and sends &#xD;&#xA;predefined amount of packets from the transmitter side to the receiver.&#xD;&#xA;The receiver calculates Packet Error Rate (PER) and Moving-Average (MA) of PER&#xD;&#xA;based on the packets received. It also displays the current RSSI level in dBm&#xD;&#xA;units and draws a chart of the RSSI historical data.&#xD;&#xA;For long tests the transmitter can be set up to transmit continuously. It is not&#xD;&#xA;necessary to start both sides synchronously.&#xD;&#xA;&#xD;&#xA;*PLEASE NOTE* This example uses the radio extensively and could transmit at high&#xD;&#xA;RF power levels that may result in higher peak current consumption. Due to the&#xD;&#xA;peak current demand this example is not suited to run on a coin cell battery.&#xD;&#xA;If standalone operation is required please consider the use of an external USB&#xD;&#xA;connected battery or other power source.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6200A_EZR32LG Starter Kit&#xD;&#xA;Device: EZR32LG330F256R60&lt;/pre&gt;">
    <properties key="template.category" value="EZR32LG 868 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6200A_EZR32LG/examples/rangeTest/SimplicityStudio/SLWSTK6200A_rangeTest.slsproj"/>
    <properties key="core.boardCompatibility" value="brd4502a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="configuration/rangetestconfig.c"/>
  </descriptors>
  <descriptors label="SLWSTK6200A_rs232" description="&lt;h1&gt;&lt;b&gt;VCOM/USART/LEUART RS232 output example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses CMSIS and emlib, to demonstrates the&#xD;&#xA;use of LEUART, USART or VCOM  communication on the SLWSTK6200A_EZR32LG&#xD;&#xA;development kit.&#xD;&#xA;&#xD;&#xA;Serial port selection is done by defining any one of compiletime macros:&#xD;&#xA;#define RETARGET_LEUART0&#xD;&#xA;#define RETARGET_USART1&#xD;&#xA;#define RETARGET_USART2&#xD;&#xA;#define RETARGET_VCOM       (default)&#xD;&#xA;&#xD;&#xA;If a USART is used set terminal configuration to 115200-8-N-1.&#xD;&#xA;If the LEUART is used set terminal configuration to 9600-8-N-1.&#xD;&#xA;For the default VCOM communication mode, serial port settings are &quot;dont care&quot;.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6200A_EZR32LG Development Kit&#xD;&#xA;Device: EZR32LG330F256R60&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32LG 868 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6200A_EZR32LG/examples/rs232/SimplicityStudio/SLWSTK6200A_rs232.slsproj,../hardware/kit/SLWSTK6200A_EZR32LG/examples/rs232/arm/rs232.uvprojx,../hardware/kit/SLWSTK6200A_EZR32LG/examples/rs232/iar/rs232.eww"/>
    <properties key="core.boardCompatibility" value="brd4502a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6200A_ezradio_simple_trx" description="&lt;h1&gt;&lt;b&gt;EZRadio simple TRx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32LG CMSIS including emlib, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use two boards with same configuration and firmware, so&#xD;&#xA;both packet transmission and reception functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can send one packet with the radio by pushing the PB0 button. The&#xD;&#xA;data counter in the packet is incremented and shown on the LCD. If the&#xD;&#xA;packet is received by the other device, the received data is shown on its&#xD;&#xA;LCD. If the packet is received with CRC error this is printed as well.&#xD;&#xA;&#xD;&#xA;The user can send specified or unlimited number of packets by pushing PB1.&#xD;&#xA;The user can cease the transmission by pushing PB1 again.&#xD;&#xA;The number of transmitted packets is configurable.&#xD;&#xA;&#xD;&#xA;The application implements Packet Trace functionality, that means that the&#xD;&#xA;user can observe transmitted and received packets with the Network Analyzer Tool&#xD;&#xA;of Simplicity studio using the built-in default radio configuration header files.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6200A_EZR32LG Development Kit&#xD;&#xA;Device: EZR32LG330F256R60&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32LG 868 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6200A_EZR32LG/examples/ezradio_simple_trx/SimplicityStudio/SLWSTK6200A_ezradio_simple_trx.slsproj,../hardware/kit/SLWSTK6200A_EZR32LG/examples/ezradio_simple_trx/arm/ezradio_simple_trx.uvprojx,../hardware/kit/SLWSTK6200A_EZR32LG/examples/ezradio_simple_trx/iar/ezradio_simple_trx.eww"/>
    <properties key="core.boardCompatibility" value="brd4502a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6200A_ezradio_trx_ack" description="&lt;h1&gt;&lt;b&gt;EZRadio TRx with auto acknowledge example using the EZRadio device in the EZR32&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt; device.&#xD;&#xA;&#xD;&#xA;This example project uses the EZR32LG CMSIS including emlib, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use two boards with same configuration and firmware, so&#xD;&#xA;both packet transmission and reception functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can send one packet with the radio by pushing the PB0 button. The&#xD;&#xA;data counter in the packet is incremented and shown on the LCD. If the&#xD;&#xA;packet is received by the other device, the received data is shown on its&#xD;&#xA;LCD. If the packet is received with CRC error this is printed as well. In case&#xD;&#xA;the data is received properly the receiver automatically sends back an&#xD;&#xA;acknowledge packet. The transmitted and received 'ACK' packet is shown on &#xD;&#xA;the LCD as well.&#xD;&#xA;&#xD;&#xA;The user can send specified or unlimited number of packets by pushing PB1.&#xD;&#xA;The user can cease the transmission by pushing PB1 again.&#xD;&#xA;The number of transmitted packets is configurable.&#xD;&#xA;&#xD;&#xA;The application implements Packet Trace functionality, that means that the&#xD;&#xA;user can observe transmitted and received packets with the Network Analyzer Tool&#xD;&#xA;of Simplicity studio using the built-in default radio configuration header files.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6200A_EZR32LG Development Kit&#xD;&#xA;Device: EZR32LG330F256R60&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32LG 868 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6200A_EZR32LG/examples/ezradio_trx_ack/SimplicityStudio/SLWSTK6200A_ezradio_trx_ack.slsproj,../hardware/kit/SLWSTK6200A_EZR32LG/examples/ezradio_trx_ack/arm/ezradio_trx_ack.uvprojx,../hardware/kit/SLWSTK6200A_EZR32LG/examples/ezradio_trx_ack/iar/ezradio_trx_ack.eww"/>
    <properties key="core.boardCompatibility" value="brd4502a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6200A_ezradio_direct_tx" description="&lt;h1&gt;&lt;b&gt;EZRadio Direct Tx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32LG CMSIS including emlib, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use this example together with the Direct Rx example&#xD;&#xA;running on an other node, so the link functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can start direct transmission by pressing the PB0 button. &#xD;&#xA;Ceasing direct transmission can be issued by pressing the PB0 button again.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6200A_EZR32LG Development Kit&#xD;&#xA;Device: EZR32LG330F256R60&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32LG 868 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6200A_EZR32LG/examples/ezradio_direct_tx/SimplicityStudio/SLWSTK6200A_ezradio_direct_tx.slsproj,../hardware/kit/SLWSTK6200A_EZR32LG/examples/ezradio_direct_tx/arm/ezradio_direct_tx.uvprojx,../hardware/kit/SLWSTK6200A_EZR32LG/examples/ezradio_direct_tx/iar/ezradio_direct_tx.eww"/>
    <properties key="core.boardCompatibility" value="brd4502a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6200A_ezradio_direct_rx" description="&lt;h1&gt;&lt;b&gt;EZRadio Direct Rx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32LG CMSIS including emlib, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use this example together with the Direct Tx example&#xD;&#xA;running on an other node, so the link functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can start direct reception by pressing the PB0 button. &#xD;&#xA;Ceasing direct reception can be issued by pressing the PB0 button again.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6200A_EZR32LG Development Kit&#xD;&#xA;Device: EZR32LG330F256R60&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32LG 868 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6200A_EZR32LG/examples/ezradio_direct_rx/SimplicityStudio/SLWSTK6200A_ezradio_direct_rx.slsproj,../hardware/kit/SLWSTK6200A_EZR32LG/examples/ezradio_direct_rx/arm/ezradio_direct_rx.uvprojx,../hardware/kit/SLWSTK6200A_EZR32LG/examples/ezradio_direct_rx/iar/ezradio_direct_rx.eww"/>
    <properties key="core.boardCompatibility" value="brd4502a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6200A_ezradio_pn9" description="&lt;h1&gt;&lt;b&gt;EZRadio PN9 transmission example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32LG CMSIS including emlib, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;The user can start PN9 (pseudorandom binary where N=9) transmission by pressing&#xD;&#xA;the PB0 button. Ceasing the transmission can be issued by pressing the PB0 &#xD;&#xA;button again. &#xD;&#xA;See the EzRadio documentation for more information on PN9 transmission.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6200A_EZR32LG Development Kit&#xD;&#xA;Device: EZR32LG330F256R60&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32LG 868 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6200A_EZR32LG/examples/ezradio_pn9/SimplicityStudio/SLWSTK6200A_ezradio_pn9.slsproj,../hardware/kit/SLWSTK6200A_EZR32LG/examples/ezradio_pn9/arm/ezradio_pn9.uvprojx,../hardware/kit/SLWSTK6200A_EZR32LG/examples/ezradio_pn9/iar/ezradio_pn9.eww"/>
    <properties key="core.boardCompatibility" value="brd4502a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6200A_ezradio_unmodulated_carrier" description="&lt;h1&gt;&lt;b&gt;EZRadio Unmodulated Carrier transmission example using the EZRadio device in&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;the EZR32 device.&#xD;&#xA;&#xD;&#xA;This example project uses the EZR32LG CMSIS including emlib, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;The user can start CW transmission by pressing the PB0 button. &#xD;&#xA;Ceasing the transmission can be issued by pressing the PB0 button again.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6200A_EZR32LG Development Kit&#xD;&#xA;Device: EZR32LG330F256R60&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32LG 868 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6200A_EZR32LG/examples/ezradio_unmodulated_carrier/SimplicityStudio/SLWSTK6200A_ezradio_unmodulated_carrier.slsproj,../hardware/kit/SLWSTK6200A_EZR32LG/examples/ezradio_unmodulated_carrier/arm/ezradio_unmodulated_carrier.uvprojx,../hardware/kit/SLWSTK6200A_EZR32LG/examples/ezradio_unmodulated_carrier/iar/ezradio_unmodulated_carrier.eww"/>
    <properties key="core.boardCompatibility" value="brd4502a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6201A_blink" description="&lt;h1&gt;&lt;b&gt;Blink example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use CMSIS and the emlib peripheral library to&#xD;&#xA;demonstrate the use of the LED's on the starter kit. This example is intended as&#xD;&#xA;a skeleton for new projects.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6201A_EZR32LG Starter Kit&#xD;&#xA;Device: EZR32LG330F256R55&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32LG 434 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6201A_EZR32LG/examples/blink/SimplicityStudio/SLWSTK6201A_blink.slsproj,../hardware/kit/SLWSTK6201A_EZR32LG/examples/blink/arm/blink.uvprojx,../hardware/kit/SLWSTK6201A_EZR32LG/examples/blink/iar/blink.eww"/>
    <properties key="core.boardCompatibility" value="brd4502b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.lg.*.ezr32lg330f256r55."/>
    <properties key="template.initiallyOpenedResource" value="src/blink.c"/>
  </descriptors>
  <descriptors label="SLWSTK6201A_clock" description="&lt;h1&gt;&lt;b&gt;Analog and digital clock example using the Memory LCD on the SLWSTK6201A_EZR32LG.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses CMSIS including emlib and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the Sharp Memory LCD display on the SLWSTK6201A_EZR32LG kit.&#xD;&#xA;&#xD;&#xA;The user can switch between analog and digital clock modes by pushing&#xD;&#xA;the PB0 button.&#xD;&#xA;&#xD;&#xA;The user can increment the minute count by pushing the PB1 button.&#xD;&#xA;The minute count can be incremented by pushing the PB1 button for more&#xD;&#xA;than 0.5 seconds.&#xD;&#xA;&#xD;&#xA;The analog clock mode demonstrates the use of GLIB to draw hour, minute&#xD;&#xA;and second pointers on the background which is a bitmap in flash memory.&#xD;&#xA;&#xD;&#xA;The digital clock demonstrates the 16x20 font (including number characters&#xD;&#xA;only) of the textdisplay driver.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6201A_EZR32LG Development Kit&#xD;&#xA;Device: EZR32LG330F256R55&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32LG 434 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6201A_EZR32LG/examples/clock/SimplicityStudio/SLWSTK6201A_clock.slsproj,../hardware/kit/SLWSTK6201A_EZR32LG/examples/clock/arm/clock.uvprojx,../hardware/kit/SLWSTK6201A_EZR32LG/examples/clock/iar/clock.eww"/>
    <properties key="core.boardCompatibility" value="brd4502b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.lg.*.ezr32lg330f256r55."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6201A_humitemp" description="&lt;h1&gt;&lt;b&gt;Humidity and temperature demo using the on-board si7021 sensor on the&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;SLWSTK6201A_EZR32LG board.&#xD;&#xA;&#xD;&#xA;This example project uses CMSIS including emlib and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the Sharp Memory LCD display and the si7021 humidity and temperature sensor on the&#xD;&#xA;SLWSTK6201A_EZR32LG board.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6201A_EZR32LG starter kit.&#xD;&#xA;Device: EZR32LG330F256R55&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32LG 434 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6201A_EZR32LG/examples/humitemp/SimplicityStudio/SLWSTK6201A_humitemp.slsproj,../hardware/kit/SLWSTK6201A_EZR32LG/examples/humitemp/arm/humitemp.uvprojx,../hardware/kit/SLWSTK6201A_EZR32LG/examples/humitemp/iar/humitemp.eww"/>
    <properties key="core.boardCompatibility" value="brd4502b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.lg.*.ezr32lg330f256r55."/>
    <properties key="template.initiallyOpenedResource" value="src/humitemp.c"/>
  </descriptors>
  <descriptors label="SLWSTK6201A_rs232" description="&lt;h1&gt;&lt;b&gt;VCOM/USART/LEUART RS232 output example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses CMSIS and emlib, to demonstrates the&#xD;&#xA;use of LEUART, USART or VCOM  communication on the SLWSTK6201A_EZR32LG&#xD;&#xA;development kit.&#xD;&#xA;&#xD;&#xA;Serial port selection is done by defining any one of compiletime macros:&#xD;&#xA;#define RETARGET_LEUART0&#xD;&#xA;#define RETARGET_USART1&#xD;&#xA;#define RETARGET_USART2&#xD;&#xA;#define RETARGET_VCOM       (default)&#xD;&#xA;&#xD;&#xA;If a USART is used set terminal configuration to 115200-8-N-1.&#xD;&#xA;If the LEUART is used set terminal configuration to 9600-8-N-1.&#xD;&#xA;For the default VCOM communication mode, serial port settings are &quot;dont care&quot;.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6201A_EZR32LG Development Kit&#xD;&#xA;Device: EZR32LG330F256R55&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32LG 434 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6201A_EZR32LG/examples/rs232/SimplicityStudio/SLWSTK6201A_rs232.slsproj,../hardware/kit/SLWSTK6201A_EZR32LG/examples/rs232/arm/rs232.uvprojx,../hardware/kit/SLWSTK6201A_EZR32LG/examples/rs232/iar/rs232.eww"/>
    <properties key="core.boardCompatibility" value="brd4502b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.lg.*.ezr32lg330f256r55."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6201A_ezradio_simple_trx" description="&lt;h1&gt;&lt;b&gt;EZRadio simple TRx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32LG CMSIS including emlib, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use two boards with same configuration and firmware, so&#xD;&#xA;both packet transmission and reception functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can send one packet with the radio by pushing the PB0 button. The&#xD;&#xA;data counter in the packet is incremented and shown on the LCD. If the&#xD;&#xA;packet is received by the other device, the received data is shown on its&#xD;&#xA;LCD. If the packet is received with CRC error this is printed as well.&#xD;&#xA;&#xD;&#xA;The user can send specified or unlimited number of packets by pushing PB1.&#xD;&#xA;The user can cease the transmission by pushing PB1 again.&#xD;&#xA;The number of transmitted packets is configurable.&#xD;&#xA;&#xD;&#xA;The application implements Packet Trace functionality, that means that the&#xD;&#xA;user can observe transmitted and received packets with the Network Analyzer Tool&#xD;&#xA;of Simplicity studio using the built-in default radio configuration header files.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6201A_EZR32LG Development Kit&#xD;&#xA;Device: EZR32LG330F256R55&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32LG 434 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6201A_EZR32LG/examples/ezradio_simple_trx/SimplicityStudio/SLWSTK6201A_ezradio_simple_trx.slsproj,../hardware/kit/SLWSTK6201A_EZR32LG/examples/ezradio_simple_trx/arm/ezradio_simple_trx.uvprojx,../hardware/kit/SLWSTK6201A_EZR32LG/examples/ezradio_simple_trx/iar/ezradio_simple_trx.eww"/>
    <properties key="core.boardCompatibility" value="brd4502b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.lg.*.ezr32lg330f256r55."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6201A_ezradio_trx_ack" description="&lt;h1&gt;&lt;b&gt;EZRadio TRx with auto acknowledge example using the EZRadio device in the EZR32&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt; device.&#xD;&#xA;&#xD;&#xA;This example project uses the EZR32LG CMSIS including emlib, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use two boards with same configuration and firmware, so&#xD;&#xA;both packet transmission and reception functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can send one packet with the radio by pushing the PB0 button. The&#xD;&#xA;data counter in the packet is incremented and shown on the LCD. If the&#xD;&#xA;packet is received by the other device, the received data is shown on its&#xD;&#xA;LCD. If the packet is received with CRC error this is printed as well. In case&#xD;&#xA;the data is received properly the receiver automatically sends back an&#xD;&#xA;acknowledge packet. The transmitted and received 'ACK' packet is shown on &#xD;&#xA;the LCD as well.&#xD;&#xA;&#xD;&#xA;The user can send specified or unlimited number of packets by pushing PB1.&#xD;&#xA;The user can cease the transmission by pushing PB1 again.&#xD;&#xA;The number of transmitted packets is configurable.&#xD;&#xA;&#xD;&#xA;The application implements Packet Trace functionality, that means that the&#xD;&#xA;user can observe transmitted and received packets with the Network Analyzer Tool&#xD;&#xA;of Simplicity studio using the built-in default radio configuration header files.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6201A_EZR32LG Development Kit&#xD;&#xA;Device: EZR32LG330F256R55&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32LG 434 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6201A_EZR32LG/examples/ezradio_trx_ack/SimplicityStudio/SLWSTK6201A_ezradio_trx_ack.slsproj,../hardware/kit/SLWSTK6201A_EZR32LG/examples/ezradio_trx_ack/arm/ezradio_trx_ack.uvprojx,../hardware/kit/SLWSTK6201A_EZR32LG/examples/ezradio_trx_ack/iar/ezradio_trx_ack.eww"/>
    <properties key="core.boardCompatibility" value="brd4502b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.lg.*.ezr32lg330f256r55."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6201A_ezradio_direct_tx" description="&lt;h1&gt;&lt;b&gt;EZRadio Direct Tx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32LG CMSIS including emlib, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use this example together with the Direct Rx example&#xD;&#xA;running on an other node, so the link functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can start direct transmission by pressing the PB0 button. &#xD;&#xA;Ceasing direct transmission can be issued by pressing the PB0 button again.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6201A_EZR32LG Development Kit&#xD;&#xA;Device: EZR32LG330F256R55&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32LG 434 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6201A_EZR32LG/examples/ezradio_direct_tx/SimplicityStudio/SLWSTK6201A_ezradio_direct_tx.slsproj,../hardware/kit/SLWSTK6201A_EZR32LG/examples/ezradio_direct_tx/arm/ezradio_direct_tx.uvprojx,../hardware/kit/SLWSTK6201A_EZR32LG/examples/ezradio_direct_tx/iar/ezradio_direct_tx.eww"/>
    <properties key="core.boardCompatibility" value="brd4502b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.lg.*.ezr32lg330f256r55."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6201A_ezradio_direct_rx" description="&lt;h1&gt;&lt;b&gt;EZRadio Direct Rx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32LG CMSIS including emlib, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use this example together with the Direct Tx example&#xD;&#xA;running on an other node, so the link functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can start direct reception by pressing the PB0 button. &#xD;&#xA;Ceasing direct reception can be issued by pressing the PB0 button again.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6201A_EZR32LG Development Kit&#xD;&#xA;Device: EZR32LG330F256R55&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32LG 434 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6201A_EZR32LG/examples/ezradio_direct_rx/SimplicityStudio/SLWSTK6201A_ezradio_direct_rx.slsproj,../hardware/kit/SLWSTK6201A_EZR32LG/examples/ezradio_direct_rx/arm/ezradio_direct_rx.uvprojx,../hardware/kit/SLWSTK6201A_EZR32LG/examples/ezradio_direct_rx/iar/ezradio_direct_rx.eww"/>
    <properties key="core.boardCompatibility" value="brd4502b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.lg.*.ezr32lg330f256r55."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6201A_ezradio_pn9" description="&lt;h1&gt;&lt;b&gt;EZRadio PN9 transmission example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32LG CMSIS including emlib, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;The user can start PN9 (pseudorandom binary where N=9) transmission by pressing&#xD;&#xA;the PB0 button. Ceasing the transmission can be issued by pressing the PB0 &#xD;&#xA;button again. &#xD;&#xA;See the EzRadio documentation for more information on PN9 transmission.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6201A_EZR32LG Development Kit&#xD;&#xA;Device: EZR32LG330F256R55&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32LG 434 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6201A_EZR32LG/examples/ezradio_pn9/SimplicityStudio/SLWSTK6201A_ezradio_pn9.slsproj,../hardware/kit/SLWSTK6201A_EZR32LG/examples/ezradio_pn9/arm/ezradio_pn9.uvprojx,../hardware/kit/SLWSTK6201A_EZR32LG/examples/ezradio_pn9/iar/ezradio_pn9.eww"/>
    <properties key="core.boardCompatibility" value="brd4502b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.lg.*.ezr32lg330f256r55."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6201A_ezradio_unmodulated_carrier" description="&lt;h1&gt;&lt;b&gt;EZRadio Unmodulated Carrier transmission example using the EZRadio device in&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;the EZR32 device.&#xD;&#xA;&#xD;&#xA;This example project uses the EZR32LG CMSIS including emlib, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;The user can start CW transmission by pressing the PB0 button. &#xD;&#xA;Ceasing the transmission can be issued by pressing the PB0 button again.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6201A_EZR32LG Development Kit&#xD;&#xA;Device: EZR32LG330F256R55&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32LG 434 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6201A_EZR32LG/examples/ezradio_unmodulated_carrier/SimplicityStudio/SLWSTK6201A_ezradio_unmodulated_carrier.slsproj,../hardware/kit/SLWSTK6201A_EZR32LG/examples/ezradio_unmodulated_carrier/arm/ezradio_unmodulated_carrier.uvprojx,../hardware/kit/SLWSTK6201A_EZR32LG/examples/ezradio_unmodulated_carrier/iar/ezradio_unmodulated_carrier.eww"/>
    <properties key="core.boardCompatibility" value="brd4502b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.lg.*.ezr32lg330f256r55."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6202A_blink" description="&lt;h1&gt;&lt;b&gt;Blink example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use CMSIS and the emlib peripheral library to&#xD;&#xA;demonstrate the use of the LED's on the starter kit. This example is intended as&#xD;&#xA;a skeleton for new projects.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6202A_EZR32LG Starter Kit&#xD;&#xA;Device: EZR32LG330F256R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32LG 915 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6202A_EZR32LG/examples/blink/SimplicityStudio/SLWSTK6202A_blink.slsproj,../hardware/kit/SLWSTK6202A_EZR32LG/examples/blink/arm/blink.uvprojx,../hardware/kit/SLWSTK6202A_EZR32LG/examples/blink/iar/blink.eww"/>
    <properties key="core.boardCompatibility" value="brd4503a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.lg.*.ezr32lg330f256r63."/>
    <properties key="template.initiallyOpenedResource" value="src/blink.c"/>
  </descriptors>
  <descriptors label="SLWSTK6202A_clock" description="&lt;h1&gt;&lt;b&gt;Analog and digital clock example using the Memory LCD on the SLWSTK6202A_EZR32LG.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses CMSIS including emlib and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the Sharp Memory LCD display on the SLWSTK6202A_EZR32LG kit.&#xD;&#xA;&#xD;&#xA;The user can switch between analog and digital clock modes by pushing&#xD;&#xA;the PB0 button.&#xD;&#xA;&#xD;&#xA;The user can increment the minute count by pushing the PB1 button.&#xD;&#xA;The minute count can be incremented by pushing the PB1 button for more&#xD;&#xA;than 0.5 seconds.&#xD;&#xA;&#xD;&#xA;The analog clock mode demonstrates the use of GLIB to draw hour, minute&#xD;&#xA;and second pointers on the background which is a bitmap in flash memory.&#xD;&#xA;&#xD;&#xA;The digital clock demonstrates the 16x20 font (including number characters&#xD;&#xA;only) of the textdisplay driver.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6202A_EZR32LG Development Kit&#xD;&#xA;Device: EZR32LG330F256R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32LG 915 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6202A_EZR32LG/examples/clock/SimplicityStudio/SLWSTK6202A_clock.slsproj,../hardware/kit/SLWSTK6202A_EZR32LG/examples/clock/arm/clock.uvprojx,../hardware/kit/SLWSTK6202A_EZR32LG/examples/clock/iar/clock.eww"/>
    <properties key="core.boardCompatibility" value="brd4503a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.lg.*.ezr32lg330f256r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6202A_humitemp" description="&lt;h1&gt;&lt;b&gt;Humidity and temperature demo using the on-board si7021 sensor on the&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;SLWSTK6202A_EZR32LG board.&#xD;&#xA;&#xD;&#xA;This example project uses CMSIS including emlib and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the Sharp Memory LCD display and the si7021 humidity and temperature sensor on the&#xD;&#xA;SLWSTK6202A_EZR32LG board.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6202A_EZR32LG starter kit.&#xD;&#xA;Device: EZR32LG330F256R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32LG 915 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6202A_EZR32LG/examples/humitemp/SimplicityStudio/SLWSTK6202A_humitemp.slsproj,../hardware/kit/SLWSTK6202A_EZR32LG/examples/humitemp/arm/humitemp.uvprojx,../hardware/kit/SLWSTK6202A_EZR32LG/examples/humitemp/iar/humitemp.eww"/>
    <properties key="core.boardCompatibility" value="brd4503a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.lg.*.ezr32lg330f256r63."/>
    <properties key="template.initiallyOpenedResource" value="src/humitemp.c"/>
  </descriptors>
  <descriptors label="SLWSTK6202A_rangeTest" description="&lt;h1&gt;&lt;b&gt;Range Test example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;The Range Test application can be used to evaluate Silicon Laboratories radio&#xD;&#xA;chips including performace, sensitivity or blocking measurements.&#xD;&#xA;&#xD;&#xA;Range Test creates a radio link between two evaluation kits and sends &#xD;&#xA;predefined amount of packets from the transmitter side to the receiver.&#xD;&#xA;The receiver calculates Packet Error Rate (PER) and Moving-Average (MA) of PER&#xD;&#xA;based on the packets received. It also displays the current RSSI level in dBm&#xD;&#xA;units and draws a chart of the RSSI historical data.&#xD;&#xA;For long tests the transmitter can be set up to transmit continuously. It is not&#xD;&#xA;necessary to start both sides synchronously.&#xD;&#xA;&#xD;&#xA;*PLEASE NOTE* This example uses the radio extensively and could transmit at high&#xD;&#xA;RF power levels that may result in higher peak current consumption. Due to the&#xD;&#xA;peak current demand this example is not suited to run on a coin cell battery.&#xD;&#xA;If standalone operation is required please consider the use of an external USB&#xD;&#xA;connected battery or other power source.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6202A_EZR32LG Starter Kit&#xD;&#xA;Device: EZR32LG330F256R63&lt;/pre&gt;">
    <properties key="template.category" value="EZR32LG 915 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6202A_EZR32LG/examples/rangeTest/SimplicityStudio/SLWSTK6202A_rangeTest.slsproj"/>
    <properties key="core.boardCompatibility" value="brd4503a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.lg.*.ezr32lg330f256r63."/>
    <properties key="template.initiallyOpenedResource" value="configuration/rangetestconfig.c"/>
  </descriptors>
  <descriptors label="SLWSTK6202A_rs232" description="&lt;h1&gt;&lt;b&gt;VCOM/USART/LEUART RS232 output example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses CMSIS and emlib, to demonstrates the&#xD;&#xA;use of LEUART, USART or VCOM  communication on the SLWSTK6202A_EZR32LG&#xD;&#xA;development kit.&#xD;&#xA;&#xD;&#xA;Serial port selection is done by defining any one of compiletime macros:&#xD;&#xA;#define RETARGET_LEUART0&#xD;&#xA;#define RETARGET_USART1&#xD;&#xA;#define RETARGET_USART2&#xD;&#xA;#define RETARGET_VCOM       (default)&#xD;&#xA;&#xD;&#xA;If a USART is used set terminal configuration to 115200-8-N-1.&#xD;&#xA;If the LEUART is used set terminal configuration to 9600-8-N-1.&#xD;&#xA;For the default VCOM communication mode, serial port settings are &quot;dont care&quot;.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6202A_EZR32LG Development Kit&#xD;&#xA;Device: EZR32LG330F256R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32LG 915 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6202A_EZR32LG/examples/rs232/SimplicityStudio/SLWSTK6202A_rs232.slsproj,../hardware/kit/SLWSTK6202A_EZR32LG/examples/rs232/arm/rs232.uvprojx,../hardware/kit/SLWSTK6202A_EZR32LG/examples/rs232/iar/rs232.eww"/>
    <properties key="core.boardCompatibility" value="brd4503a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.lg.*.ezr32lg330f256r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6202A_ezradio_simple_trx" description="&lt;h1&gt;&lt;b&gt;EZRadio simple TRx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32LG CMSIS including emlib, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use two boards with same configuration and firmware, so&#xD;&#xA;both packet transmission and reception functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can send one packet with the radio by pushing the PB0 button. The&#xD;&#xA;data counter in the packet is incremented and shown on the LCD. If the&#xD;&#xA;packet is received by the other device, the received data is shown on its&#xD;&#xA;LCD. If the packet is received with CRC error this is printed as well.&#xD;&#xA;&#xD;&#xA;The user can send specified or unlimited number of packets by pushing PB1.&#xD;&#xA;The user can cease the transmission by pushing PB1 again.&#xD;&#xA;The number of transmitted packets is configurable.&#xD;&#xA;&#xD;&#xA;The application implements Packet Trace functionality, that means that the&#xD;&#xA;user can observe transmitted and received packets with the Network Analyzer Tool&#xD;&#xA;of Simplicity studio using the built-in default radio configuration header files.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6202A_EZR32LG Development Kit&#xD;&#xA;Device: EZR32LG330F256R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32LG 915 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6202A_EZR32LG/examples/ezradio_simple_trx/SimplicityStudio/SLWSTK6202A_ezradio_simple_trx.slsproj,../hardware/kit/SLWSTK6202A_EZR32LG/examples/ezradio_simple_trx/arm/ezradio_simple_trx.uvprojx,../hardware/kit/SLWSTK6202A_EZR32LG/examples/ezradio_simple_trx/iar/ezradio_simple_trx.eww"/>
    <properties key="core.boardCompatibility" value="brd4503a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.lg.*.ezr32lg330f256r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6202A_ezradio_trx_ack" description="&lt;h1&gt;&lt;b&gt;EZRadio TRx with auto acknowledge example using the EZRadio device in the EZR32&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt; device.&#xD;&#xA;&#xD;&#xA;This example project uses the EZR32LG CMSIS including emlib, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use two boards with same configuration and firmware, so&#xD;&#xA;both packet transmission and reception functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can send one packet with the radio by pushing the PB0 button. The&#xD;&#xA;data counter in the packet is incremented and shown on the LCD. If the&#xD;&#xA;packet is received by the other device, the received data is shown on its&#xD;&#xA;LCD. If the packet is received with CRC error this is printed as well. In case&#xD;&#xA;the data is received properly the receiver automatically sends back an&#xD;&#xA;acknowledge packet. The transmitted and received 'ACK' packet is shown on &#xD;&#xA;the LCD as well.&#xD;&#xA;&#xD;&#xA;The user can send specified or unlimited number of packets by pushing PB1.&#xD;&#xA;The user can cease the transmission by pushing PB1 again.&#xD;&#xA;The number of transmitted packets is configurable.&#xD;&#xA;&#xD;&#xA;The application implements Packet Trace functionality, that means that the&#xD;&#xA;user can observe transmitted and received packets with the Network Analyzer Tool&#xD;&#xA;of Simplicity studio using the built-in default radio configuration header files.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6202A_EZR32LG Development Kit&#xD;&#xA;Device: EZR32LG330F256R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32LG 915 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6202A_EZR32LG/examples/ezradio_trx_ack/SimplicityStudio/SLWSTK6202A_ezradio_trx_ack.slsproj,../hardware/kit/SLWSTK6202A_EZR32LG/examples/ezradio_trx_ack/arm/ezradio_trx_ack.uvprojx,../hardware/kit/SLWSTK6202A_EZR32LG/examples/ezradio_trx_ack/iar/ezradio_trx_ack.eww"/>
    <properties key="core.boardCompatibility" value="brd4503a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.lg.*.ezr32lg330f256r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6202A_ezradio_direct_tx" description="&lt;h1&gt;&lt;b&gt;EZRadio Direct Tx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32LG CMSIS including emlib, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use this example together with the Direct Rx example&#xD;&#xA;running on an other node, so the link functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can start direct transmission by pressing the PB0 button. &#xD;&#xA;Ceasing direct transmission can be issued by pressing the PB0 button again.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6202A_EZR32LG Development Kit&#xD;&#xA;Device: EZR32LG330F256R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32LG 915 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6202A_EZR32LG/examples/ezradio_direct_tx/SimplicityStudio/SLWSTK6202A_ezradio_direct_tx.slsproj,../hardware/kit/SLWSTK6202A_EZR32LG/examples/ezradio_direct_tx/arm/ezradio_direct_tx.uvprojx,../hardware/kit/SLWSTK6202A_EZR32LG/examples/ezradio_direct_tx/iar/ezradio_direct_tx.eww"/>
    <properties key="core.boardCompatibility" value="brd4503a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.lg.*.ezr32lg330f256r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6202A_ezradio_direct_rx" description="&lt;h1&gt;&lt;b&gt;EZRadio Direct Rx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32LG CMSIS including emlib, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use this example together with the Direct Tx example&#xD;&#xA;running on an other node, so the link functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can start direct reception by pressing the PB0 button. &#xD;&#xA;Ceasing direct reception can be issued by pressing the PB0 button again.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6202A_EZR32LG Development Kit&#xD;&#xA;Device: EZR32LG330F256R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32LG 915 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6202A_EZR32LG/examples/ezradio_direct_rx/SimplicityStudio/SLWSTK6202A_ezradio_direct_rx.slsproj,../hardware/kit/SLWSTK6202A_EZR32LG/examples/ezradio_direct_rx/arm/ezradio_direct_rx.uvprojx,../hardware/kit/SLWSTK6202A_EZR32LG/examples/ezradio_direct_rx/iar/ezradio_direct_rx.eww"/>
    <properties key="core.boardCompatibility" value="brd4503a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.lg.*.ezr32lg330f256r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6202A_ezradio_pn9" description="&lt;h1&gt;&lt;b&gt;EZRadio PN9 transmission example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32LG CMSIS including emlib, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;The user can start PN9 (pseudorandom binary where N=9) transmission by pressing&#xD;&#xA;the PB0 button. Ceasing the transmission can be issued by pressing the PB0 &#xD;&#xA;button again. &#xD;&#xA;See the EzRadio documentation for more information on PN9 transmission.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6202A_EZR32LG Development Kit&#xD;&#xA;Device: EZR32LG330F256R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32LG 915 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6202A_EZR32LG/examples/ezradio_pn9/SimplicityStudio/SLWSTK6202A_ezradio_pn9.slsproj,../hardware/kit/SLWSTK6202A_EZR32LG/examples/ezradio_pn9/arm/ezradio_pn9.uvprojx,../hardware/kit/SLWSTK6202A_EZR32LG/examples/ezradio_pn9/iar/ezradio_pn9.eww"/>
    <properties key="core.boardCompatibility" value="brd4503a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.lg.*.ezr32lg330f256r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6202A_ezradio_unmodulated_carrier" description="&lt;h1&gt;&lt;b&gt;EZRadio Unmodulated Carrier transmission example using the EZRadio device in&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;the EZR32 device.&#xD;&#xA;&#xD;&#xA;This example project uses the EZR32LG CMSIS including emlib, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;The user can start CW transmission by pressing the PB0 button. &#xD;&#xA;Ceasing the transmission can be issued by pressing the PB0 button again.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6202A_EZR32LG Development Kit&#xD;&#xA;Device: EZR32LG330F256R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32LG 915 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6202A_EZR32LG/examples/ezradio_unmodulated_carrier/SimplicityStudio/SLWSTK6202A_ezradio_unmodulated_carrier.slsproj,../hardware/kit/SLWSTK6202A_EZR32LG/examples/ezradio_unmodulated_carrier/arm/ezradio_unmodulated_carrier.uvprojx,../hardware/kit/SLWSTK6202A_EZR32LG/examples/ezradio_unmodulated_carrier/iar/ezradio_unmodulated_carrier.eww"/>
    <properties key="core.boardCompatibility" value="brd4503a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.lg.*.ezr32lg330f256r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6220A_blink" description="&lt;h1&gt;&lt;b&gt;Blink example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use CMSIS and the emlib peripheral library to&#xD;&#xA;demonstrate the use of the LED's on the starter kit. This example is intended as&#xD;&#xA;a skeleton for new projects.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6220A_EZR32WG Starter Kit&#xD;&#xA;Device: EZR32WG330F256R60&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 868 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6220A_EZR32WG/examples/blink/SimplicityStudio/SLWSTK6220A_blink.slsproj,../hardware/kit/SLWSTK6220A_EZR32WG/examples/blink/arm/blink.uvprojx,../hardware/kit/SLWSTK6220A_EZR32WG/examples/blink/iar/blink.eww"/>
    <properties key="core.boardCompatibility" value="brd4502c"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/blink.c"/>
  </descriptors>
  <descriptors label="SLWSTK6220A_clock" description="&lt;h1&gt;&lt;b&gt;Analog and digital clock example using the Memory LCD on the SLWSTK6220A_EZR32WG.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses CMSIS including emlib and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the Sharp Memory LCD display on the SLWSTK6220A_EZR32WG kit.&#xD;&#xA;&#xD;&#xA;The user can switch between analog and digital clock modes by pushing&#xD;&#xA;the PB0 button.&#xD;&#xA;&#xD;&#xA;The user can increment the minute count by pushing the PB1 button.&#xD;&#xA;The minute count can be incremented by pushing the PB1 button for more&#xD;&#xA;than 0.5 seconds.&#xD;&#xA;&#xD;&#xA;The analog clock mode demonstrates the use of GLIB to draw hour, minute&#xD;&#xA;and second pointers on the background which is a bitmap in flash memory.&#xD;&#xA;&#xD;&#xA;The digital clock demonstrates the 16x20 font (including number characters&#xD;&#xA;only) of the textdisplay driver.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6220A_EZR32WG Development Kit&#xD;&#xA;Device: EZR32WG330F256R60&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 868 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6220A_EZR32WG/examples/clock/SimplicityStudio/SLWSTK6220A_clock.slsproj,../hardware/kit/SLWSTK6220A_EZR32WG/examples/clock/arm/clock.uvprojx,../hardware/kit/SLWSTK6220A_EZR32WG/examples/clock/iar/clock.eww"/>
    <properties key="core.boardCompatibility" value="brd4502c"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6220A_humitemp" description="&lt;h1&gt;&lt;b&gt;Humidity and temperature demo using the on-board si7021 sensor on the&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;SLWSTK6220A_EZR32WG board.&#xD;&#xA;&#xD;&#xA;This example project uses CMSIS including emlib and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the Sharp Memory LCD display and the si7021 humidity and temperature sensor on the&#xD;&#xA;SLWSTK6220A_EZR32WG board.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6220A_EZR32WG starter kit.&#xD;&#xA;Device: EZR32WG330F256R60&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 868 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6220A_EZR32WG/examples/humitemp/SimplicityStudio/SLWSTK6220A_humitemp.slsproj,../hardware/kit/SLWSTK6220A_EZR32WG/examples/humitemp/arm/humitemp.uvprojx,../hardware/kit/SLWSTK6220A_EZR32WG/examples/humitemp/iar/humitemp.eww"/>
    <properties key="core.boardCompatibility" value="brd4502c"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/humitemp.c"/>
  </descriptors>
  <descriptors label="SLWSTK6220A_rangeTest" description="&lt;h1&gt;&lt;b&gt;Range Test example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;The Range Test application can be used to evaluate Silicon Laboratories radio&#xD;&#xA;chips including performace, sensitivity or blocking measurements.&#xD;&#xA;&#xD;&#xA;Range Test creates a radio link between two evaluation kits and sends &#xD;&#xA;predefined amount of packets from the transmitter side to the receiver.&#xD;&#xA;The receiver calculates Packet Error Rate (PER) and Moving-Average (MA) of PER&#xD;&#xA;based on the packets received. It also displays the current RSSI level in dBm&#xD;&#xA;units and draws a chart of the RSSI historical data.&#xD;&#xA;For long tests the transmitter can be set up to transmit continuously. It is not&#xD;&#xA;necessary to start both sides synchronously.&#xD;&#xA;&#xD;&#xA;*PLEASE NOTE* This example uses the radio extensively and could transmit at high&#xD;&#xA;RF power levels that may result in higher peak current consumption. Due to the&#xD;&#xA;peak current demand this example is not suited to run on a coin cell battery.&#xD;&#xA;If standalone operation is required please consider the use of an external USB&#xD;&#xA;connected battery or other power source.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6220A_EZR32WG Starter Kit&#xD;&#xA;Device: EZR32WG330F256R60&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 868 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6220A_EZR32WG/examples/rangeTest/SimplicityStudio/SLWSTK6220A_rangeTest.slsproj"/>
    <properties key="core.boardCompatibility" value="brd4502c"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="configuration/rangetestconfig.c"/>
  </descriptors>
  <descriptors label="SLWSTK6220A_rs232" description="&lt;h1&gt;&lt;b&gt;VCOM/USART/LEUART RS232 output example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses CMSIS and emlib, to demonstrates the&#xD;&#xA;use of LEUART, USART or VCOM  communication on the SLWSTK6220A_EZR32WG&#xD;&#xA;development kit.&#xD;&#xA;&#xD;&#xA;Serial port selection is done by defining any one of compiletime macros:&#xD;&#xA;#define RETARGET_LEUART0&#xD;&#xA;#define RETARGET_USART1&#xD;&#xA;#define RETARGET_USART2&#xD;&#xA;#define RETARGET_VCOM       (default)&#xD;&#xA;&#xD;&#xA;If a USART is used set terminal configuration to 115200-8-N-1.&#xD;&#xA;If the LEUART is used set terminal configuration to 9600-8-N-1.&#xD;&#xA;For the default VCOM communication mode, serial port settings are &quot;dont care&quot;.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6220A_EZR32WG Development Kit&#xD;&#xA;Device: EZR32WG330F256R60&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 868 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6220A_EZR32WG/examples/rs232/SimplicityStudio/SLWSTK6220A_rs232.slsproj,../hardware/kit/SLWSTK6220A_EZR32WG/examples/rs232/arm/rs232.uvprojx,../hardware/kit/SLWSTK6220A_EZR32WG/examples/rs232/iar/rs232.eww"/>
    <properties key="core.boardCompatibility" value="brd4502c"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6220A_ezradio_simple_trx" description="&lt;h1&gt;&lt;b&gt;EZRadio simple TRx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32WG CMSIS including emlib, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use two boards with same configuration and firmware, so&#xD;&#xA;both packet transmission and reception functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can send one packet with the radio by pushing the PB0 button. The&#xD;&#xA;data counter in the packet is incremented and shown on the LCD. If the&#xD;&#xA;packet is received by the other device, the received data is shown on its&#xD;&#xA;LCD. If the packet is received with CRC error this is printed as well.&#xD;&#xA;&#xD;&#xA;The user can send specified or unlimited number of packets by pushing PB1.&#xD;&#xA;The user can cease the transmission by pushing PB1 again.&#xD;&#xA;The number of transmitted packets is configurable.&#xD;&#xA;&#xD;&#xA;The application implements Packet Trace functionality, that means that the&#xD;&#xA;user can observe transmitted and received packets with the Network Analyzer Tool&#xD;&#xA;of Simplicity studio using the built-in default radio configuration header files.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6220A_EZR32WG Development Kit&#xD;&#xA;Device: EZR32WG330F256R60&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 868 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6220A_EZR32WG/examples/ezradio_simple_trx/SimplicityStudio/SLWSTK6220A_ezradio_simple_trx.slsproj,../hardware/kit/SLWSTK6220A_EZR32WG/examples/ezradio_simple_trx/arm/ezradio_simple_trx.uvprojx,../hardware/kit/SLWSTK6220A_EZR32WG/examples/ezradio_simple_trx/iar/ezradio_simple_trx.eww"/>
    <properties key="core.boardCompatibility" value="brd4502c"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6220A_ezradio_trx_ack" description="&lt;h1&gt;&lt;b&gt;EZRadio TRx with auto acknowledge example using the EZRadio device in the EZR32&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt; device.&#xD;&#xA;&#xD;&#xA;This example project uses the EZR32WG CMSIS including emlib, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use two boards with same configuration and firmware, so&#xD;&#xA;both packet transmission and reception functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can send one packet with the radio by pushing the PB0 button. The&#xD;&#xA;data counter in the packet is incremented and shown on the LCD. If the&#xD;&#xA;packet is received by the other device, the received data is shown on its&#xD;&#xA;LCD. If the packet is received with CRC error this is printed as well. In case&#xD;&#xA;the data is received properly the receiver automatically sends back an&#xD;&#xA;acknowledge packet. The transmitted and received 'ACK' packet is shown on &#xD;&#xA;the LCD as well.&#xD;&#xA;&#xD;&#xA;The user can send specified or unlimited number of packets by pushing PB1.&#xD;&#xA;The user can cease the transmission by pushing PB1 again.&#xD;&#xA;The number of transmitted packets is configurable.&#xD;&#xA;&#xD;&#xA;The application implements Packet Trace functionality, that means that the&#xD;&#xA;user can observe transmitted and received packets with the Network Analyzer Tool&#xD;&#xA;of Simplicity studio using the built-in default radio configuration header files.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6220A_EZR32WG Development Kit&#xD;&#xA;Device: EZR32WG330F256R60&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 868 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6220A_EZR32WG/examples/ezradio_trx_ack/SimplicityStudio/SLWSTK6220A_ezradio_trx_ack.slsproj,../hardware/kit/SLWSTK6220A_EZR32WG/examples/ezradio_trx_ack/arm/ezradio_trx_ack.uvprojx,../hardware/kit/SLWSTK6220A_EZR32WG/examples/ezradio_trx_ack/iar/ezradio_trx_ack.eww"/>
    <properties key="core.boardCompatibility" value="brd4502c"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6220A_ezradio_direct_tx" description="&lt;h1&gt;&lt;b&gt;EZRadio Direct Tx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32WG CMSIS including emlib, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use this example together with the Direct Rx example&#xD;&#xA;running on an other node, so the link functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can start direct transmission by pressing the PB0 button. &#xD;&#xA;Ceasing direct transmission can be issued by pressing the PB0 button again.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6220A_EZR32WG Development Kit&#xD;&#xA;Device: EZR32WG330F256R60&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 868 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6220A_EZR32WG/examples/ezradio_direct_tx/SimplicityStudio/SLWSTK6220A_ezradio_direct_tx.slsproj,../hardware/kit/SLWSTK6220A_EZR32WG/examples/ezradio_direct_tx/arm/ezradio_direct_tx.uvprojx,../hardware/kit/SLWSTK6220A_EZR32WG/examples/ezradio_direct_tx/iar/ezradio_direct_tx.eww"/>
    <properties key="core.boardCompatibility" value="brd4502c"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6220A_ezradio_direct_rx" description="&lt;h1&gt;&lt;b&gt;EZRadio Direct Rx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32WG CMSIS including emlib, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use this example together with the Direct Tx example&#xD;&#xA;running on an other node, so the link functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can start direct reception by pressing the PB0 button. &#xD;&#xA;Ceasing direct reception can be issued by pressing the PB0 button again.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6220A_EZR32WG Development Kit&#xD;&#xA;Device: EZR32WG330F256R60&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 868 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6220A_EZR32WG/examples/ezradio_direct_rx/SimplicityStudio/SLWSTK6220A_ezradio_direct_rx.slsproj,../hardware/kit/SLWSTK6220A_EZR32WG/examples/ezradio_direct_rx/arm/ezradio_direct_rx.uvprojx,../hardware/kit/SLWSTK6220A_EZR32WG/examples/ezradio_direct_rx/iar/ezradio_direct_rx.eww"/>
    <properties key="core.boardCompatibility" value="brd4502c"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6220A_ezradio_pn9" description="&lt;h1&gt;&lt;b&gt;EZRadio PN9 transmission example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32WG CMSIS including emlib, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;The user can start PN9 (pseudorandom binary where N=9) transmission by pressing&#xD;&#xA;the PB0 button. Ceasing the transmission can be issued by pressing the PB0 &#xD;&#xA;button again. &#xD;&#xA;See the EzRadio documentation for more information on PN9 transmission.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6220A_EZR32WG Development Kit&#xD;&#xA;Device: EZR32WG330F256R60&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 868 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6220A_EZR32WG/examples/ezradio_pn9/SimplicityStudio/SLWSTK6220A_ezradio_pn9.slsproj,../hardware/kit/SLWSTK6220A_EZR32WG/examples/ezradio_pn9/arm/ezradio_pn9.uvprojx,../hardware/kit/SLWSTK6220A_EZR32WG/examples/ezradio_pn9/iar/ezradio_pn9.eww"/>
    <properties key="core.boardCompatibility" value="brd4502c"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6220A_ezradio_unmodulated_carrier" description="&lt;h1&gt;&lt;b&gt;EZRadio Unmodulated Carrier transmission example using the EZRadio device in&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;the EZR32 device.&#xD;&#xA;&#xD;&#xA;This example project uses the EZR32WG CMSIS including emlib, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;The user can start CW transmission by pressing the PB0 button. &#xD;&#xA;Ceasing the transmission can be issued by pressing the PB0 button again.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6220A_EZR32WG Development Kit&#xD;&#xA;Device: EZR32WG330F256R60&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 868 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6220A_EZR32WG/examples/ezradio_unmodulated_carrier/SimplicityStudio/SLWSTK6220A_ezradio_unmodulated_carrier.slsproj,../hardware/kit/SLWSTK6220A_EZR32WG/examples/ezradio_unmodulated_carrier/arm/ezradio_unmodulated_carrier.uvprojx,../hardware/kit/SLWSTK6220A_EZR32WG/examples/ezradio_unmodulated_carrier/iar/ezradio_unmodulated_carrier.eww"/>
    <properties key="core.boardCompatibility" value="brd4502c"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6221A_blink" description="&lt;h1&gt;&lt;b&gt;Blink example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use CMSIS and the emlib peripheral library to&#xD;&#xA;demonstrate the use of the LED's on the starter kit. This example is intended as&#xD;&#xA;a skeleton for new projects.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6221A_EZR32WG Starter Kit&#xD;&#xA;Device: EZR32WG330F256R55&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 434 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6221A_EZR32WG/examples/blink/SimplicityStudio/SLWSTK6221A_blink.slsproj,../hardware/kit/SLWSTK6221A_EZR32WG/examples/blink/arm/blink.uvprojx,../hardware/kit/SLWSTK6221A_EZR32WG/examples/blink/iar/blink.eww"/>
    <properties key="core.boardCompatibility" value="brd4502d"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r55."/>
    <properties key="template.initiallyOpenedResource" value="src/blink.c"/>
  </descriptors>
  <descriptors label="SLWSTK6221A_clock" description="&lt;h1&gt;&lt;b&gt;Analog and digital clock example using the Memory LCD on the SLWSTK6221A_EZR32WG.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses CMSIS including emlib and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the Sharp Memory LCD display on the SLWSTK6221A_EZR32WG kit.&#xD;&#xA;&#xD;&#xA;The user can switch between analog and digital clock modes by pushing&#xD;&#xA;the PB0 button.&#xD;&#xA;&#xD;&#xA;The user can increment the minute count by pushing the PB1 button.&#xD;&#xA;The minute count can be incremented by pushing the PB1 button for more&#xD;&#xA;than 0.5 seconds.&#xD;&#xA;&#xD;&#xA;The analog clock mode demonstrates the use of GLIB to draw hour, minute&#xD;&#xA;and second pointers on the background which is a bitmap in flash memory.&#xD;&#xA;&#xD;&#xA;The digital clock demonstrates the 16x20 font (including number characters&#xD;&#xA;only) of the textdisplay driver.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6221A_EZR32WG Development Kit&#xD;&#xA;Device: EZR32WG330F256R55&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 434 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6221A_EZR32WG/examples/clock/SimplicityStudio/SLWSTK6221A_clock.slsproj,../hardware/kit/SLWSTK6221A_EZR32WG/examples/clock/arm/clock.uvprojx,../hardware/kit/SLWSTK6221A_EZR32WG/examples/clock/iar/clock.eww"/>
    <properties key="core.boardCompatibility" value="brd4502d"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r55."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6221A_humitemp" description="&lt;h1&gt;&lt;b&gt;Humidity and temperature demo using the on-board si7021 sensor on the&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;SLWSTK6221A_EZR32WG board.&#xD;&#xA;&#xD;&#xA;This example project uses CMSIS including emlib and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the Sharp Memory LCD display and the si7021 humidity and temperature sensor on the&#xD;&#xA;SLWSTK6221A_EZR32WG board.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6221A_EZR32WG starter kit.&#xD;&#xA;Device: EZR32WG330F256R55&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 434 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6221A_EZR32WG/examples/humitemp/SimplicityStudio/SLWSTK6221A_humitemp.slsproj,../hardware/kit/SLWSTK6221A_EZR32WG/examples/humitemp/arm/humitemp.uvprojx,../hardware/kit/SLWSTK6221A_EZR32WG/examples/humitemp/iar/humitemp.eww"/>
    <properties key="core.boardCompatibility" value="brd4502d"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r55."/>
    <properties key="template.initiallyOpenedResource" value="src/humitemp.c"/>
  </descriptors>
  <descriptors label="SLWSTK6221A_rs232" description="&lt;h1&gt;&lt;b&gt;VCOM/USART/LEUART RS232 output example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses CMSIS and emlib, to demonstrates the&#xD;&#xA;use of LEUART, USART or VCOM  communication on the SLWSTK6221A_EZR32WG&#xD;&#xA;development kit.&#xD;&#xA;&#xD;&#xA;Serial port selection is done by defining any one of compiletime macros:&#xD;&#xA;#define RETARGET_LEUART0&#xD;&#xA;#define RETARGET_USART1&#xD;&#xA;#define RETARGET_USART2&#xD;&#xA;#define RETARGET_VCOM       (default)&#xD;&#xA;&#xD;&#xA;If a USART is used set terminal configuration to 115200-8-N-1.&#xD;&#xA;If the LEUART is used set terminal configuration to 9600-8-N-1.&#xD;&#xA;For the default VCOM communication mode, serial port settings are &quot;dont care&quot;.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6221A_EZR32WG Development Kit&#xD;&#xA;Device: EZR32WG330F256R55&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 434 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6221A_EZR32WG/examples/rs232/SimplicityStudio/SLWSTK6221A_rs232.slsproj,../hardware/kit/SLWSTK6221A_EZR32WG/examples/rs232/arm/rs232.uvprojx,../hardware/kit/SLWSTK6221A_EZR32WG/examples/rs232/iar/rs232.eww"/>
    <properties key="core.boardCompatibility" value="brd4502d"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r55."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6221A_ezradio_simple_trx" description="&lt;h1&gt;&lt;b&gt;EZRadio simple TRx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32WG CMSIS including emlib, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use two boards with same configuration and firmware, so&#xD;&#xA;both packet transmission and reception functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can send one packet with the radio by pushing the PB0 button. The&#xD;&#xA;data counter in the packet is incremented and shown on the LCD. If the&#xD;&#xA;packet is received by the other device, the received data is shown on its&#xD;&#xA;LCD. If the packet is received with CRC error this is printed as well.&#xD;&#xA;&#xD;&#xA;The user can send specified or unlimited number of packets by pushing PB1.&#xD;&#xA;The user can cease the transmission by pushing PB1 again.&#xD;&#xA;The number of transmitted packets is configurable.&#xD;&#xA;&#xD;&#xA;The application implements Packet Trace functionality, that means that the&#xD;&#xA;user can observe transmitted and received packets with the Network Analyzer Tool&#xD;&#xA;of Simplicity studio using the built-in default radio configuration header files.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6221A_EZR32WG Development Kit&#xD;&#xA;Device: EZR32WG330F256R55&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 434 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6221A_EZR32WG/examples/ezradio_simple_trx/SimplicityStudio/SLWSTK6221A_ezradio_simple_trx.slsproj,../hardware/kit/SLWSTK6221A_EZR32WG/examples/ezradio_simple_trx/arm/ezradio_simple_trx.uvprojx,../hardware/kit/SLWSTK6221A_EZR32WG/examples/ezradio_simple_trx/iar/ezradio_simple_trx.eww"/>
    <properties key="core.boardCompatibility" value="brd4502d"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r55."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6221A_ezradio_trx_ack" description="&lt;h1&gt;&lt;b&gt;EZRadio TRx with auto acknowledge example using the EZRadio device in the EZR32&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt; device.&#xD;&#xA;&#xD;&#xA;This example project uses the EZR32WG CMSIS including emlib, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use two boards with same configuration and firmware, so&#xD;&#xA;both packet transmission and reception functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can send one packet with the radio by pushing the PB0 button. The&#xD;&#xA;data counter in the packet is incremented and shown on the LCD. If the&#xD;&#xA;packet is received by the other device, the received data is shown on its&#xD;&#xA;LCD. If the packet is received with CRC error this is printed as well. In case&#xD;&#xA;the data is received properly the receiver automatically sends back an&#xD;&#xA;acknowledge packet. The transmitted and received 'ACK' packet is shown on &#xD;&#xA;the LCD as well.&#xD;&#xA;&#xD;&#xA;The user can send specified or unlimited number of packets by pushing PB1.&#xD;&#xA;The user can cease the transmission by pushing PB1 again.&#xD;&#xA;The number of transmitted packets is configurable.&#xD;&#xA;&#xD;&#xA;The application implements Packet Trace functionality, that means that the&#xD;&#xA;user can observe transmitted and received packets with the Network Analyzer Tool&#xD;&#xA;of Simplicity studio using the built-in default radio configuration header files.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6221A_EZR32WG Development Kit&#xD;&#xA;Device: EZR32WG330F256R55&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 434 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6221A_EZR32WG/examples/ezradio_trx_ack/SimplicityStudio/SLWSTK6221A_ezradio_trx_ack.slsproj,../hardware/kit/SLWSTK6221A_EZR32WG/examples/ezradio_trx_ack/arm/ezradio_trx_ack.uvprojx,../hardware/kit/SLWSTK6221A_EZR32WG/examples/ezradio_trx_ack/iar/ezradio_trx_ack.eww"/>
    <properties key="core.boardCompatibility" value="brd4502d"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r55."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6221A_ezradio_direct_tx" description="&lt;h1&gt;&lt;b&gt;EZRadio Direct Tx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32WG CMSIS including emlib, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use this example together with the Direct Rx example&#xD;&#xA;running on an other node, so the link functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can start direct transmission by pressing the PB0 button. &#xD;&#xA;Ceasing direct transmission can be issued by pressing the PB0 button again.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6221A_EZR32WG Development Kit&#xD;&#xA;Device: EZR32WG330F256R55&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 434 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6221A_EZR32WG/examples/ezradio_direct_tx/SimplicityStudio/SLWSTK6221A_ezradio_direct_tx.slsproj,../hardware/kit/SLWSTK6221A_EZR32WG/examples/ezradio_direct_tx/arm/ezradio_direct_tx.uvprojx,../hardware/kit/SLWSTK6221A_EZR32WG/examples/ezradio_direct_tx/iar/ezradio_direct_tx.eww"/>
    <properties key="core.boardCompatibility" value="brd4502d"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r55."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6221A_ezradio_direct_rx" description="&lt;h1&gt;&lt;b&gt;EZRadio Direct Rx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32WG CMSIS including emlib, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use this example together with the Direct Tx example&#xD;&#xA;running on an other node, so the link functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can start direct reception by pressing the PB0 button. &#xD;&#xA;Ceasing direct reception can be issued by pressing the PB0 button again.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6221A_EZR32WG Development Kit&#xD;&#xA;Device: EZR32WG330F256R55&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 434 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6221A_EZR32WG/examples/ezradio_direct_rx/SimplicityStudio/SLWSTK6221A_ezradio_direct_rx.slsproj,../hardware/kit/SLWSTK6221A_EZR32WG/examples/ezradio_direct_rx/arm/ezradio_direct_rx.uvprojx,../hardware/kit/SLWSTK6221A_EZR32WG/examples/ezradio_direct_rx/iar/ezradio_direct_rx.eww"/>
    <properties key="core.boardCompatibility" value="brd4502d"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r55."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6221A_ezradio_pn9" description="&lt;h1&gt;&lt;b&gt;EZRadio PN9 transmission example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32WG CMSIS including emlib, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;The user can start PN9 (pseudorandom binary where N=9) transmission by pressing&#xD;&#xA;the PB0 button. Ceasing the transmission can be issued by pressing the PB0 &#xD;&#xA;button again. &#xD;&#xA;See the EzRadio documentation for more information on PN9 transmission.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6221A_EZR32WG Development Kit&#xD;&#xA;Device: EZR32WG330F256R55&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 434 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6221A_EZR32WG/examples/ezradio_pn9/SimplicityStudio/SLWSTK6221A_ezradio_pn9.slsproj,../hardware/kit/SLWSTK6221A_EZR32WG/examples/ezradio_pn9/arm/ezradio_pn9.uvprojx,../hardware/kit/SLWSTK6221A_EZR32WG/examples/ezradio_pn9/iar/ezradio_pn9.eww"/>
    <properties key="core.boardCompatibility" value="brd4502d"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r55."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6221A_ezradio_unmodulated_carrier" description="&lt;h1&gt;&lt;b&gt;EZRadio Unmodulated Carrier transmission example using the EZRadio device in&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;the EZR32 device.&#xD;&#xA;&#xD;&#xA;This example project uses the EZR32WG CMSIS including emlib, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;The user can start CW transmission by pressing the PB0 button. &#xD;&#xA;Ceasing the transmission can be issued by pressing the PB0 button again.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6221A_EZR32WG Development Kit&#xD;&#xA;Device: EZR32WG330F256R55&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 434 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6221A_EZR32WG/examples/ezradio_unmodulated_carrier/SimplicityStudio/SLWSTK6221A_ezradio_unmodulated_carrier.slsproj,../hardware/kit/SLWSTK6221A_EZR32WG/examples/ezradio_unmodulated_carrier/arm/ezradio_unmodulated_carrier.uvprojx,../hardware/kit/SLWSTK6221A_EZR32WG/examples/ezradio_unmodulated_carrier/iar/ezradio_unmodulated_carrier.eww"/>
    <properties key="core.boardCompatibility" value="brd4502d"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r55."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6222A_blink" description="&lt;h1&gt;&lt;b&gt;Blink example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use CMSIS and the emlib peripheral library to&#xD;&#xA;demonstrate the use of the LED's on the starter kit. This example is intended as&#xD;&#xA;a skeleton for new projects.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6222A_EZR32WG Starter Kit&#xD;&#xA;Device: EZR32WG330F256R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 915 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6222A_EZR32WG/examples/blink/SimplicityStudio/SLWSTK6222A_blink.slsproj,../hardware/kit/SLWSTK6222A_EZR32WG/examples/blink/arm/blink.uvprojx,../hardware/kit/SLWSTK6222A_EZR32WG/examples/blink/iar/blink.eww"/>
    <properties key="core.boardCompatibility" value="brd4503b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <properties key="template.initiallyOpenedResource" value="src/blink.c"/>
  </descriptors>
  <descriptors label="SLWSTK6222A_clock" description="&lt;h1&gt;&lt;b&gt;Analog and digital clock example using the Memory LCD on the SLWSTK6222A_EZR32WG.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses CMSIS including emlib and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the Sharp Memory LCD display on the SLWSTK6222A_EZR32WG kit.&#xD;&#xA;&#xD;&#xA;The user can switch between analog and digital clock modes by pushing&#xD;&#xA;the PB0 button.&#xD;&#xA;&#xD;&#xA;The user can increment the minute count by pushing the PB1 button.&#xD;&#xA;The minute count can be incremented by pushing the PB1 button for more&#xD;&#xA;than 0.5 seconds.&#xD;&#xA;&#xD;&#xA;The analog clock mode demonstrates the use of GLIB to draw hour, minute&#xD;&#xA;and second pointers on the background which is a bitmap in flash memory.&#xD;&#xA;&#xD;&#xA;The digital clock demonstrates the 16x20 font (including number characters&#xD;&#xA;only) of the textdisplay driver.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6222A_EZR32WG Development Kit&#xD;&#xA;Device: EZR32WG330F256R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 915 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6222A_EZR32WG/examples/clock/SimplicityStudio/SLWSTK6222A_clock.slsproj,../hardware/kit/SLWSTK6222A_EZR32WG/examples/clock/arm/clock.uvprojx,../hardware/kit/SLWSTK6222A_EZR32WG/examples/clock/iar/clock.eww"/>
    <properties key="core.boardCompatibility" value="brd4503b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6222A_humitemp" description="&lt;h1&gt;&lt;b&gt;Humidity and temperature demo using the on-board si7021 sensor on the&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;SLWSTK6222A_EZR32WG board.&#xD;&#xA;&#xD;&#xA;This example project uses CMSIS including emlib and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the Sharp Memory LCD display and the si7021 humidity and temperature sensor on the&#xD;&#xA;SLWSTK6222A_EZR32WG board.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6222A_EZR32WG starter kit.&#xD;&#xA;Device: EZR32WG330F256R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 915 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6222A_EZR32WG/examples/humitemp/SimplicityStudio/SLWSTK6222A_humitemp.slsproj,../hardware/kit/SLWSTK6222A_EZR32WG/examples/humitemp/arm/humitemp.uvprojx,../hardware/kit/SLWSTK6222A_EZR32WG/examples/humitemp/iar/humitemp.eww"/>
    <properties key="core.boardCompatibility" value="brd4503b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <properties key="template.initiallyOpenedResource" value="src/humitemp.c"/>
  </descriptors>
  <descriptors label="SLWSTK6222A_rangeTest" description="&lt;h1&gt;&lt;b&gt;Range Test example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;The Range Test application can be used to evaluate Silicon Laboratories radio&#xD;&#xA;chips including performace, sensitivity or blocking measurements.&#xD;&#xA;&#xD;&#xA;Range Test creates a radio link between two evaluation kits and sends &#xD;&#xA;predefined amount of packets from the transmitter side to the receiver.&#xD;&#xA;The receiver calculates Packet Error Rate (PER) and Moving-Average (MA) of PER&#xD;&#xA;based on the packets received. It also displays the current RSSI level in dBm&#xD;&#xA;units and draws a chart of the RSSI historical data.&#xD;&#xA;For long tests the transmitter can be set up to transmit continuously. It is not&#xD;&#xA;necessary to start both sides synchronously.&#xD;&#xA;&#xD;&#xA;*PLEASE NOTE* This example uses the radio extensively and could transmit at high&#xD;&#xA;RF power levels that may result in higher peak current consumption. Due to the&#xD;&#xA;peak current demand this example is not suited to run on a coin cell battery.&#xD;&#xA;If standalone operation is required please consider the use of an external USB&#xD;&#xA;connected battery or other power source.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6222A_EZR32WG Starter Kit&#xD;&#xA;Device: EZR32WG330F256R63&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 915 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6222A_EZR32WG/examples/rangeTest/SimplicityStudio/SLWSTK6222A_rangeTest.slsproj"/>
    <properties key="core.boardCompatibility" value="brd4503b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <properties key="template.initiallyOpenedResource" value="configuration/rangetestconfig.c"/>
  </descriptors>
  <descriptors label="SLWSTK6222A_rs232" description="&lt;h1&gt;&lt;b&gt;VCOM/USART/LEUART RS232 output example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses CMSIS and emlib, to demonstrates the&#xD;&#xA;use of LEUART, USART or VCOM  communication on the SLWSTK6222A_EZR32WG&#xD;&#xA;development kit.&#xD;&#xA;&#xD;&#xA;Serial port selection is done by defining any one of compiletime macros:&#xD;&#xA;#define RETARGET_LEUART0&#xD;&#xA;#define RETARGET_USART1&#xD;&#xA;#define RETARGET_USART2&#xD;&#xA;#define RETARGET_VCOM       (default)&#xD;&#xA;&#xD;&#xA;If a USART is used set terminal configuration to 115200-8-N-1.&#xD;&#xA;If the LEUART is used set terminal configuration to 9600-8-N-1.&#xD;&#xA;For the default VCOM communication mode, serial port settings are &quot;dont care&quot;.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6222A_EZR32WG Development Kit&#xD;&#xA;Device: EZR32WG330F256R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 915 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6222A_EZR32WG/examples/rs232/SimplicityStudio/SLWSTK6222A_rs232.slsproj,../hardware/kit/SLWSTK6222A_EZR32WG/examples/rs232/arm/rs232.uvprojx,../hardware/kit/SLWSTK6222A_EZR32WG/examples/rs232/iar/rs232.eww"/>
    <properties key="core.boardCompatibility" value="brd4503b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6222A_ezradio_simple_trx" description="&lt;h1&gt;&lt;b&gt;EZRadio simple TRx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32WG CMSIS including emlib, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use two boards with same configuration and firmware, so&#xD;&#xA;both packet transmission and reception functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can send one packet with the radio by pushing the PB0 button. The&#xD;&#xA;data counter in the packet is incremented and shown on the LCD. If the&#xD;&#xA;packet is received by the other device, the received data is shown on its&#xD;&#xA;LCD. If the packet is received with CRC error this is printed as well.&#xD;&#xA;&#xD;&#xA;The user can send specified or unlimited number of packets by pushing PB1.&#xD;&#xA;The user can cease the transmission by pushing PB1 again.&#xD;&#xA;The number of transmitted packets is configurable.&#xD;&#xA;&#xD;&#xA;The application implements Packet Trace functionality, that means that the&#xD;&#xA;user can observe transmitted and received packets with the Network Analyzer Tool&#xD;&#xA;of Simplicity studio using the built-in default radio configuration header files.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6222A_EZR32WG Development Kit&#xD;&#xA;Device: EZR32WG330F256R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 915 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6222A_EZR32WG/examples/ezradio_simple_trx/SimplicityStudio/SLWSTK6222A_ezradio_simple_trx.slsproj,../hardware/kit/SLWSTK6222A_EZR32WG/examples/ezradio_simple_trx/arm/ezradio_simple_trx.uvprojx,../hardware/kit/SLWSTK6222A_EZR32WG/examples/ezradio_simple_trx/iar/ezradio_simple_trx.eww"/>
    <properties key="core.boardCompatibility" value="brd4503b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6222A_ezradio_trx_ack" description="&lt;h1&gt;&lt;b&gt;EZRadio TRx with auto acknowledge example using the EZRadio device in the EZR32&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt; device.&#xD;&#xA;&#xD;&#xA;This example project uses the EZR32WG CMSIS including emlib, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use two boards with same configuration and firmware, so&#xD;&#xA;both packet transmission and reception functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can send one packet with the radio by pushing the PB0 button. The&#xD;&#xA;data counter in the packet is incremented and shown on the LCD. If the&#xD;&#xA;packet is received by the other device, the received data is shown on its&#xD;&#xA;LCD. If the packet is received with CRC error this is printed as well. In case&#xD;&#xA;the data is received properly the receiver automatically sends back an&#xD;&#xA;acknowledge packet. The transmitted and received 'ACK' packet is shown on &#xD;&#xA;the LCD as well.&#xD;&#xA;&#xD;&#xA;The user can send specified or unlimited number of packets by pushing PB1.&#xD;&#xA;The user can cease the transmission by pushing PB1 again.&#xD;&#xA;The number of transmitted packets is configurable.&#xD;&#xA;&#xD;&#xA;The application implements Packet Trace functionality, that means that the&#xD;&#xA;user can observe transmitted and received packets with the Network Analyzer Tool&#xD;&#xA;of Simplicity studio using the built-in default radio configuration header files.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6222A_EZR32WG Development Kit&#xD;&#xA;Device: EZR32WG330F256R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 915 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6222A_EZR32WG/examples/ezradio_trx_ack/SimplicityStudio/SLWSTK6222A_ezradio_trx_ack.slsproj,../hardware/kit/SLWSTK6222A_EZR32WG/examples/ezradio_trx_ack/arm/ezradio_trx_ack.uvprojx,../hardware/kit/SLWSTK6222A_EZR32WG/examples/ezradio_trx_ack/iar/ezradio_trx_ack.eww"/>
    <properties key="core.boardCompatibility" value="brd4503b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6222A_ezradio_direct_tx" description="&lt;h1&gt;&lt;b&gt;EZRadio Direct Tx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32WG CMSIS including emlib, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use this example together with the Direct Rx example&#xD;&#xA;running on an other node, so the link functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can start direct transmission by pressing the PB0 button. &#xD;&#xA;Ceasing direct transmission can be issued by pressing the PB0 button again.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6222A_EZR32WG Development Kit&#xD;&#xA;Device: EZR32WG330F256R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 915 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6222A_EZR32WG/examples/ezradio_direct_tx/SimplicityStudio/SLWSTK6222A_ezradio_direct_tx.slsproj,../hardware/kit/SLWSTK6222A_EZR32WG/examples/ezradio_direct_tx/arm/ezradio_direct_tx.uvprojx,../hardware/kit/SLWSTK6222A_EZR32WG/examples/ezradio_direct_tx/iar/ezradio_direct_tx.eww"/>
    <properties key="core.boardCompatibility" value="brd4503b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6222A_ezradio_direct_rx" description="&lt;h1&gt;&lt;b&gt;EZRadio Direct Rx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32WG CMSIS including emlib, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use this example together with the Direct Tx example&#xD;&#xA;running on an other node, so the link functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can start direct reception by pressing the PB0 button. &#xD;&#xA;Ceasing direct reception can be issued by pressing the PB0 button again.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6222A_EZR32WG Development Kit&#xD;&#xA;Device: EZR32WG330F256R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 915 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6222A_EZR32WG/examples/ezradio_direct_rx/SimplicityStudio/SLWSTK6222A_ezradio_direct_rx.slsproj,../hardware/kit/SLWSTK6222A_EZR32WG/examples/ezradio_direct_rx/arm/ezradio_direct_rx.uvprojx,../hardware/kit/SLWSTK6222A_EZR32WG/examples/ezradio_direct_rx/iar/ezradio_direct_rx.eww"/>
    <properties key="core.boardCompatibility" value="brd4503b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6222A_ezradio_pn9" description="&lt;h1&gt;&lt;b&gt;EZRadio PN9 transmission example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32WG CMSIS including emlib, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;The user can start PN9 (pseudorandom binary where N=9) transmission by pressing&#xD;&#xA;the PB0 button. Ceasing the transmission can be issued by pressing the PB0 &#xD;&#xA;button again. &#xD;&#xA;See the EzRadio documentation for more information on PN9 transmission.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6222A_EZR32WG Development Kit&#xD;&#xA;Device: EZR32WG330F256R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 915 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6222A_EZR32WG/examples/ezradio_pn9/SimplicityStudio/SLWSTK6222A_ezradio_pn9.slsproj,../hardware/kit/SLWSTK6222A_EZR32WG/examples/ezradio_pn9/arm/ezradio_pn9.uvprojx,../hardware/kit/SLWSTK6222A_EZR32WG/examples/ezradio_pn9/iar/ezradio_pn9.eww"/>
    <properties key="core.boardCompatibility" value="brd4503b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6222A_ezradio_unmodulated_carrier" description="&lt;h1&gt;&lt;b&gt;EZRadio Unmodulated Carrier transmission example using the EZRadio device in&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;the EZR32 device.&#xD;&#xA;&#xD;&#xA;This example project uses the EZR32WG CMSIS including emlib, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;The user can start CW transmission by pressing the PB0 button. &#xD;&#xA;Ceasing the transmission can be issued by pressing the PB0 button again.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6222A_EZR32WG Development Kit&#xD;&#xA;Device: EZR32WG330F256R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 915 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6222A_EZR32WG/examples/ezradio_unmodulated_carrier/SimplicityStudio/SLWSTK6222A_ezradio_unmodulated_carrier.slsproj,../hardware/kit/SLWSTK6222A_EZR32WG/examples/ezradio_unmodulated_carrier/arm/ezradio_unmodulated_carrier.uvprojx,../hardware/kit/SLWSTK6222A_EZR32WG/examples/ezradio_unmodulated_carrier/iar/ezradio_unmodulated_carrier.eww"/>
    <properties key="core.boardCompatibility" value="brd4503b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6223A_blink" description="&lt;h1&gt;&lt;b&gt;Blink example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use CMSIS and the emlib peripheral library to&#xD;&#xA;demonstrate the use of the LED's on the starter kit. This example is intended as&#xD;&#xA;a skeleton for new projects.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6223A_EZR32WG Starter Kit&#xD;&#xA;Device: EZR32WG330F256R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 490 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6223A_EZR32WG/examples/blink/SimplicityStudio/SLWSTK6223A_blink.slsproj,../hardware/kit/SLWSTK6223A_EZR32WG/examples/blink/arm/blink.uvprojx,../hardware/kit/SLWSTK6223A_EZR32WG/examples/blink/iar/blink.eww"/>
    <properties key="core.boardCompatibility" value="brd4505b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <properties key="template.initiallyOpenedResource" value="src/blink.c"/>
  </descriptors>
  <descriptors label="SLWSTK6223A_clock" description="&lt;h1&gt;&lt;b&gt;Analog and digital clock example using the Memory LCD on the SLWSTK6223A_EZR32WG.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses CMSIS including emlib and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the Sharp Memory LCD display on the SLWSTK6223A_EZR32WG kit.&#xD;&#xA;&#xD;&#xA;The user can switch between analog and digital clock modes by pushing&#xD;&#xA;the PB0 button.&#xD;&#xA;&#xD;&#xA;The user can increment the minute count by pushing the PB1 button.&#xD;&#xA;The minute count can be incremented by pushing the PB1 button for more&#xD;&#xA;than 0.5 seconds.&#xD;&#xA;&#xD;&#xA;The analog clock mode demonstrates the use of GLIB to draw hour, minute&#xD;&#xA;and second pointers on the background which is a bitmap in flash memory.&#xD;&#xA;&#xD;&#xA;The digital clock demonstrates the 16x20 font (including number characters&#xD;&#xA;only) of the textdisplay driver.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6223A_EZR32WG Development Kit&#xD;&#xA;Device: EZR32WG330F256R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 490 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6223A_EZR32WG/examples/clock/SimplicityStudio/SLWSTK6223A_clock.slsproj,../hardware/kit/SLWSTK6223A_EZR32WG/examples/clock/arm/clock.uvprojx,../hardware/kit/SLWSTK6223A_EZR32WG/examples/clock/iar/clock.eww"/>
    <properties key="core.boardCompatibility" value="brd4505b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6223A_humitemp" description="&lt;h1&gt;&lt;b&gt;Humidity and temperature demo using the on-board si7021 sensor on the&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;SLWSTK6223A_EZR32WG board.&#xD;&#xA;&#xD;&#xA;This example project uses CMSIS including emlib and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the Sharp Memory LCD display and the si7021 humidity and temperature sensor on the&#xD;&#xA;SLWSTK6223A_EZR32WG board.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6223A_EZR32WG starter kit.&#xD;&#xA;Device: EZR32WG330F256R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 490 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6223A_EZR32WG/examples/humitemp/SimplicityStudio/SLWSTK6223A_humitemp.slsproj,../hardware/kit/SLWSTK6223A_EZR32WG/examples/humitemp/arm/humitemp.uvprojx,../hardware/kit/SLWSTK6223A_EZR32WG/examples/humitemp/iar/humitemp.eww"/>
    <properties key="core.boardCompatibility" value="brd4505b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <properties key="template.initiallyOpenedResource" value="src/humitemp.c"/>
  </descriptors>
  <descriptors label="SLWSTK6223A_rangeTest" description="&lt;h1&gt;&lt;b&gt;Range Test example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;The Range Test application can be used to evaluate Silicon Laboratories radio&#xD;&#xA;chips including performace, sensitivity or blocking measurements.&#xD;&#xA;&#xD;&#xA;Range Test creates a radio link between two evaluation kits and sends &#xD;&#xA;predefined amount of packets from the transmitter side to the receiver.&#xD;&#xA;The receiver calculates Packet Error Rate (PER) and Moving-Average (MA) of PER&#xD;&#xA;based on the packets received. It also displays the current RSSI level in dBm&#xD;&#xA;units and draws a chart of the RSSI historical data.&#xD;&#xA;For long tests the transmitter can be set up to transmit continuously. It is not&#xD;&#xA;necessary to start both sides synchronously.&#xD;&#xA;&#xD;&#xA;*PLEASE NOTE* This example uses the radio extensively and could transmit at high&#xD;&#xA;RF power levels that may result in higher peak current consumption. Due to the&#xD;&#xA;peak current demand this example is not suited to run on a coin cell battery.&#xD;&#xA;If standalone operation is required please consider the use of an external USB&#xD;&#xA;connected battery or other power source.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6223A_EZR32WG Starter Kit&#xD;&#xA;Device: EZR32WG330F256R63&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 490 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6223A_EZR32WG/examples/rangeTest/SimplicityStudio/SLWSTK6223A_rangeTest.slsproj"/>
    <properties key="core.boardCompatibility" value="brd4505b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <properties key="template.initiallyOpenedResource" value="configuration/rangetestconfig.c"/>
  </descriptors>
  <descriptors label="SLWSTK6223A_rs232" description="&lt;h1&gt;&lt;b&gt;VCOM/USART/LEUART RS232 output example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses CMSIS and emlib, to demonstrates the&#xD;&#xA;use of LEUART, USART or VCOM  communication on the SLWSTK6223A_EZR32WG&#xD;&#xA;development kit.&#xD;&#xA;&#xD;&#xA;Serial port selection is done by defining any one of compiletime macros:&#xD;&#xA;#define RETARGET_LEUART0&#xD;&#xA;#define RETARGET_USART1&#xD;&#xA;#define RETARGET_USART2&#xD;&#xA;#define RETARGET_VCOM       (default)&#xD;&#xA;&#xD;&#xA;If a USART is used set terminal configuration to 115200-8-N-1.&#xD;&#xA;If the LEUART is used set terminal configuration to 9600-8-N-1.&#xD;&#xA;For the default VCOM communication mode, serial port settings are &quot;dont care&quot;.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6223A_EZR32WG Development Kit&#xD;&#xA;Device: EZR32WG330F256R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 490 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6223A_EZR32WG/examples/rs232/SimplicityStudio/SLWSTK6223A_rs232.slsproj,../hardware/kit/SLWSTK6223A_EZR32WG/examples/rs232/arm/rs232.uvprojx,../hardware/kit/SLWSTK6223A_EZR32WG/examples/rs232/iar/rs232.eww"/>
    <properties key="core.boardCompatibility" value="brd4505b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6223A_ezradio_simple_trx" description="&lt;h1&gt;&lt;b&gt;EZRadio simple TRx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32WG CMSIS including emlib, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use two boards with same configuration and firmware, so&#xD;&#xA;both packet transmission and reception functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can send one packet with the radio by pushing the PB0 button. The&#xD;&#xA;data counter in the packet is incremented and shown on the LCD. If the&#xD;&#xA;packet is received by the other device, the received data is shown on its&#xD;&#xA;LCD. If the packet is received with CRC error this is printed as well.&#xD;&#xA;&#xD;&#xA;The user can send specified or unlimited number of packets by pushing PB1.&#xD;&#xA;The user can cease the transmission by pushing PB1 again.&#xD;&#xA;The number of transmitted packets is configurable.&#xD;&#xA;&#xD;&#xA;The application implements Packet Trace functionality, that means that the&#xD;&#xA;user can observe transmitted and received packets with the Network Analyzer Tool&#xD;&#xA;of Simplicity studio using the built-in default radio configuration header files.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6223A_EZR32WG Development Kit&#xD;&#xA;Device: EZR32WG330F256R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 490 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6223A_EZR32WG/examples/ezradio_simple_trx/SimplicityStudio/SLWSTK6223A_ezradio_simple_trx.slsproj,../hardware/kit/SLWSTK6223A_EZR32WG/examples/ezradio_simple_trx/arm/ezradio_simple_trx.uvprojx,../hardware/kit/SLWSTK6223A_EZR32WG/examples/ezradio_simple_trx/iar/ezradio_simple_trx.eww"/>
    <properties key="core.boardCompatibility" value="brd4505b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6223A_ezradio_trx_ack" description="&lt;h1&gt;&lt;b&gt;EZRadio TRx with auto acknowledge example using the EZRadio device in the EZR32&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt; device.&#xD;&#xA;&#xD;&#xA;This example project uses the EZR32WG CMSIS including emlib, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use two boards with same configuration and firmware, so&#xD;&#xA;both packet transmission and reception functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can send one packet with the radio by pushing the PB0 button. The&#xD;&#xA;data counter in the packet is incremented and shown on the LCD. If the&#xD;&#xA;packet is received by the other device, the received data is shown on its&#xD;&#xA;LCD. If the packet is received with CRC error this is printed as well. In case&#xD;&#xA;the data is received properly the receiver automatically sends back an&#xD;&#xA;acknowledge packet. The transmitted and received 'ACK' packet is shown on &#xD;&#xA;the LCD as well.&#xD;&#xA;&#xD;&#xA;The user can send specified or unlimited number of packets by pushing PB1.&#xD;&#xA;The user can cease the transmission by pushing PB1 again.&#xD;&#xA;The number of transmitted packets is configurable.&#xD;&#xA;&#xD;&#xA;The application implements Packet Trace functionality, that means that the&#xD;&#xA;user can observe transmitted and received packets with the Network Analyzer Tool&#xD;&#xA;of Simplicity studio using the built-in default radio configuration header files.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6223A_EZR32WG Development Kit&#xD;&#xA;Device: EZR32WG330F256R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 490 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6223A_EZR32WG/examples/ezradio_trx_ack/SimplicityStudio/SLWSTK6223A_ezradio_trx_ack.slsproj,../hardware/kit/SLWSTK6223A_EZR32WG/examples/ezradio_trx_ack/arm/ezradio_trx_ack.uvprojx,../hardware/kit/SLWSTK6223A_EZR32WG/examples/ezradio_trx_ack/iar/ezradio_trx_ack.eww"/>
    <properties key="core.boardCompatibility" value="brd4505b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6223A_ezradio_direct_tx" description="&lt;h1&gt;&lt;b&gt;EZRadio Direct Tx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32WG CMSIS including emlib, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use this example together with the Direct Rx example&#xD;&#xA;running on an other node, so the link functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can start direct transmission by pressing the PB0 button. &#xD;&#xA;Ceasing direct transmission can be issued by pressing the PB0 button again.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6223A_EZR32WG Development Kit&#xD;&#xA;Device: EZR32WG330F256R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 490 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6223A_EZR32WG/examples/ezradio_direct_tx/SimplicityStudio/SLWSTK6223A_ezradio_direct_tx.slsproj,../hardware/kit/SLWSTK6223A_EZR32WG/examples/ezradio_direct_tx/arm/ezradio_direct_tx.uvprojx,../hardware/kit/SLWSTK6223A_EZR32WG/examples/ezradio_direct_tx/iar/ezradio_direct_tx.eww"/>
    <properties key="core.boardCompatibility" value="brd4505b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6223A_ezradio_direct_rx" description="&lt;h1&gt;&lt;b&gt;EZRadio Direct Rx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32WG CMSIS including emlib, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use this example together with the Direct Tx example&#xD;&#xA;running on an other node, so the link functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can start direct reception by pressing the PB0 button. &#xD;&#xA;Ceasing direct reception can be issued by pressing the PB0 button again.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6223A_EZR32WG Development Kit&#xD;&#xA;Device: EZR32WG330F256R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 490 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6223A_EZR32WG/examples/ezradio_direct_rx/SimplicityStudio/SLWSTK6223A_ezradio_direct_rx.slsproj,../hardware/kit/SLWSTK6223A_EZR32WG/examples/ezradio_direct_rx/arm/ezradio_direct_rx.uvprojx,../hardware/kit/SLWSTK6223A_EZR32WG/examples/ezradio_direct_rx/iar/ezradio_direct_rx.eww"/>
    <properties key="core.boardCompatibility" value="brd4505b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6223A_ezradio_pn9" description="&lt;h1&gt;&lt;b&gt;EZRadio PN9 transmission example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32WG CMSIS including emlib, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;The user can start PN9 (pseudorandom binary where N=9) transmission by pressing&#xD;&#xA;the PB0 button. Ceasing the transmission can be issued by pressing the PB0 &#xD;&#xA;button again. &#xD;&#xA;See the EzRadio documentation for more information on PN9 transmission.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6223A_EZR32WG Development Kit&#xD;&#xA;Device: EZR32WG330F256R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 490 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6223A_EZR32WG/examples/ezradio_pn9/SimplicityStudio/SLWSTK6223A_ezradio_pn9.slsproj,../hardware/kit/SLWSTK6223A_EZR32WG/examples/ezradio_pn9/arm/ezradio_pn9.uvprojx,../hardware/kit/SLWSTK6223A_EZR32WG/examples/ezradio_pn9/iar/ezradio_pn9.eww"/>
    <properties key="core.boardCompatibility" value="brd4505b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6223A_ezradio_unmodulated_carrier" description="&lt;h1&gt;&lt;b&gt;EZRadio Unmodulated Carrier transmission example using the EZRadio device in&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;the EZR32 device.&#xD;&#xA;&#xD;&#xA;This example project uses the EZR32WG CMSIS including emlib, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;The user can start CW transmission by pressing the PB0 button. &#xD;&#xA;Ceasing the transmission can be issued by pressing the PB0 button again.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6223A_EZR32WG Development Kit&#xD;&#xA;Device: EZR32WG330F256R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 490 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6223A_EZR32WG/examples/ezradio_unmodulated_carrier/SimplicityStudio/SLWSTK6223A_ezradio_unmodulated_carrier.slsproj,../hardware/kit/SLWSTK6223A_EZR32WG/examples/ezradio_unmodulated_carrier/arm/ezradio_unmodulated_carrier.uvprojx,../hardware/kit/SLWSTK6223A_EZR32WG/examples/ezradio_unmodulated_carrier/iar/ezradio_unmodulated_carrier.eww"/>
    <properties key="core.boardCompatibility" value="brd4505b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6224A_blink" description="&lt;h1&gt;&lt;b&gt;Blink example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use CMSIS and the emlib peripheral library to&#xD;&#xA;demonstrate the use of the LED's on the starter kit. This example is intended as&#xD;&#xA;a skeleton for new projects.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6224A_EZR32WG Starter Kit&#xD;&#xA;Device: EZR32WG330F256R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 169 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6224A_EZR32WG/examples/blink/SimplicityStudio/SLWSTK6224A_blink.slsproj,../hardware/kit/SLWSTK6224A_EZR32WG/examples/blink/arm/blink.uvprojx,../hardware/kit/SLWSTK6224A_EZR32WG/examples/blink/iar/blink.eww"/>
    <properties key="core.boardCompatibility" value="brd4504b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <properties key="template.initiallyOpenedResource" value="src/blink.c"/>
  </descriptors>
  <descriptors label="SLWSTK6224A_clock" description="&lt;h1&gt;&lt;b&gt;Analog and digital clock example using the Memory LCD on the SLWSTK6224A_EZR32WG.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses CMSIS including emlib and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the Sharp Memory LCD display on the SLWSTK6224A_EZR32WG kit.&#xD;&#xA;&#xD;&#xA;The user can switch between analog and digital clock modes by pushing&#xD;&#xA;the PB0 button.&#xD;&#xA;&#xD;&#xA;The user can increment the minute count by pushing the PB1 button.&#xD;&#xA;The minute count can be incremented by pushing the PB1 button for more&#xD;&#xA;than 0.5 seconds.&#xD;&#xA;&#xD;&#xA;The analog clock mode demonstrates the use of GLIB to draw hour, minute&#xD;&#xA;and second pointers on the background which is a bitmap in flash memory.&#xD;&#xA;&#xD;&#xA;The digital clock demonstrates the 16x20 font (including number characters&#xD;&#xA;only) of the textdisplay driver.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6224A_EZR32WG Development Kit&#xD;&#xA;Device: EZR32WG330F256R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 169 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6224A_EZR32WG/examples/clock/SimplicityStudio/SLWSTK6224A_clock.slsproj,../hardware/kit/SLWSTK6224A_EZR32WG/examples/clock/arm/clock.uvprojx,../hardware/kit/SLWSTK6224A_EZR32WG/examples/clock/iar/clock.eww"/>
    <properties key="core.boardCompatibility" value="brd4504b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6224A_humitemp" description="&lt;h1&gt;&lt;b&gt;Humidity and temperature demo using the on-board si7021 sensor on the&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;SLWSTK6224A_EZR32WG board.&#xD;&#xA;&#xD;&#xA;This example project uses CMSIS including emlib and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the Sharp Memory LCD display and the si7021 humidity and temperature sensor on the&#xD;&#xA;SLWSTK6224A_EZR32WG board.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6224A_EZR32WG starter kit.&#xD;&#xA;Device: EZR32WG330F256R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 169 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6224A_EZR32WG/examples/humitemp/SimplicityStudio/SLWSTK6224A_humitemp.slsproj,../hardware/kit/SLWSTK6224A_EZR32WG/examples/humitemp/arm/humitemp.uvprojx,../hardware/kit/SLWSTK6224A_EZR32WG/examples/humitemp/iar/humitemp.eww"/>
    <properties key="core.boardCompatibility" value="brd4504b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <properties key="template.initiallyOpenedResource" value="src/humitemp.c"/>
  </descriptors>
  <descriptors label="SLWSTK6224A_rangeTest" description="&lt;h1&gt;&lt;b&gt;Range Test example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;The Range Test application can be used to evaluate Silicon Laboratories radio&#xD;&#xA;chips including performace, sensitivity or blocking measurements.&#xD;&#xA;&#xD;&#xA;Range Test creates a radio link between two evaluation kits and sends &#xD;&#xA;predefined amount of packets from the transmitter side to the receiver.&#xD;&#xA;The receiver calculates Packet Error Rate (PER) and Moving-Average (MA) of PER&#xD;&#xA;based on the packets received. It also displays the current RSSI level in dBm&#xD;&#xA;units and draws a chart of the RSSI historical data.&#xD;&#xA;For long tests the transmitter can be set up to transmit continuously. It is not&#xD;&#xA;necessary to start both sides synchronously.&#xD;&#xA;&#xD;&#xA;*PLEASE NOTE* This example uses the radio extensively and could transmit at high&#xD;&#xA;RF power levels that may result in higher peak current consumption. Due to the&#xD;&#xA;peak current demand this example is not suited to run on a coin cell battery.&#xD;&#xA;If standalone operation is required please consider the use of an external USB&#xD;&#xA;connected battery or other power source.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6224A_EZR32WG Starter Kit&#xD;&#xA;Device: EZR32WG330F256R63&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 169 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6224A_EZR32WG/examples/rangeTest/SimplicityStudio/SLWSTK6224A_rangeTest.slsproj"/>
    <properties key="core.boardCompatibility" value="brd4504b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <properties key="template.initiallyOpenedResource" value="configuration/rangetestconfig.c"/>
  </descriptors>
  <descriptors label="SLWSTK6224A_rs232" description="&lt;h1&gt;&lt;b&gt;VCOM/USART/LEUART RS232 output example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses CMSIS and emlib, to demonstrates the&#xD;&#xA;use of LEUART, USART or VCOM  communication on the SLWSTK6224A_EZR32WG&#xD;&#xA;development kit.&#xD;&#xA;&#xD;&#xA;Serial port selection is done by defining any one of compiletime macros:&#xD;&#xA;#define RETARGET_LEUART0&#xD;&#xA;#define RETARGET_USART1&#xD;&#xA;#define RETARGET_USART2&#xD;&#xA;#define RETARGET_VCOM       (default)&#xD;&#xA;&#xD;&#xA;If a USART is used set terminal configuration to 115200-8-N-1.&#xD;&#xA;If the LEUART is used set terminal configuration to 9600-8-N-1.&#xD;&#xA;For the default VCOM communication mode, serial port settings are &quot;dont care&quot;.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6224A_EZR32WG Development Kit&#xD;&#xA;Device: EZR32WG330F256R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 169 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6224A_EZR32WG/examples/rs232/SimplicityStudio/SLWSTK6224A_rs232.slsproj,../hardware/kit/SLWSTK6224A_EZR32WG/examples/rs232/arm/rs232.uvprojx,../hardware/kit/SLWSTK6224A_EZR32WG/examples/rs232/iar/rs232.eww"/>
    <properties key="core.boardCompatibility" value="brd4504b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6224A_ezradio_simple_trx" description="&lt;h1&gt;&lt;b&gt;EZRadio simple TRx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32WG CMSIS including emlib, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use two boards with same configuration and firmware, so&#xD;&#xA;both packet transmission and reception functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can send one packet with the radio by pushing the PB0 button. The&#xD;&#xA;data counter in the packet is incremented and shown on the LCD. If the&#xD;&#xA;packet is received by the other device, the received data is shown on its&#xD;&#xA;LCD. If the packet is received with CRC error this is printed as well.&#xD;&#xA;&#xD;&#xA;The user can send specified or unlimited number of packets by pushing PB1.&#xD;&#xA;The user can cease the transmission by pushing PB1 again.&#xD;&#xA;The number of transmitted packets is configurable.&#xD;&#xA;&#xD;&#xA;The application implements Packet Trace functionality, that means that the&#xD;&#xA;user can observe transmitted and received packets with the Network Analyzer Tool&#xD;&#xA;of Simplicity studio using the built-in default radio configuration header files.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6224A_EZR32WG Development Kit&#xD;&#xA;Device: EZR32WG330F256R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 169 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6224A_EZR32WG/examples/ezradio_simple_trx/SimplicityStudio/SLWSTK6224A_ezradio_simple_trx.slsproj,../hardware/kit/SLWSTK6224A_EZR32WG/examples/ezradio_simple_trx/arm/ezradio_simple_trx.uvprojx,../hardware/kit/SLWSTK6224A_EZR32WG/examples/ezradio_simple_trx/iar/ezradio_simple_trx.eww"/>
    <properties key="core.boardCompatibility" value="brd4504b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6224A_ezradio_trx_ack" description="&lt;h1&gt;&lt;b&gt;EZRadio TRx with auto acknowledge example using the EZRadio device in the EZR32&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt; device.&#xD;&#xA;&#xD;&#xA;This example project uses the EZR32WG CMSIS including emlib, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use two boards with same configuration and firmware, so&#xD;&#xA;both packet transmission and reception functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can send one packet with the radio by pushing the PB0 button. The&#xD;&#xA;data counter in the packet is incremented and shown on the LCD. If the&#xD;&#xA;packet is received by the other device, the received data is shown on its&#xD;&#xA;LCD. If the packet is received with CRC error this is printed as well. In case&#xD;&#xA;the data is received properly the receiver automatically sends back an&#xD;&#xA;acknowledge packet. The transmitted and received 'ACK' packet is shown on &#xD;&#xA;the LCD as well.&#xD;&#xA;&#xD;&#xA;The user can send specified or unlimited number of packets by pushing PB1.&#xD;&#xA;The user can cease the transmission by pushing PB1 again.&#xD;&#xA;The number of transmitted packets is configurable.&#xD;&#xA;&#xD;&#xA;The application implements Packet Trace functionality, that means that the&#xD;&#xA;user can observe transmitted and received packets with the Network Analyzer Tool&#xD;&#xA;of Simplicity studio using the built-in default radio configuration header files.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6224A_EZR32WG Development Kit&#xD;&#xA;Device: EZR32WG330F256R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 169 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6224A_EZR32WG/examples/ezradio_trx_ack/SimplicityStudio/SLWSTK6224A_ezradio_trx_ack.slsproj,../hardware/kit/SLWSTK6224A_EZR32WG/examples/ezradio_trx_ack/arm/ezradio_trx_ack.uvprojx,../hardware/kit/SLWSTK6224A_EZR32WG/examples/ezradio_trx_ack/iar/ezradio_trx_ack.eww"/>
    <properties key="core.boardCompatibility" value="brd4504b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6224A_ezradio_direct_tx" description="&lt;h1&gt;&lt;b&gt;EZRadio Direct Tx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32WG CMSIS including emlib, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use this example together with the Direct Rx example&#xD;&#xA;running on an other node, so the link functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can start direct transmission by pressing the PB0 button. &#xD;&#xA;Ceasing direct transmission can be issued by pressing the PB0 button again.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6224A_EZR32WG Development Kit&#xD;&#xA;Device: EZR32WG330F256R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 169 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6224A_EZR32WG/examples/ezradio_direct_tx/SimplicityStudio/SLWSTK6224A_ezradio_direct_tx.slsproj,../hardware/kit/SLWSTK6224A_EZR32WG/examples/ezradio_direct_tx/arm/ezradio_direct_tx.uvprojx,../hardware/kit/SLWSTK6224A_EZR32WG/examples/ezradio_direct_tx/iar/ezradio_direct_tx.eww"/>
    <properties key="core.boardCompatibility" value="brd4504b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6224A_ezradio_direct_rx" description="&lt;h1&gt;&lt;b&gt;EZRadio Direct Rx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32WG CMSIS including emlib, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use this example together with the Direct Tx example&#xD;&#xA;running on an other node, so the link functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can start direct reception by pressing the PB0 button. &#xD;&#xA;Ceasing direct reception can be issued by pressing the PB0 button again.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6224A_EZR32WG Development Kit&#xD;&#xA;Device: EZR32WG330F256R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 169 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6224A_EZR32WG/examples/ezradio_direct_rx/SimplicityStudio/SLWSTK6224A_ezradio_direct_rx.slsproj,../hardware/kit/SLWSTK6224A_EZR32WG/examples/ezradio_direct_rx/arm/ezradio_direct_rx.uvprojx,../hardware/kit/SLWSTK6224A_EZR32WG/examples/ezradio_direct_rx/iar/ezradio_direct_rx.eww"/>
    <properties key="core.boardCompatibility" value="brd4504b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6224A_ezradio_pn9" description="&lt;h1&gt;&lt;b&gt;EZRadio PN9 transmission example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32WG CMSIS including emlib, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;The user can start PN9 (pseudorandom binary where N=9) transmission by pressing&#xD;&#xA;the PB0 button. Ceasing the transmission can be issued by pressing the PB0 &#xD;&#xA;button again. &#xD;&#xA;See the EzRadio documentation for more information on PN9 transmission.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6224A_EZR32WG Development Kit&#xD;&#xA;Device: EZR32WG330F256R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 169 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6224A_EZR32WG/examples/ezradio_pn9/SimplicityStudio/SLWSTK6224A_ezradio_pn9.slsproj,../hardware/kit/SLWSTK6224A_EZR32WG/examples/ezradio_pn9/arm/ezradio_pn9.uvprojx,../hardware/kit/SLWSTK6224A_EZR32WG/examples/ezradio_pn9/iar/ezradio_pn9.eww"/>
    <properties key="core.boardCompatibility" value="brd4504b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6224A_ezradio_unmodulated_carrier" description="&lt;h1&gt;&lt;b&gt;EZRadio Unmodulated Carrier transmission example using the EZRadio device in&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;the EZR32 device.&#xD;&#xA;&#xD;&#xA;This example project uses the EZR32WG CMSIS including emlib, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;The user can start CW transmission by pressing the PB0 button. &#xD;&#xA;Ceasing the transmission can be issued by pressing the PB0 button again.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6224A_EZR32WG Development Kit&#xD;&#xA;Device: EZR32WG330F256R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 169 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6224A_EZR32WG/examples/ezradio_unmodulated_carrier/SimplicityStudio/SLWSTK6224A_ezradio_unmodulated_carrier.slsproj,../hardware/kit/SLWSTK6224A_EZR32WG/examples/ezradio_unmodulated_carrier/arm/ezradio_unmodulated_carrier.uvprojx,../hardware/kit/SLWSTK6224A_EZR32WG/examples/ezradio_unmodulated_carrier/iar/ezradio_unmodulated_carrier.eww"/>
    <properties key="core.boardCompatibility" value="brd4504b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6240A_ezradio_simple_trx" description="&lt;h1&gt;&lt;b&gt;EZRadio simple TRx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32HG CMSIS including emlib, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use two boards with same configuration and firmware, so&#xD;&#xA;both packet transmission and reception functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can send one packet with the radio by pushing the PB0 button. The&#xD;&#xA;data counter in the packet is incremented and shown on the LCD. If the&#xD;&#xA;packet is received by the other device, the received data is shown on its&#xD;&#xA;LCD. If the packet is received with CRC error this is printed as well.&#xD;&#xA;&#xD;&#xA;The user can send specified or unlimited number of packets by pushing PB1.&#xD;&#xA;The user can cease the transmission by pushing PB1 again.&#xD;&#xA;The number of transmitted packets is configurable.&#xD;&#xA;&#xD;&#xA;The application implements Packet Trace functionality, that means that the&#xD;&#xA;user can observe transmitted and received packets with the Network Analyzer Tool&#xD;&#xA;of Simplicity studio using the built-in default radio configuration header files.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6240A_EZR32HG Development Kit&#xD;&#xA;Device: EZR32HG320F64R68&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 868 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6240A_EZR32HG/examples/ezradio_simple_trx/SimplicityStudio/SLWSTK6240A_ezradio_simple_trx.slsproj,../hardware/kit/SLWSTK6240A_EZR32HG/examples/ezradio_simple_trx/arm/ezradio_simple_trx.uvprojx,../hardware/kit/SLWSTK6240A_EZR32HG/examples/ezradio_simple_trx/iar/ezradio_simple_trx.eww"/>
    <properties key="core.boardCompatibility" value="brd4546a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6240A_ezradio_trx_ack" description="&lt;h1&gt;&lt;b&gt;EZRadio TRx with auto acknowledge example using the EZRadio device in the EZR32&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt; device.&#xD;&#xA;&#xD;&#xA;This example project uses the EZR32HG CMSIS including emlib, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use two boards with same configuration and firmware, so&#xD;&#xA;both packet transmission and reception functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can send one packet with the radio by pushing the PB0 button. The&#xD;&#xA;data counter in the packet is incremented and shown on the LCD. If the&#xD;&#xA;packet is received by the other device, the received data is shown on its&#xD;&#xA;LCD. If the packet is received with CRC error this is printed as well. In case&#xD;&#xA;the data is received properly the receiver automatically sends back an&#xD;&#xA;acknowledge packet. The transmitted and received 'ACK' packet is shown on &#xD;&#xA;the LCD as well.&#xD;&#xA;&#xD;&#xA;The user can send specified or unlimited number of packets by pushing PB1.&#xD;&#xA;The user can cease the transmission by pushing PB1 again.&#xD;&#xA;The number of transmitted packets is configurable.&#xD;&#xA;&#xD;&#xA;The application implements Packet Trace functionality, that means that the&#xD;&#xA;user can observe transmitted and received packets with the Network Analyzer Tool&#xD;&#xA;of Simplicity studio using the built-in default radio configuration header files.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6240A_EZR32HG Development Kit&#xD;&#xA;Device: EZR32HG320F64R68&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 868 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6240A_EZR32HG/examples/ezradio_trx_ack/SimplicityStudio/SLWSTK6240A_ezradio_trx_ack.slsproj,../hardware/kit/SLWSTK6240A_EZR32HG/examples/ezradio_trx_ack/arm/ezradio_trx_ack.uvprojx,../hardware/kit/SLWSTK6240A_EZR32HG/examples/ezradio_trx_ack/iar/ezradio_trx_ack.eww"/>
    <properties key="core.boardCompatibility" value="brd4546a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6240A_ezradio_direct_tx" description="&lt;h1&gt;&lt;b&gt;EZRadio Direct Tx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32HG CMSIS including emlib, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use this example together with the Direct Rx example&#xD;&#xA;running on an other node, so the link functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can start direct transmission by pressing the PB0 button. &#xD;&#xA;Ceasing direct transmission can be issued by pressing the PB0 button again.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6240A_EZR32HG Development Kit&#xD;&#xA;Device: EZR32HG320F64R68&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 868 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6240A_EZR32HG/examples/ezradio_direct_tx/SimplicityStudio/SLWSTK6240A_ezradio_direct_tx.slsproj,../hardware/kit/SLWSTK6240A_EZR32HG/examples/ezradio_direct_tx/arm/ezradio_direct_tx.uvprojx,../hardware/kit/SLWSTK6240A_EZR32HG/examples/ezradio_direct_tx/iar/ezradio_direct_tx.eww"/>
    <properties key="core.boardCompatibility" value="brd4546a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6240A_ezradio_direct_rx" description="&lt;h1&gt;&lt;b&gt;EZRadio Direct Rx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32HG CMSIS including emlib, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use this example together with the Direct Tx example&#xD;&#xA;running on an other node, so the link functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can start direct reception by pressing the PB0 button. &#xD;&#xA;Ceasing direct reception can be issued by pressing the PB0 button again.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6240A_EZR32HG Development Kit&#xD;&#xA;Device: EZR32HG320F64R68&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 868 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6240A_EZR32HG/examples/ezradio_direct_rx/SimplicityStudio/SLWSTK6240A_ezradio_direct_rx.slsproj,../hardware/kit/SLWSTK6240A_EZR32HG/examples/ezradio_direct_rx/arm/ezradio_direct_rx.uvprojx,../hardware/kit/SLWSTK6240A_EZR32HG/examples/ezradio_direct_rx/iar/ezradio_direct_rx.eww"/>
    <properties key="core.boardCompatibility" value="brd4546a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6240A_ezradio_pn9" description="&lt;h1&gt;&lt;b&gt;EZRadio PN9 transmission example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32HG CMSIS including emlib, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;The user can start PN9 (pseudorandom binary where N=9) transmission by pressing&#xD;&#xA;the PB0 button. Ceasing the transmission can be issued by pressing the PB0 &#xD;&#xA;button again. &#xD;&#xA;See the EzRadio documentation for more information on PN9 transmission.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6240A_EZR32HG Development Kit&#xD;&#xA;Device: EZR32HG320F64R68&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 868 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6240A_EZR32HG/examples/ezradio_pn9/SimplicityStudio/SLWSTK6240A_ezradio_pn9.slsproj,../hardware/kit/SLWSTK6240A_EZR32HG/examples/ezradio_pn9/arm/ezradio_pn9.uvprojx,../hardware/kit/SLWSTK6240A_EZR32HG/examples/ezradio_pn9/iar/ezradio_pn9.eww"/>
    <properties key="core.boardCompatibility" value="brd4546a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6240A_ezradio_unmodulated_carrier" description="&lt;h1&gt;&lt;b&gt;EZRadio Unmodulated Carrier transmission example using the EZRadio device in&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;the EZR32 device.&#xD;&#xA;&#xD;&#xA;This example project uses the EZR32HG CMSIS including emlib, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;The user can start CW transmission by pressing the PB0 button. &#xD;&#xA;Ceasing the transmission can be issued by pressing the PB0 button again.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6240A_EZR32HG Development Kit&#xD;&#xA;Device: EZR32HG320F64R68&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 868 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6240A_EZR32HG/examples/ezradio_unmodulated_carrier/SimplicityStudio/SLWSTK6240A_ezradio_unmodulated_carrier.slsproj,../hardware/kit/SLWSTK6240A_EZR32HG/examples/ezradio_unmodulated_carrier/arm/ezradio_unmodulated_carrier.uvprojx,../hardware/kit/SLWSTK6240A_EZR32HG/examples/ezradio_unmodulated_carrier/iar/ezradio_unmodulated_carrier.eww"/>
    <properties key="core.boardCompatibility" value="brd4546a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6240A_blink" description="&lt;h1&gt;&lt;b&gt;Blink example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use CMSIS and the emlib peripheral library to&#xD;&#xA;demonstrate the use of the LED's on the starter kit. This example is intended as&#xD;&#xA;a skeleton for new projects.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6240A_EZR32HG Starter Kit&#xD;&#xA;Device: EZR32HG320F64R61&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 868 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6240A_EZR32HG/examples/blink/SimplicityStudio/SLWSTK6240A_blink.slsproj,../hardware/kit/SLWSTK6240A_EZR32HG/examples/blink/arm/blink.uvprojx,../hardware/kit/SLWSTK6240A_EZR32HG/examples/blink/iar/blink.eww"/>
    <properties key="core.boardCompatibility" value="brd4546a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/blink.c"/>
  </descriptors>
  <descriptors label="SLWSTK6240A_clock" description="&lt;h1&gt;&lt;b&gt;Analog and digital clock example using the Memory LCD on the SLWSTK6240A_EZR32HG.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS including emlib and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the Sharp Memory LCD display on the SLWSTK6240A_EZR32HG kit.&#xD;&#xA;&#xD;&#xA;The user can switch between analog and digital clock modes by pushing&#xD;&#xA;the PB0 button.&#xD;&#xA;&#xD;&#xA;The user can increment the second count by pushing the PB1 button.&#xD;&#xA;The minute count can be incremented by pushing the PB1 button for more&#xD;&#xA;than 2 seconds.&#xD;&#xA;&#xD;&#xA;The analog clock mode demonstrates the use of GLIB to draw hour, minute&#xD;&#xA;and second pointers on the background which is a bitmap in flash memory.&#xD;&#xA;&#xD;&#xA;The digital clock demonstrates the 16x20 font (including number characters&#xD;&#xA;only) of the textdisplay driver.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6240A_EZR32HG Starter Kit&#xD;&#xA;Device: EZR32HG320F64R61&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 868 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6240A_EZR32HG/examples/clock/SimplicityStudio/SLWSTK6240A_clock.slsproj,../hardware/kit/SLWSTK6240A_EZR32HG/examples/clock/arm/clock.uvprojx,../hardware/kit/SLWSTK6240A_EZR32HG/examples/clock/iar/clock.eww"/>
    <properties key="core.boardCompatibility" value="brd4546a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6240A_ezradio_per" description="&lt;h1&gt;&lt;b&gt;EZRadio packet error rate (PER) example using the EZRadio device in the EZR32HG&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt; device.&#xD;&#xA;&#xD;&#xA;This example project uses the EZR32HG CMSIS including emlib, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use two boards with same configuration and firmware, so&#xD;&#xA;both packet transmission and reception functionality can be tested.&#xD;&#xA;&#xD;&#xA;This example bases on the standard TRx with auto acknowledge example. It is &#xD;&#xA;advised to study the original application first.&#xD;&#xA;All the original functionalities can be turned on, however, the main purpose&#xD;&#xA;of this example is to show how to implement transmission packet error rate (PER) &#xD;&#xA;and RSSI measurements in an application. The user can send either one (PB0) &#xD;&#xA;or multiple packets (PB1) with the transmitter node and study the PER and RSSI&#xD;&#xA;values on the receiver node.&#xD;&#xA;&#xD;&#xA;The user can send specified or unlimited number of packets by pushing PB1.&#xD;&#xA;The user can cease the transmission by pushing PB1 again.&#xD;&#xA;The number of transmitted packets is configurable.&#xD;&#xA;&#xD;&#xA;The application implements Packet Trace functionality, that means that the&#xD;&#xA;user can observe transmitted and received packets with the Network Analyzer Tool&#xD;&#xA;of Simplicity studio using the built-in default radio configuration header files.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6240A_EZR32HG Development Kit&#xD;&#xA;Device: EZR32HG320F64R68&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 868 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6240A_EZR32HG/examples/ezradio_per/SimplicityStudio/SLWSTK6240A_ezradio_per.slsproj,../hardware/kit/SLWSTK6240A_EZR32HG/examples/ezradio_per/arm/ezradio_per.uvprojx,../hardware/kit/SLWSTK6240A_EZR32HG/examples/ezradio_per/iar/ezradio_per.eww"/>
    <properties key="core.boardCompatibility" value="brd4546a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6240A_humitemp" description="&lt;h1&gt;&lt;b&gt;Humidity and temperature demo using the on-board si7021 sensor on the&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;SLWSTK6240A_EZR32HG board.&#xA;&#xA;This example project uses CMSIS including emlib and the&#xA;board support package support functions/drivers to demonstrate driving&#xA;the Sharp Memory LCD display and the si7021 humidity and temperature sensor on the&#xA;SLWSTK6240A_EZR32HG board.&#xA;&#xA;Board:  Silicon Labs SLWSTK6240A_EZR32HG Starter Kit&#xA;Device: EZR32HG320F64R61&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 868 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6240A_EZR32HG/examples/humitemp/SimplicityStudio/SLWSTK6240A_humitemp.slsproj,../hardware/kit/SLWSTK6240A_EZR32HG/examples/humitemp/arm/humitemp.uvprojx,../hardware/kit/SLWSTK6240A_EZR32HG/examples/humitemp/iar/humitemp.eww"/>
    <properties key="core.boardCompatibility" value="brd4546a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/humitemp.c"/>
  </descriptors>
  <descriptors label="SLWSTK6240A_rs232" description="&lt;h1&gt;&lt;b&gt;VCOM/USART/LEUART RS232 output example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses CMSIS and emlib, to demonstrates the&#xD;&#xA;use of LEUART, USART or VCOM  communication on the SLWSTK6240A_EZR32HG&#xD;&#xA;wireless starter kit.&#xD;&#xA;&#xD;&#xA;Serial port selection is done by defining any one of compiletime macros:&#xD;&#xA;#define RETARGET_LEUART0&#xD;&#xA;#define RETARGET_USART0&#xD;&#xA;#define RETARGET_VCOM       (default)&#xD;&#xA;&#xD;&#xA;If a USART is used set terminal configuration to 115200-8-N-1.&#xD;&#xA;If the LEUART is used set terminal configuration to 9600-8-N-1.&#xD;&#xA;For the default VCOM communication mode, serial port settings are &quot;dont care&quot;.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6240A_EZR32HG Starter Kit&#xD;&#xA;Device: EZR32HG320F64R61&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 868 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6240A_EZR32HG/examples/rs232/SimplicityStudio/SLWSTK6240A_rs232.slsproj,../hardware/kit/SLWSTK6240A_EZR32HG/examples/rs232/arm/rs232.uvprojx,../hardware/kit/SLWSTK6240A_EZR32HG/examples/rs232/iar/rs232.eww"/>
    <properties key="core.boardCompatibility" value="brd4546a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6241A_blink" description="&lt;h1&gt;&lt;b&gt;Blink example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use CMSIS and the emlib peripheral library to&#xD;&#xA;demonstrate the use of the LED's on the starter kit. This example is intended as&#xD;&#xA;a skeleton for new projects.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6241A_EZR32HG Starter Kit&#xD;&#xA;Device: EZR32HG320F64R61&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 434 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6241A_EZR32HG/examples/blink/SimplicityStudio/SLWSTK6241A_blink.slsproj,../hardware/kit/SLWSTK6241A_EZR32HG/examples/blink/arm/blink.uvprojx,../hardware/kit/SLWSTK6241A_EZR32HG/examples/blink/iar/blink.eww"/>
    <properties key="core.boardCompatibility" value="brd4542b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r55."/>
    <properties key="template.initiallyOpenedResource" value="src/blink.c"/>
  </descriptors>
  <descriptors label="SLWSTK6241A_clock" description="&lt;h1&gt;&lt;b&gt;Analog and digital clock example using the Memory LCD on the SLWSTK6241A_EZR32HG.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS including emlib and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the Sharp Memory LCD display on the SLWSTK6241A_EZR32HG kit.&#xD;&#xA;&#xD;&#xA;The user can switch between analog and digital clock modes by pushing&#xD;&#xA;the PB0 button.&#xD;&#xA;&#xD;&#xA;The user can increment the second count by pushing the PB1 button.&#xD;&#xA;The minute count can be incremented by pushing the PB1 button for more&#xD;&#xA;than 2 seconds.&#xD;&#xA;&#xD;&#xA;The analog clock mode demonstrates the use of GLIB to draw hour, minute&#xD;&#xA;and second pointers on the background which is a bitmap in flash memory.&#xD;&#xA;&#xD;&#xA;The digital clock demonstrates the 16x20 font (including number characters&#xD;&#xA;only) of the textdisplay driver.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6241A_EZR32HG Starter Kit&#xD;&#xA;Device: EZR32HG320F64R61&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 434 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6241A_EZR32HG/examples/clock/SimplicityStudio/SLWSTK6241A_clock.slsproj,../hardware/kit/SLWSTK6241A_EZR32HG/examples/clock/arm/clock.uvprojx,../hardware/kit/SLWSTK6241A_EZR32HG/examples/clock/iar/clock.eww"/>
    <properties key="core.boardCompatibility" value="brd4542b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r55."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6241A_humitemp" description="&lt;h1&gt;&lt;b&gt;Humidity and temperature demo using the on-board si7021 sensor on the&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;SLWSTK6241A_EZR32HG board.&#xD;&#xA;&#xD;&#xA;This example project uses CMSIS including emlib and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the Sharp Memory LCD display and the si7021 humidity and temperature sensor on the&#xD;&#xA;SLWSTK6241A_EZR32HG board.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6241A_EZR32HG Starter Kit&#xD;&#xA;Device: EZR32HG320F64R61&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 434 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6241A_EZR32HG/examples/humitemp/SimplicityStudio/SLWSTK6241A_humitemp.slsproj,../hardware/kit/SLWSTK6241A_EZR32HG/examples/humitemp/arm/humitemp.uvprojx,../hardware/kit/SLWSTK6241A_EZR32HG/examples/humitemp/iar/humitemp.eww"/>
    <properties key="core.boardCompatibility" value="brd4542b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r55."/>
    <properties key="template.initiallyOpenedResource" value="src/humitemp.c"/>
  </descriptors>
  <descriptors label="SLWSTK6241A_rs232" description="&lt;h1&gt;&lt;b&gt;VCOM/USART/LEUART RS232 output example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses CMSIS and emlib, to demonstrates the&#xD;&#xA;use of LEUART, USART or VCOM  communication on the SLWSTK6241A_EZR32HG&#xD;&#xA;wireless starter kit.&#xD;&#xA;&#xD;&#xA;Serial port selection is done by defining any one of compiletime macros:&#xD;&#xA;#define RETARGET_LEUART0&#xD;&#xA;#define RETARGET_USART0&#xD;&#xA;#define RETARGET_VCOM       (default)&#xD;&#xA;&#xD;&#xA;If a USART is used set terminal configuration to 115200-8-N-1.&#xD;&#xA;If the LEUART is used set terminal configuration to 9600-8-N-1.&#xD;&#xA;For the default VCOM communication mode, serial port settings are &quot;dont care&quot;.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6241A_EZR32HG Starter Kit&#xD;&#xA;Device: EZR32HG320F64R61&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 434 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6241A_EZR32HG/examples/rs232/SimplicityStudio/SLWSTK6241A_rs232.slsproj,../hardware/kit/SLWSTK6241A_EZR32HG/examples/rs232/arm/rs232.uvprojx,../hardware/kit/SLWSTK6241A_EZR32HG/examples/rs232/iar/rs232.eww"/>
    <properties key="core.boardCompatibility" value="brd4542b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r55."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6241A_ezradio_per" description="&lt;h1&gt;&lt;b&gt;EZRadio packet error rate (PER) example using the EZRadio device in the EZR32HG&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt; device.&#xD;&#xA;&#xD;&#xA;This example project uses the EZR32HG CMSIS including emlib, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use two boards with same configuration and firmware, so&#xD;&#xA;both packet transmission and reception functionality can be tested.&#xD;&#xA;&#xD;&#xA;This example bases on the standard TRx with auto acknowledge example. It is &#xD;&#xA;advised to study the original application first.&#xD;&#xA;All the original functionalities can be turned on, however, the main purpose&#xD;&#xA;of this example is to show how to implement transmission packet error rate (PER) &#xD;&#xA;and RSSI measurements in an application. The user can send either one (PB0) &#xD;&#xA;or multiple packets (PB1) with the transmitter node and study the PER and RSSI&#xD;&#xA;values on the receiver node.&#xD;&#xA;&#xD;&#xA;The user can send specified or unlimited number of packets by pushing PB1.&#xD;&#xA;The user can cease the transmission by pushing PB1 again.&#xD;&#xA;The number of transmitted packets is configurable.&#xD;&#xA;&#xD;&#xA;The application implements Packet Trace functionality, that means that the&#xD;&#xA;user can observe transmitted and received packets with the Network Analyzer Tool&#xD;&#xA;of Simplicity studio using the built-in default radio configuration header files.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6241A_EZR32HG Development Kit&#xD;&#xA;Device: EZR32HG320F64R55&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 434 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6241A_EZR32HG/examples/ezradio_per/SimplicityStudio/SLWSTK6241A_ezradio_per.slsproj,../hardware/kit/SLWSTK6241A_EZR32HG/examples/ezradio_per/arm/ezradio_per.uvprojx,../hardware/kit/SLWSTK6241A_EZR32HG/examples/ezradio_per/iar/ezradio_per.eww"/>
    <properties key="core.boardCompatibility" value="brd4542b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r55."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6241A_ezradio_simple_trx" description="&lt;h1&gt;&lt;b&gt;EZRadio simple TRx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32HG CMSIS including emlib, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use two boards with same configuration and firmware, so&#xD;&#xA;both packet transmission and reception functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can send one packet with the radio by pushing the PB0 button. The&#xD;&#xA;data counter in the packet is incremented and shown on the LCD. If the&#xD;&#xA;packet is received by the other device, the received data is shown on its&#xD;&#xA;LCD. If the packet is received with CRC error this is printed as well.&#xD;&#xA;&#xD;&#xA;The user can send specified or unlimited number of packets by pushing PB1.&#xD;&#xA;The user can cease the transmission by pushing PB1 again.&#xD;&#xA;The number of transmitted packets is configurable.&#xD;&#xA;&#xD;&#xA;The application implements Packet Trace functionality, that means that the&#xD;&#xA;user can observe transmitted and received packets with the Network Analyzer Tool&#xD;&#xA;of Simplicity studio using the built-in default radio configuration header files.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6241A_EZR32HG Development Kit&#xD;&#xA;Device: EZR32HG320F64R55&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 434 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6241A_EZR32HG/examples/ezradio_simple_trx/SimplicityStudio/SLWSTK6241A_ezradio_simple_trx.slsproj,../hardware/kit/SLWSTK6241A_EZR32HG/examples/ezradio_simple_trx/arm/ezradio_simple_trx.uvprojx,../hardware/kit/SLWSTK6241A_EZR32HG/examples/ezradio_simple_trx/iar/ezradio_simple_trx.eww"/>
    <properties key="core.boardCompatibility" value="brd4542b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r55."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6241A_ezradio_trx_ack" description="&lt;h1&gt;&lt;b&gt;EZRadio TRx with auto acknowledge example using the EZRadio device in the EZR32&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt; device.&#xD;&#xA;&#xD;&#xA;This example project uses the EZR32HG CMSIS including emlib, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use two boards with same configuration and firmware, so&#xD;&#xA;both packet transmission and reception functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can send one packet with the radio by pushing the PB0 button. The&#xD;&#xA;data counter in the packet is incremented and shown on the LCD. If the&#xD;&#xA;packet is received by the other device, the received data is shown on its&#xD;&#xA;LCD. If the packet is received with CRC error this is printed as well. In case&#xD;&#xA;the data is received properly the receiver automatically sends back an&#xD;&#xA;acknowledge packet. The transmitted and received 'ACK' packet is shown on &#xD;&#xA;the LCD as well.&#xD;&#xA;&#xD;&#xA;The user can send specified or unlimited number of packets by pushing PB1.&#xD;&#xA;The user can cease the transmission by pushing PB1 again.&#xD;&#xA;The number of transmitted packets is configurable.&#xD;&#xA;&#xD;&#xA;The application implements Packet Trace functionality, that means that the&#xD;&#xA;user can observe transmitted and received packets with the Network Analyzer Tool&#xD;&#xA;of Simplicity studio using the built-in default radio configuration header files.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6241A_EZR32HG Development Kit&#xD;&#xA;Device: EZR32HG320F64R55&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 434 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6241A_EZR32HG/examples/ezradio_trx_ack/SimplicityStudio/SLWSTK6241A_ezradio_trx_ack.slsproj,../hardware/kit/SLWSTK6241A_EZR32HG/examples/ezradio_trx_ack/arm/ezradio_trx_ack.uvprojx,../hardware/kit/SLWSTK6241A_EZR32HG/examples/ezradio_trx_ack/iar/ezradio_trx_ack.eww"/>
    <properties key="core.boardCompatibility" value="brd4542b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r55."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6241A_ezradio_direct_tx" description="&lt;h1&gt;&lt;b&gt;EZRadio Direct Tx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32HG CMSIS including emlib, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use this example together with the Direct Rx example&#xD;&#xA;running on an other node, so the link functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can start direct transmission by pressing the PB0 button. &#xD;&#xA;Ceasing direct transmission can be issued by pressing the PB0 button again.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6241A_EZR32HG Development Kit&#xD;&#xA;Device: EZR32HG320F64R55&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 434 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6241A_EZR32HG/examples/ezradio_direct_tx/SimplicityStudio/SLWSTK6241A_ezradio_direct_tx.slsproj,../hardware/kit/SLWSTK6241A_EZR32HG/examples/ezradio_direct_tx/arm/ezradio_direct_tx.uvprojx,../hardware/kit/SLWSTK6241A_EZR32HG/examples/ezradio_direct_tx/iar/ezradio_direct_tx.eww"/>
    <properties key="core.boardCompatibility" value="brd4542b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r55."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6241A_ezradio_direct_rx" description="&lt;h1&gt;&lt;b&gt;EZRadio Direct Rx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32HG CMSIS including emlib, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use this example together with the Direct Tx example&#xD;&#xA;running on an other node, so the link functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can start direct reception by pressing the PB0 button. &#xD;&#xA;Ceasing direct reception can be issued by pressing the PB0 button again.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6241A_EZR32HG Development Kit&#xD;&#xA;Device: EZR32HG320F64R55&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 434 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6241A_EZR32HG/examples/ezradio_direct_rx/SimplicityStudio/SLWSTK6241A_ezradio_direct_rx.slsproj,../hardware/kit/SLWSTK6241A_EZR32HG/examples/ezradio_direct_rx/arm/ezradio_direct_rx.uvprojx,../hardware/kit/SLWSTK6241A_EZR32HG/examples/ezradio_direct_rx/iar/ezradio_direct_rx.eww"/>
    <properties key="core.boardCompatibility" value="brd4542b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r55."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6241A_ezradio_pn9" description="&lt;h1&gt;&lt;b&gt;EZRadio PN9 transmission example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32HG CMSIS including emlib, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;The user can start PN9 (pseudorandom binary where N=9) transmission by pressing&#xD;&#xA;the PB0 button. Ceasing the transmission can be issued by pressing the PB0 &#xD;&#xA;button again. &#xD;&#xA;See the EzRadio documentation for more information on PN9 transmission.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6241A_EZR32HG Development Kit&#xD;&#xA;Device: EZR32HG320F64R55&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 434 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6241A_EZR32HG/examples/ezradio_pn9/SimplicityStudio/SLWSTK6241A_ezradio_pn9.slsproj,../hardware/kit/SLWSTK6241A_EZR32HG/examples/ezradio_pn9/arm/ezradio_pn9.uvprojx,../hardware/kit/SLWSTK6241A_EZR32HG/examples/ezradio_pn9/iar/ezradio_pn9.eww"/>
    <properties key="core.boardCompatibility" value="brd4542b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r55."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6241A_ezradio_unmodulated_carrier" description="&lt;h1&gt;&lt;b&gt;EZRadio Unmodulated Carrier transmission example using the EZRadio device in&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;the EZR32 device.&#xD;&#xA;&#xD;&#xA;This example project uses the EZR32HG CMSIS including emlib, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;The user can start CW transmission by pressing the PB0 button. &#xD;&#xA;Ceasing the transmission can be issued by pressing the PB0 button again.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6241A_EZR32HG Development Kit&#xD;&#xA;Device: EZR32HG320F64R55&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 434 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6241A_EZR32HG/examples/ezradio_unmodulated_carrier/SimplicityStudio/SLWSTK6241A_ezradio_unmodulated_carrier.slsproj,../hardware/kit/SLWSTK6241A_EZR32HG/examples/ezradio_unmodulated_carrier/arm/ezradio_unmodulated_carrier.uvprojx,../hardware/kit/SLWSTK6241A_EZR32HG/examples/ezradio_unmodulated_carrier/iar/ezradio_unmodulated_carrier.eww"/>
    <properties key="core.boardCompatibility" value="brd4542b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r55."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6242A_blink" description="&lt;h1&gt;&lt;b&gt;Blink example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use CMSIS and the emlib peripheral library to&#xD;&#xA;demonstrate the use of the LED's on the starter kit. This example is intended as&#xD;&#xA;a skeleton for new projects.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6242A_EZR32HG Starter Kit&#xD;&#xA;Device: EZR32HG320F64R61&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 915 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6242A_EZR32HG/examples/blink/SimplicityStudio/SLWSTK6242A_blink.slsproj,../hardware/kit/SLWSTK6242A_EZR32HG/examples/blink/arm/blink.uvprojx,../hardware/kit/SLWSTK6242A_EZR32HG/examples/blink/iar/blink.eww"/>
    <properties key="core.boardCompatibility" value="brd4543b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r68."/>
    <properties key="template.initiallyOpenedResource" value="src/blink.c"/>
  </descriptors>
  <descriptors label="SLWSTK6242A_clock" description="&lt;h1&gt;&lt;b&gt;Analog and digital clock example using the Memory LCD on the SLWSTK6242A_EZR32HG.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS including emlib and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the Sharp Memory LCD display on the SLWSTK6242A_EZR32HG kit.&#xD;&#xA;&#xD;&#xA;The user can switch between analog and digital clock modes by pushing&#xD;&#xA;the PB0 button.&#xD;&#xA;&#xD;&#xA;The user can increment the second count by pushing the PB1 button.&#xD;&#xA;The minute count can be incremented by pushing the PB1 button for more&#xD;&#xA;than 2 seconds.&#xD;&#xA;&#xD;&#xA;The analog clock mode demonstrates the use of GLIB to draw hour, minute&#xD;&#xA;and second pointers on the background which is a bitmap in flash memory.&#xD;&#xA;&#xD;&#xA;The digital clock demonstrates the 16x20 font (including number characters&#xD;&#xA;only) of the textdisplay driver.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6242A_EZR32HG Starter Kit&#xD;&#xA;Device: EZR32HG320F64R61&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 915 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6242A_EZR32HG/examples/clock/SimplicityStudio/SLWSTK6242A_clock.slsproj,../hardware/kit/SLWSTK6242A_EZR32HG/examples/clock/arm/clock.uvprojx,../hardware/kit/SLWSTK6242A_EZR32HG/examples/clock/iar/clock.eww"/>
    <properties key="core.boardCompatibility" value="brd4543b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r68."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6242A_humitemp" description="&lt;h1&gt;&lt;b&gt;Humidity and temperature demo using the on-board si7021 sensor on the&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;SLWSTK6242A_EZR32HG board.&#xD;&#xA;&#xD;&#xA;This example project uses CMSIS including emlib and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the Sharp Memory LCD display and the si7021 humidity and temperature sensor on the&#xD;&#xA;SLWSTK6242A_EZR32HG board.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6242A_EZR32HG Starter Kit&#xD;&#xA;Device: EZR32HG320F64R61&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 915 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6242A_EZR32HG/examples/humitemp/SimplicityStudio/SLWSTK6242A_humitemp.slsproj,../hardware/kit/SLWSTK6242A_EZR32HG/examples/humitemp/arm/humitemp.uvprojx,../hardware/kit/SLWSTK6242A_EZR32HG/examples/humitemp/iar/humitemp.eww"/>
    <properties key="core.boardCompatibility" value="brd4543b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r68."/>
    <properties key="template.initiallyOpenedResource" value="src/humitemp.c"/>
  </descriptors>
  <descriptors label="SLWSTK6242A_rs232" description="&lt;h1&gt;&lt;b&gt;VCOM/USART/LEUART RS232 output example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses CMSIS and emlib, to demonstrates the&#xD;&#xA;use of LEUART, USART or VCOM  communication on the SLWSTK6242A_EZR32HG&#xD;&#xA;wireless starter kit.&#xD;&#xA;&#xD;&#xA;Serial port selection is done by defining any one of compiletime macros:&#xD;&#xA;#define RETARGET_LEUART0&#xD;&#xA;#define RETARGET_USART0&#xD;&#xA;#define RETARGET_VCOM       (default)&#xD;&#xA;&#xD;&#xA;If a USART is used set terminal configuration to 115200-8-N-1.&#xD;&#xA;If the LEUART is used set terminal configuration to 9600-8-N-1.&#xD;&#xA;For the default VCOM communication mode, serial port settings are &quot;dont care&quot;.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6242A_EZR32HG Starter Kit&#xD;&#xA;Device: EZR32HG320F64R61&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 915 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6242A_EZR32HG/examples/rs232/SimplicityStudio/SLWSTK6242A_rs232.slsproj,../hardware/kit/SLWSTK6242A_EZR32HG/examples/rs232/arm/rs232.uvprojx,../hardware/kit/SLWSTK6242A_EZR32HG/examples/rs232/iar/rs232.eww"/>
    <properties key="core.boardCompatibility" value="brd4543b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r68."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6242A_ezradio_per" description="&lt;h1&gt;&lt;b&gt;EZRadio packet error rate (PER) example using the EZRadio device in the EZR32HG&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt; device.&#xD;&#xA;&#xD;&#xA;This example project uses the EZR32HG CMSIS including emlib, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use two boards with same configuration and firmware, so&#xD;&#xA;both packet transmission and reception functionality can be tested.&#xD;&#xA;&#xD;&#xA;This example bases on the standard TRx with auto acknowledge example. It is &#xD;&#xA;advised to study the original application first.&#xD;&#xA;All the original functionalities can be turned on, however, the main purpose&#xD;&#xA;of this example is to show how to implement transmission packet error rate (PER) &#xD;&#xA;and RSSI measurements in an application. The user can send either one (PB0) &#xD;&#xA;or multiple packets (PB1) with the transmitter node and study the PER and RSSI&#xD;&#xA;values on the receiver node.&#xD;&#xA;&#xD;&#xA;The user can send specified or unlimited number of packets by pushing PB1.&#xD;&#xA;The user can cease the transmission by pushing PB1 again.&#xD;&#xA;The number of transmitted packets is configurable.&#xD;&#xA;&#xD;&#xA;The application implements Packet Trace functionality, that means that the&#xD;&#xA;user can observe transmitted and received packets with the Network Analyzer Tool&#xD;&#xA;of Simplicity studio using the built-in default radio configuration header files.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6242A_EZR32HG Development Kit&#xD;&#xA;Device: EZR32HG320F64R68&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 915 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6242A_EZR32HG/examples/ezradio_per/SimplicityStudio/SLWSTK6242A_ezradio_per.slsproj,../hardware/kit/SLWSTK6242A_EZR32HG/examples/ezradio_per/arm/ezradio_per.uvprojx,../hardware/kit/SLWSTK6242A_EZR32HG/examples/ezradio_per/iar/ezradio_per.eww"/>
    <properties key="core.boardCompatibility" value="brd4543b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r68."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6242A_ezradio_simple_trx" description="&lt;h1&gt;&lt;b&gt;EZRadio simple TRx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32HG CMSIS including emlib, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use two boards with same configuration and firmware, so&#xD;&#xA;both packet transmission and reception functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can send one packet with the radio by pushing the PB0 button. The&#xD;&#xA;data counter in the packet is incremented and shown on the LCD. If the&#xD;&#xA;packet is received by the other device, the received data is shown on its&#xD;&#xA;LCD. If the packet is received with CRC error this is printed as well.&#xD;&#xA;&#xD;&#xA;The user can send specified or unlimited number of packets by pushing PB1.&#xD;&#xA;The user can cease the transmission by pushing PB1 again.&#xD;&#xA;The number of transmitted packets is configurable.&#xD;&#xA;&#xD;&#xA;The application implements Packet Trace functionality, that means that the&#xD;&#xA;user can observe transmitted and received packets with the Network Analyzer Tool&#xD;&#xA;of Simplicity studio using the built-in default radio configuration header files.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6242A_EZR32HG Development Kit&#xD;&#xA;Device: EZR32HG320F64R68&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 915 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6242A_EZR32HG/examples/ezradio_simple_trx/SimplicityStudio/SLWSTK6242A_ezradio_simple_trx.slsproj,../hardware/kit/SLWSTK6242A_EZR32HG/examples/ezradio_simple_trx/arm/ezradio_simple_trx.uvprojx,../hardware/kit/SLWSTK6242A_EZR32HG/examples/ezradio_simple_trx/iar/ezradio_simple_trx.eww"/>
    <properties key="core.boardCompatibility" value="brd4543b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r68."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6242A_ezradio_trx_ack" description="&lt;h1&gt;&lt;b&gt;EZRadio TRx with auto acknowledge example using the EZRadio device in the EZR32&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt; device.&#xD;&#xA;&#xD;&#xA;This example project uses the EZR32HG CMSIS including emlib, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use two boards with same configuration and firmware, so&#xD;&#xA;both packet transmission and reception functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can send one packet with the radio by pushing the PB0 button. The&#xD;&#xA;data counter in the packet is incremented and shown on the LCD. If the&#xD;&#xA;packet is received by the other device, the received data is shown on its&#xD;&#xA;LCD. If the packet is received with CRC error this is printed as well. In case&#xD;&#xA;the data is received properly the receiver automatically sends back an&#xD;&#xA;acknowledge packet. The transmitted and received 'ACK' packet is shown on &#xD;&#xA;the LCD as well.&#xD;&#xA;&#xD;&#xA;The user can send specified or unlimited number of packets by pushing PB1.&#xD;&#xA;The user can cease the transmission by pushing PB1 again.&#xD;&#xA;The number of transmitted packets is configurable.&#xD;&#xA;&#xD;&#xA;The application implements Packet Trace functionality, that means that the&#xD;&#xA;user can observe transmitted and received packets with the Network Analyzer Tool&#xD;&#xA;of Simplicity studio using the built-in default radio configuration header files.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6242A_EZR32HG Development Kit&#xD;&#xA;Device: EZR32HG320F64R68&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 915 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6242A_EZR32HG/examples/ezradio_trx_ack/SimplicityStudio/SLWSTK6242A_ezradio_trx_ack.slsproj,../hardware/kit/SLWSTK6242A_EZR32HG/examples/ezradio_trx_ack/arm/ezradio_trx_ack.uvprojx,../hardware/kit/SLWSTK6242A_EZR32HG/examples/ezradio_trx_ack/iar/ezradio_trx_ack.eww"/>
    <properties key="core.boardCompatibility" value="brd4543b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r68."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6242A_ezradio_direct_tx" description="&lt;h1&gt;&lt;b&gt;EZRadio Direct Tx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32HG CMSIS including emlib, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use this example together with the Direct Rx example&#xD;&#xA;running on an other node, so the link functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can start direct transmission by pressing the PB0 button. &#xD;&#xA;Ceasing direct transmission can be issued by pressing the PB0 button again.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6242A_EZR32HG Development Kit&#xD;&#xA;Device: EZR32HG320F64R68&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 915 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6242A_EZR32HG/examples/ezradio_direct_tx/SimplicityStudio/SLWSTK6242A_ezradio_direct_tx.slsproj,../hardware/kit/SLWSTK6242A_EZR32HG/examples/ezradio_direct_tx/arm/ezradio_direct_tx.uvprojx,../hardware/kit/SLWSTK6242A_EZR32HG/examples/ezradio_direct_tx/iar/ezradio_direct_tx.eww"/>
    <properties key="core.boardCompatibility" value="brd4543b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r68."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6242A_ezradio_direct_rx" description="&lt;h1&gt;&lt;b&gt;EZRadio Direct Rx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32HG CMSIS including emlib, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use this example together with the Direct Tx example&#xD;&#xA;running on an other node, so the link functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can start direct reception by pressing the PB0 button. &#xD;&#xA;Ceasing direct reception can be issued by pressing the PB0 button again.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6242A_EZR32HG Development Kit&#xD;&#xA;Device: EZR32HG320F64R68&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 915 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6242A_EZR32HG/examples/ezradio_direct_rx/SimplicityStudio/SLWSTK6242A_ezradio_direct_rx.slsproj,../hardware/kit/SLWSTK6242A_EZR32HG/examples/ezradio_direct_rx/arm/ezradio_direct_rx.uvprojx,../hardware/kit/SLWSTK6242A_EZR32HG/examples/ezradio_direct_rx/iar/ezradio_direct_rx.eww"/>
    <properties key="core.boardCompatibility" value="brd4543b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r68."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6242A_ezradio_pn9" description="&lt;h1&gt;&lt;b&gt;EZRadio PN9 transmission example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32HG CMSIS including emlib, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;The user can start PN9 (pseudorandom binary where N=9) transmission by pressing&#xD;&#xA;the PB0 button. Ceasing the transmission can be issued by pressing the PB0 &#xD;&#xA;button again. &#xD;&#xA;See the EzRadio documentation for more information on PN9 transmission.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6242A_EZR32HG Development Kit&#xD;&#xA;Device: EZR32HG320F64R68&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 915 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6242A_EZR32HG/examples/ezradio_pn9/SimplicityStudio/SLWSTK6242A_ezradio_pn9.slsproj,../hardware/kit/SLWSTK6242A_EZR32HG/examples/ezradio_pn9/arm/ezradio_pn9.uvprojx,../hardware/kit/SLWSTK6242A_EZR32HG/examples/ezradio_pn9/iar/ezradio_pn9.eww"/>
    <properties key="core.boardCompatibility" value="brd4543b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r68."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6242A_ezradio_unmodulated_carrier" description="&lt;h1&gt;&lt;b&gt;EZRadio Unmodulated Carrier transmission example using the EZRadio device in&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;the EZR32 device.&#xD;&#xA;&#xD;&#xA;This example project uses the EZR32HG CMSIS including emlib, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;The user can start CW transmission by pressing the PB0 button. &#xD;&#xA;Ceasing the transmission can be issued by pressing the PB0 button again.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6242A_EZR32HG Development Kit&#xD;&#xA;Device: EZR32HG320F64R68&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 915 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6242A_EZR32HG/examples/ezradio_unmodulated_carrier/SimplicityStudio/SLWSTK6242A_ezradio_unmodulated_carrier.slsproj,../hardware/kit/SLWSTK6242A_EZR32HG/examples/ezradio_unmodulated_carrier/arm/ezradio_unmodulated_carrier.uvprojx,../hardware/kit/SLWSTK6242A_EZR32HG/examples/ezradio_unmodulated_carrier/iar/ezradio_unmodulated_carrier.eww"/>
    <properties key="core.boardCompatibility" value="brd4543b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r68."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6243A_blink" description="&lt;h1&gt;&lt;b&gt;Blink example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use CMSIS and the emlib peripheral library to&#xD;&#xA;demonstrate the use of the LED's on the starter kit. This example is intended as&#xD;&#xA;a skeleton for new projects.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6243A_EZR32HG Starter Kit&#xD;&#xA;Device: EZR32HG320F64R61&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 490 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6243A_EZR32HG/examples/blink/SimplicityStudio/SLWSTK6243A_blink.slsproj,../hardware/kit/SLWSTK6243A_EZR32HG/examples/blink/arm/blink.uvprojx,../hardware/kit/SLWSTK6243A_EZR32HG/examples/blink/iar/blink.eww"/>
    <properties key="core.boardCompatibility" value="brd4545a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r63."/>
    <properties key="template.initiallyOpenedResource" value="src/blink.c"/>
  </descriptors>
  <descriptors label="SLWSTK6243A_clock" description="&lt;h1&gt;&lt;b&gt;Analog and digital clock example using the Memory LCD on the SLWSTK6243A_EZR32HG.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS including emlib and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the Sharp Memory LCD display on the SLWSTK6243A_EZR32HG kit.&#xD;&#xA;&#xD;&#xA;The user can switch between analog and digital clock modes by pushing&#xD;&#xA;the PB0 button.&#xD;&#xA;&#xD;&#xA;The user can increment the second count by pushing the PB1 button.&#xD;&#xA;The minute count can be incremented by pushing the PB1 button for more&#xD;&#xA;than 2 seconds.&#xD;&#xA;&#xD;&#xA;The analog clock mode demonstrates the use of GLIB to draw hour, minute&#xD;&#xA;and second pointers on the background which is a bitmap in flash memory.&#xD;&#xA;&#xD;&#xA;The digital clock demonstrates the 16x20 font (including number characters&#xD;&#xA;only) of the textdisplay driver.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6243A_EZR32HG Starter Kit&#xD;&#xA;Device: EZR32HG320F64R61&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 490 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6243A_EZR32HG/examples/clock/SimplicityStudio/SLWSTK6243A_clock.slsproj,../hardware/kit/SLWSTK6243A_EZR32HG/examples/clock/arm/clock.uvprojx,../hardware/kit/SLWSTK6243A_EZR32HG/examples/clock/iar/clock.eww"/>
    <properties key="core.boardCompatibility" value="brd4545a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6243A_humitemp" description="&lt;h1&gt;&lt;b&gt;Humidity and temperature demo using the on-board si7021 sensor on the&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;SLWSTK6243A_EZR32HG board.&#xD;&#xA;&#xD;&#xA;This example project uses CMSIS including emlib and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the Sharp Memory LCD display and the si7021 humidity and temperature sensor on the&#xD;&#xA;SLWSTK6243A_EZR32HG board.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6243A_EZR32HG Starter Kit&#xD;&#xA;Device: EZR32HG320F64R61&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 490 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6243A_EZR32HG/examples/humitemp/SimplicityStudio/SLWSTK6243A_humitemp.slsproj,../hardware/kit/SLWSTK6243A_EZR32HG/examples/humitemp/arm/humitemp.uvprojx,../hardware/kit/SLWSTK6243A_EZR32HG/examples/humitemp/iar/humitemp.eww"/>
    <properties key="core.boardCompatibility" value="brd4545a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r63."/>
    <properties key="template.initiallyOpenedResource" value="src/humitemp.c"/>
  </descriptors>
  <descriptors label="SLWSTK6243A_rs232" description="&lt;h1&gt;&lt;b&gt;VCOM/USART/LEUART RS232 output example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses CMSIS and emlib, to demonstrates the&#xD;&#xA;use of LEUART, USART or VCOM  communication on the SLWSTK6243A_EZR32HG&#xD;&#xA;wireless starter kit.&#xD;&#xA;&#xD;&#xA;Serial port selection is done by defining any one of compiletime macros:&#xD;&#xA;#define RETARGET_LEUART0&#xD;&#xA;#define RETARGET_USART0&#xD;&#xA;#define RETARGET_VCOM       (default)&#xD;&#xA;&#xD;&#xA;If a USART is used set terminal configuration to 115200-8-N-1.&#xD;&#xA;If the LEUART is used set terminal configuration to 9600-8-N-1.&#xD;&#xA;For the default VCOM communication mode, serial port settings are &quot;dont care&quot;.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6243A_EZR32HG Starter Kit&#xD;&#xA;Device: EZR32HG320F64R61&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 490 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6243A_EZR32HG/examples/rs232/SimplicityStudio/SLWSTK6243A_rs232.slsproj,../hardware/kit/SLWSTK6243A_EZR32HG/examples/rs232/arm/rs232.uvprojx,../hardware/kit/SLWSTK6243A_EZR32HG/examples/rs232/iar/rs232.eww"/>
    <properties key="core.boardCompatibility" value="brd4545a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6243A_ezradio_per" description="&lt;h1&gt;&lt;b&gt;EZRadio packet error rate (PER) example using the EZRadio device in the EZR32HG&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt; device.&#xD;&#xA;&#xD;&#xA;This example project uses the EZR32HG CMSIS including emlib, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use two boards with same configuration and firmware, so&#xD;&#xA;both packet transmission and reception functionality can be tested.&#xD;&#xA;&#xD;&#xA;This example bases on the standard TRx with auto acknowledge example. It is &#xD;&#xA;advised to study the original application first.&#xD;&#xA;All the original functionalities can be turned on, however, the main purpose&#xD;&#xA;of this example is to show how to implement transmission packet error rate (PER) &#xD;&#xA;and RSSI measurements in an application. The user can send either one (PB0) &#xD;&#xA;or multiple packets (PB1) with the transmitter node and study the PER and RSSI&#xD;&#xA;values on the receiver node.&#xD;&#xA;&#xD;&#xA;The user can send specified or unlimited number of packets by pushing PB1.&#xD;&#xA;The user can cease the transmission by pushing PB1 again.&#xD;&#xA;The number of transmitted packets is configurable.&#xD;&#xA;&#xD;&#xA;The application implements Packet Trace functionality, that means that the&#xD;&#xA;user can observe transmitted and received packets with the Network Analyzer Tool&#xD;&#xA;of Simplicity studio using the built-in default radio configuration header files.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6243A_EZR32HG Development Kit&#xD;&#xA;Device: EZR32HG320F64R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 490 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6243A_EZR32HG/examples/ezradio_per/SimplicityStudio/SLWSTK6243A_ezradio_per.slsproj,../hardware/kit/SLWSTK6243A_EZR32HG/examples/ezradio_per/arm/ezradio_per.uvprojx,../hardware/kit/SLWSTK6243A_EZR32HG/examples/ezradio_per/iar/ezradio_per.eww"/>
    <properties key="core.boardCompatibility" value="brd4545a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6243A_ezradio_simple_trx" description="&lt;h1&gt;&lt;b&gt;EZRadio simple TRx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32HG CMSIS including emlib, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use two boards with same configuration and firmware, so&#xD;&#xA;both packet transmission and reception functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can send one packet with the radio by pushing the PB0 button. The&#xD;&#xA;data counter in the packet is incremented and shown on the LCD. If the&#xD;&#xA;packet is received by the other device, the received data is shown on its&#xD;&#xA;LCD. If the packet is received with CRC error this is printed as well.&#xD;&#xA;&#xD;&#xA;The user can send specified or unlimited number of packets by pushing PB1.&#xD;&#xA;The user can cease the transmission by pushing PB1 again.&#xD;&#xA;The number of transmitted packets is configurable.&#xD;&#xA;&#xD;&#xA;The application implements Packet Trace functionality, that means that the&#xD;&#xA;user can observe transmitted and received packets with the Network Analyzer Tool&#xD;&#xA;of Simplicity studio using the built-in default radio configuration header files.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6243A_EZR32HG Development Kit&#xD;&#xA;Device: EZR32HG320F64R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 490 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6243A_EZR32HG/examples/ezradio_simple_trx/SimplicityStudio/SLWSTK6243A_ezradio_simple_trx.slsproj,../hardware/kit/SLWSTK6243A_EZR32HG/examples/ezradio_simple_trx/arm/ezradio_simple_trx.uvprojx,../hardware/kit/SLWSTK6243A_EZR32HG/examples/ezradio_simple_trx/iar/ezradio_simple_trx.eww"/>
    <properties key="core.boardCompatibility" value="brd4545a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6243A_ezradio_trx_ack" description="&lt;h1&gt;&lt;b&gt;EZRadio TRx with auto acknowledge example using the EZRadio device in the EZR32&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt; device.&#xD;&#xA;&#xD;&#xA;This example project uses the EZR32HG CMSIS including emlib, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use two boards with same configuration and firmware, so&#xD;&#xA;both packet transmission and reception functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can send one packet with the radio by pushing the PB0 button. The&#xD;&#xA;data counter in the packet is incremented and shown on the LCD. If the&#xD;&#xA;packet is received by the other device, the received data is shown on its&#xD;&#xA;LCD. If the packet is received with CRC error this is printed as well. In case&#xD;&#xA;the data is received properly the receiver automatically sends back an&#xD;&#xA;acknowledge packet. The transmitted and received 'ACK' packet is shown on &#xD;&#xA;the LCD as well.&#xD;&#xA;&#xD;&#xA;The user can send specified or unlimited number of packets by pushing PB1.&#xD;&#xA;The user can cease the transmission by pushing PB1 again.&#xD;&#xA;The number of transmitted packets is configurable.&#xD;&#xA;&#xD;&#xA;The application implements Packet Trace functionality, that means that the&#xD;&#xA;user can observe transmitted and received packets with the Network Analyzer Tool&#xD;&#xA;of Simplicity studio using the built-in default radio configuration header files.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6243A_EZR32HG Development Kit&#xD;&#xA;Device: EZR32HG320F64R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 490 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6243A_EZR32HG/examples/ezradio_trx_ack/SimplicityStudio/SLWSTK6243A_ezradio_trx_ack.slsproj,../hardware/kit/SLWSTK6243A_EZR32HG/examples/ezradio_trx_ack/arm/ezradio_trx_ack.uvprojx,../hardware/kit/SLWSTK6243A_EZR32HG/examples/ezradio_trx_ack/iar/ezradio_trx_ack.eww"/>
    <properties key="core.boardCompatibility" value="brd4545a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6243A_ezradio_direct_tx" description="&lt;h1&gt;&lt;b&gt;EZRadio Direct Tx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32HG CMSIS including emlib, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use this example together with the Direct Rx example&#xD;&#xA;running on an other node, so the link functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can start direct transmission by pressing the PB0 button. &#xD;&#xA;Ceasing direct transmission can be issued by pressing the PB0 button again.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6243A_EZR32HG Development Kit&#xD;&#xA;Device: EZR32HG320F64R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 490 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6243A_EZR32HG/examples/ezradio_direct_tx/SimplicityStudio/SLWSTK6243A_ezradio_direct_tx.slsproj,../hardware/kit/SLWSTK6243A_EZR32HG/examples/ezradio_direct_tx/arm/ezradio_direct_tx.uvprojx,../hardware/kit/SLWSTK6243A_EZR32HG/examples/ezradio_direct_tx/iar/ezradio_direct_tx.eww"/>
    <properties key="core.boardCompatibility" value="brd4545a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6243A_ezradio_direct_rx" description="&lt;h1&gt;&lt;b&gt;EZRadio Direct Rx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32HG CMSIS including emlib, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use this example together with the Direct Tx example&#xD;&#xA;running on an other node, so the link functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can start direct reception by pressing the PB0 button. &#xD;&#xA;Ceasing direct reception can be issued by pressing the PB0 button again.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6243A_EZR32HG Development Kit&#xD;&#xA;Device: EZR32HG320F64R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 490 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6243A_EZR32HG/examples/ezradio_direct_rx/SimplicityStudio/SLWSTK6243A_ezradio_direct_rx.slsproj,../hardware/kit/SLWSTK6243A_EZR32HG/examples/ezradio_direct_rx/arm/ezradio_direct_rx.uvprojx,../hardware/kit/SLWSTK6243A_EZR32HG/examples/ezradio_direct_rx/iar/ezradio_direct_rx.eww"/>
    <properties key="core.boardCompatibility" value="brd4545a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6243A_ezradio_pn9" description="&lt;h1&gt;&lt;b&gt;EZRadio PN9 transmission example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32HG CMSIS including emlib, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;The user can start PN9 (pseudorandom binary where N=9) transmission by pressing&#xD;&#xA;the PB0 button. Ceasing the transmission can be issued by pressing the PB0 &#xD;&#xA;button again. &#xD;&#xA;See the EzRadio documentation for more information on PN9 transmission.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6243A_EZR32HG Development Kit&#xD;&#xA;Device: EZR32HG320F64R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 490 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6243A_EZR32HG/examples/ezradio_pn9/SimplicityStudio/SLWSTK6243A_ezradio_pn9.slsproj,../hardware/kit/SLWSTK6243A_EZR32HG/examples/ezradio_pn9/arm/ezradio_pn9.uvprojx,../hardware/kit/SLWSTK6243A_EZR32HG/examples/ezradio_pn9/iar/ezradio_pn9.eww"/>
    <properties key="core.boardCompatibility" value="brd4545a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6243A_ezradio_unmodulated_carrier" description="&lt;h1&gt;&lt;b&gt;EZRadio Unmodulated Carrier transmission example using the EZRadio device in&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;the EZR32 device.&#xD;&#xA;&#xD;&#xA;This example project uses the EZR32HG CMSIS including emlib, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;The user can start CW transmission by pressing the PB0 button. &#xD;&#xA;Ceasing the transmission can be issued by pressing the PB0 button again.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6243A_EZR32HG Development Kit&#xD;&#xA;Device: EZR32HG320F64R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 490 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6243A_EZR32HG/examples/ezradio_unmodulated_carrier/SimplicityStudio/SLWSTK6243A_ezradio_unmodulated_carrier.slsproj,../hardware/kit/SLWSTK6243A_EZR32HG/examples/ezradio_unmodulated_carrier/arm/ezradio_unmodulated_carrier.uvprojx,../hardware/kit/SLWSTK6243A_EZR32HG/examples/ezradio_unmodulated_carrier/iar/ezradio_unmodulated_carrier.eww"/>
    <properties key="core.boardCompatibility" value="brd4545a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6244A_blink" description="&lt;h1&gt;&lt;b&gt;Blink example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use CMSIS and the emlib peripheral library to&#xD;&#xA;demonstrate the use of the LED's on the starter kit. This example is intended as&#xD;&#xA;a skeleton for new projects.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6244A_EZR32HG Starter Kit&#xD;&#xA;Device: EZR32HG320F64R61&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 169 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6244A_EZR32HG/examples/blink/SimplicityStudio/SLWSTK6244A_blink.slsproj,../hardware/kit/SLWSTK6244A_EZR32HG/examples/blink/arm/blink.uvprojx,../hardware/kit/SLWSTK6244A_EZR32HG/examples/blink/iar/blink.eww"/>
    <properties key="core.boardCompatibility" value="brd4544a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r63."/>
    <properties key="template.initiallyOpenedResource" value="src/blink.c"/>
  </descriptors>
  <descriptors label="SLWSTK6244A_clock" description="&lt;h1&gt;&lt;b&gt;Analog and digital clock example using the Memory LCD on the SLWSTK6244A_EZR32HG.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS including emlib and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the Sharp Memory LCD display on the SLWSTK6244A_EZR32HG kit.&#xD;&#xA;&#xD;&#xA;The user can switch between analog and digital clock modes by pushing&#xD;&#xA;the PB0 button.&#xD;&#xA;&#xD;&#xA;The user can increment the second count by pushing the PB1 button.&#xD;&#xA;The minute count can be incremented by pushing the PB1 button for more&#xD;&#xA;than 2 seconds.&#xD;&#xA;&#xD;&#xA;The analog clock mode demonstrates the use of GLIB to draw hour, minute&#xD;&#xA;and second pointers on the background which is a bitmap in flash memory.&#xD;&#xA;&#xD;&#xA;The digital clock demonstrates the 16x20 font (including number characters&#xD;&#xA;only) of the textdisplay driver.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6244A_EZR32HG Starter Kit&#xD;&#xA;Device: EZR32HG320F64R61&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 169 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6244A_EZR32HG/examples/clock/SimplicityStudio/SLWSTK6244A_clock.slsproj,../hardware/kit/SLWSTK6244A_EZR32HG/examples/clock/arm/clock.uvprojx,../hardware/kit/SLWSTK6244A_EZR32HG/examples/clock/iar/clock.eww"/>
    <properties key="core.boardCompatibility" value="brd4544a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6244A_humitemp" description="&lt;h1&gt;&lt;b&gt;Humidity and temperature demo using the on-board si7021 sensor on the&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;SLWSTK6244A_EZR32HG board.&#xD;&#xA;&#xD;&#xA;This example project uses CMSIS including emlib and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the Sharp Memory LCD display and the si7021 humidity and temperature sensor on the&#xD;&#xA;SLWSTK6244A_EZR32HG board.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6244A_EZR32HG Starter Kit&#xD;&#xA;Device: EZR32HG320F64R61&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 169 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6244A_EZR32HG/examples/humitemp/SimplicityStudio/SLWSTK6244A_humitemp.slsproj,../hardware/kit/SLWSTK6244A_EZR32HG/examples/humitemp/arm/humitemp.uvprojx,../hardware/kit/SLWSTK6244A_EZR32HG/examples/humitemp/iar/humitemp.eww"/>
    <properties key="core.boardCompatibility" value="brd4544a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r63."/>
    <properties key="template.initiallyOpenedResource" value="src/humitemp.c"/>
  </descriptors>
  <descriptors label="SLWSTK6244A_rs232" description="&lt;h1&gt;&lt;b&gt;VCOM/USART/LEUART RS232 output example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses CMSIS and emlib, to demonstrates the&#xD;&#xA;use of LEUART, USART or VCOM  communication on the SLWSTK6244A_EZR32HG&#xD;&#xA;wireless starter kit.&#xD;&#xA;&#xD;&#xA;Serial port selection is done by defining any one of compiletime macros:&#xD;&#xA;#define RETARGET_LEUART0&#xD;&#xA;#define RETARGET_USART0&#xD;&#xA;#define RETARGET_VCOM       (default)&#xD;&#xA;&#xD;&#xA;If a USART is used set terminal configuration to 115200-8-N-1.&#xD;&#xA;If the LEUART is used set terminal configuration to 9600-8-N-1.&#xD;&#xA;For the default VCOM communication mode, serial port settings are &quot;dont care&quot;.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6244A_EZR32HG Starter Kit&#xD;&#xA;Device: EZR32HG320F64R61&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 169 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6244A_EZR32HG/examples/rs232/SimplicityStudio/SLWSTK6244A_rs232.slsproj,../hardware/kit/SLWSTK6244A_EZR32HG/examples/rs232/arm/rs232.uvprojx,../hardware/kit/SLWSTK6244A_EZR32HG/examples/rs232/iar/rs232.eww"/>
    <properties key="core.boardCompatibility" value="brd4544a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6244A_ezradio_per" description="&lt;h1&gt;&lt;b&gt;EZRadio packet error rate (PER) example using the EZRadio device in the EZR32HG&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt; device.&#xD;&#xA;&#xD;&#xA;This example project uses the EZR32HG CMSIS including emlib, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use two boards with same configuration and firmware, so&#xD;&#xA;both packet transmission and reception functionality can be tested.&#xD;&#xA;&#xD;&#xA;This example bases on the standard TRx with auto acknowledge example. It is &#xD;&#xA;advised to study the original application first.&#xD;&#xA;All the original functionalities can be turned on, however, the main purpose&#xD;&#xA;of this example is to show how to implement transmission packet error rate (PER) &#xD;&#xA;and RSSI measurements in an application. The user can send either one (PB0) &#xD;&#xA;or multiple packets (PB1) with the transmitter node and study the PER and RSSI&#xD;&#xA;values on the receiver node.&#xD;&#xA;&#xD;&#xA;The user can send specified or unlimited number of packets by pushing PB1.&#xD;&#xA;The user can cease the transmission by pushing PB1 again.&#xD;&#xA;The number of transmitted packets is configurable.&#xD;&#xA;&#xD;&#xA;The application implements Packet Trace functionality, that means that the&#xD;&#xA;user can observe transmitted and received packets with the Network Analyzer Tool&#xD;&#xA;of Simplicity studio using the built-in default radio configuration header files.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6244A_EZR32HG Development Kit&#xD;&#xA;Device: EZR32HG320F64R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 169 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6244A_EZR32HG/examples/ezradio_per/SimplicityStudio/SLWSTK6244A_ezradio_per.slsproj,../hardware/kit/SLWSTK6244A_EZR32HG/examples/ezradio_per/arm/ezradio_per.uvprojx,../hardware/kit/SLWSTK6244A_EZR32HG/examples/ezradio_per/iar/ezradio_per.eww"/>
    <properties key="core.boardCompatibility" value="brd4544a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6244A_ezradio_simple_trx" description="&lt;h1&gt;&lt;b&gt;EZRadio simple TRx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32HG CMSIS including emlib, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use two boards with same configuration and firmware, so&#xD;&#xA;both packet transmission and reception functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can send one packet with the radio by pushing the PB0 button. The&#xD;&#xA;data counter in the packet is incremented and shown on the LCD. If the&#xD;&#xA;packet is received by the other device, the received data is shown on its&#xD;&#xA;LCD. If the packet is received with CRC error this is printed as well.&#xD;&#xA;&#xD;&#xA;The user can send specified or unlimited number of packets by pushing PB1.&#xD;&#xA;The user can cease the transmission by pushing PB1 again.&#xD;&#xA;The number of transmitted packets is configurable.&#xD;&#xA;&#xD;&#xA;The application implements Packet Trace functionality, that means that the&#xD;&#xA;user can observe transmitted and received packets with the Network Analyzer Tool&#xD;&#xA;of Simplicity studio using the built-in default radio configuration header files.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6244A_EZR32HG Development Kit&#xD;&#xA;Device: EZR32HG320F64R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 169 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6244A_EZR32HG/examples/ezradio_simple_trx/SimplicityStudio/SLWSTK6244A_ezradio_simple_trx.slsproj,../hardware/kit/SLWSTK6244A_EZR32HG/examples/ezradio_simple_trx/arm/ezradio_simple_trx.uvprojx,../hardware/kit/SLWSTK6244A_EZR32HG/examples/ezradio_simple_trx/iar/ezradio_simple_trx.eww"/>
    <properties key="core.boardCompatibility" value="brd4544a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6244A_ezradio_trx_ack" description="&lt;h1&gt;&lt;b&gt;EZRadio TRx with auto acknowledge example using the EZRadio device in the EZR32&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt; device.&#xD;&#xA;&#xD;&#xA;This example project uses the EZR32HG CMSIS including emlib, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use two boards with same configuration and firmware, so&#xD;&#xA;both packet transmission and reception functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can send one packet with the radio by pushing the PB0 button. The&#xD;&#xA;data counter in the packet is incremented and shown on the LCD. If the&#xD;&#xA;packet is received by the other device, the received data is shown on its&#xD;&#xA;LCD. If the packet is received with CRC error this is printed as well. In case&#xD;&#xA;the data is received properly the receiver automatically sends back an&#xD;&#xA;acknowledge packet. The transmitted and received 'ACK' packet is shown on &#xD;&#xA;the LCD as well.&#xD;&#xA;&#xD;&#xA;The user can send specified or unlimited number of packets by pushing PB1.&#xD;&#xA;The user can cease the transmission by pushing PB1 again.&#xD;&#xA;The number of transmitted packets is configurable.&#xD;&#xA;&#xD;&#xA;The application implements Packet Trace functionality, that means that the&#xD;&#xA;user can observe transmitted and received packets with the Network Analyzer Tool&#xD;&#xA;of Simplicity studio using the built-in default radio configuration header files.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6244A_EZR32HG Development Kit&#xD;&#xA;Device: EZR32HG320F64R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 169 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6244A_EZR32HG/examples/ezradio_trx_ack/SimplicityStudio/SLWSTK6244A_ezradio_trx_ack.slsproj,../hardware/kit/SLWSTK6244A_EZR32HG/examples/ezradio_trx_ack/arm/ezradio_trx_ack.uvprojx,../hardware/kit/SLWSTK6244A_EZR32HG/examples/ezradio_trx_ack/iar/ezradio_trx_ack.eww"/>
    <properties key="core.boardCompatibility" value="brd4544a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6244A_ezradio_direct_tx" description="&lt;h1&gt;&lt;b&gt;EZRadio Direct Tx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32HG CMSIS including emlib, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use this example together with the Direct Rx example&#xD;&#xA;running on an other node, so the link functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can start direct transmission by pressing the PB0 button. &#xD;&#xA;Ceasing direct transmission can be issued by pressing the PB0 button again.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6244A_EZR32HG Development Kit&#xD;&#xA;Device: EZR32HG320F64R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 169 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6244A_EZR32HG/examples/ezradio_direct_tx/SimplicityStudio/SLWSTK6244A_ezradio_direct_tx.slsproj,../hardware/kit/SLWSTK6244A_EZR32HG/examples/ezradio_direct_tx/arm/ezradio_direct_tx.uvprojx,../hardware/kit/SLWSTK6244A_EZR32HG/examples/ezradio_direct_tx/iar/ezradio_direct_tx.eww"/>
    <properties key="core.boardCompatibility" value="brd4544a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6244A_ezradio_direct_rx" description="&lt;h1&gt;&lt;b&gt;EZRadio Direct Rx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32HG CMSIS including emlib, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use this example together with the Direct Tx example&#xD;&#xA;running on an other node, so the link functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can start direct reception by pressing the PB0 button. &#xD;&#xA;Ceasing direct reception can be issued by pressing the PB0 button again.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6244A_EZR32HG Development Kit&#xD;&#xA;Device: EZR32HG320F64R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 169 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6244A_EZR32HG/examples/ezradio_direct_rx/SimplicityStudio/SLWSTK6244A_ezradio_direct_rx.slsproj,../hardware/kit/SLWSTK6244A_EZR32HG/examples/ezradio_direct_rx/arm/ezradio_direct_rx.uvprojx,../hardware/kit/SLWSTK6244A_EZR32HG/examples/ezradio_direct_rx/iar/ezradio_direct_rx.eww"/>
    <properties key="core.boardCompatibility" value="brd4544a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6244A_ezradio_pn9" description="&lt;h1&gt;&lt;b&gt;EZRadio PN9 transmission example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32HG CMSIS including emlib, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;The user can start PN9 (pseudorandom binary where N=9) transmission by pressing&#xD;&#xA;the PB0 button. Ceasing the transmission can be issued by pressing the PB0 &#xD;&#xA;button again. &#xD;&#xA;See the EzRadio documentation for more information on PN9 transmission.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6244A_EZR32HG Development Kit&#xD;&#xA;Device: EZR32HG320F64R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 169 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6244A_EZR32HG/examples/ezradio_pn9/SimplicityStudio/SLWSTK6244A_ezradio_pn9.slsproj,../hardware/kit/SLWSTK6244A_EZR32HG/examples/ezradio_pn9/arm/ezradio_pn9.uvprojx,../hardware/kit/SLWSTK6244A_EZR32HG/examples/ezradio_pn9/iar/ezradio_pn9.eww"/>
    <properties key="core.boardCompatibility" value="brd4544a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6244A_ezradio_unmodulated_carrier" description="&lt;h1&gt;&lt;b&gt;EZRadio Unmodulated Carrier transmission example using the EZRadio device in&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;the EZR32 device.&#xD;&#xA;&#xD;&#xA;This example project uses the EZR32HG CMSIS including emlib, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;The user can start CW transmission by pressing the PB0 button. &#xD;&#xA;Ceasing the transmission can be issued by pressing the PB0 button again.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6244A_EZR32HG Development Kit&#xD;&#xA;Device: EZR32HG320F64R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 169 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../hardware/kit/SLWSTK6244A_EZR32HG/examples/ezradio_unmodulated_carrier/SimplicityStudio/SLWSTK6244A_ezradio_unmodulated_carrier.slsproj,../hardware/kit/SLWSTK6244A_EZR32HG/examples/ezradio_unmodulated_carrier/arm/ezradio_unmodulated_carrier.uvprojx,../hardware/kit/SLWSTK6244A_EZR32HG/examples/ezradio_unmodulated_carrier/iar/ezradio_unmodulated_carrier.eww"/>
    <properties key="core.boardCompatibility" value="brd4544a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
</model:MDescriptors>
